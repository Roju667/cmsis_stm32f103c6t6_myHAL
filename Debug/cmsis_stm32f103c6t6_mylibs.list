
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003238  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003634  08003634  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003634  08003634  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003634  08003634  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800363c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000068  080036a4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080036a4  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a18a  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef5  00000000  00000000  0002a21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000120c5  00000000  00000000  0002cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000714d  00000000  00000000  0003ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ab9b  00000000  00000000  00045e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a0a15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d0  00000000  00000000  000a0a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08003350 	.word	0x08003350

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08003350 	.word	0x08003350

08000170 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <GFX_SetFont+0x18>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000094 	.word	0x20000094

0800018c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <GFX_SetFontSize+0x16>
		size = size_t;
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <GFX_SetFontSize+0x20>)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	7013      	strb	r3, [r2, #0]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000000 	.word	0x20000000

080001b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ColorType color)
{
 80001b0:	b590      	push	{r4, r7, lr}
 80001b2:	b089      	sub	sp, #36	; 0x24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	4611      	mov	r1, r2
 80001bc:	461a      	mov	r2, r3
 80001be:	460b      	mov	r3, r1
 80001c0:	71fb      	strb	r3, [r7, #7]
 80001c2:	4613      	mov	r3, r2
 80001c4:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b7e      	cmp	r3, #126	; 0x7e
 80001ca:	d867      	bhi.n	800029c <GFX_DrawChar+0xec>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80001cc:	2300      	movs	r3, #0
 80001ce:	75fb      	strb	r3, [r7, #23]
 80001d0:	e05c      	b.n	800028c <GFX_DrawChar+0xdc>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <GFX_DrawChar+0xf4>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	3b20      	subs	r3, #32
 80001da:	4932      	ldr	r1, [pc, #200]	; (80002a4 <GFX_DrawChar+0xf4>)
 80001dc:	6809      	ldr	r1, [r1, #0]
 80001de:	3101      	adds	r1, #1
 80001e0:	7809      	ldrb	r1, [r1, #0]
 80001e2:	fb01 f103 	mul.w	r1, r1, r3
 80001e6:	7dfb      	ldrb	r3, [r7, #23]
 80001e8:	440b      	add	r3, r1
 80001ea:	3302      	adds	r3, #2
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80001f2:	2300      	movs	r3, #0
 80001f4:	757b      	strb	r3, [r7, #21]
 80001f6:	e03f      	b.n	8000278 <GFX_DrawChar+0xc8>
        {
            if(line & 1) // Check last pixel in line
 80001f8:	7dbb      	ldrb	r3, [r7, #22]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d031      	beq.n	8000266 <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 8000202:	4b29      	ldr	r3, [pc, #164]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d113      	bne.n	8000232 <GFX_DrawChar+0x82>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	b29a      	uxth	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	b29b      	uxth	r3, r3
 8000212:	4413      	add	r3, r2
 8000214:	b29b      	uxth	r3, r3
 8000216:	b218      	sxth	r0, r3
 8000218:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800021c:	b29a      	uxth	r2, r3
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	b29b      	uxth	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b29b      	uxth	r3, r3
 8000226:	b21b      	sxth	r3, r3
 8000228:	88ba      	ldrh	r2, [r7, #4]
 800022a:	4619      	mov	r1, r3
 800022c:	f000 fa2e 	bl	800068c <ILI9341_WritePixel>
 8000230:	e019      	b.n	8000266 <GFX_DrawChar+0xb6>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000232:	7dfb      	ldrb	r3, [r7, #23]
 8000234:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000236:	7812      	ldrb	r2, [r2, #0]
 8000238:	fb02 f203 	mul.w	r2, r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	18d0      	adds	r0, r2, r3
 8000240:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000244:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	fb02 f203 	mul.w	r2, r2, r3
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	18d1      	adds	r1, r2, r3
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	b29a      	uxth	r2, r3
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b29c      	uxth	r4, r3
 800025c:	88bb      	ldrh	r3, [r7, #4]
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	4623      	mov	r3, r4
 8000262:	f000 f8f9 	bl	8000458 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000266:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	757b      	strb	r3, [r7, #21]
 8000272:	7dbb      	ldrb	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	75bb      	strb	r3, [r7, #22]
 8000278:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <GFX_DrawChar+0xf4>)
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	4293      	cmp	r3, r2
 8000284:	dbb8      	blt.n	80001f8 <GFX_DrawChar+0x48>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	3301      	adds	r3, #1
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <GFX_DrawChar+0xf4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	429a      	cmp	r2, r3
 8000298:	d39b      	bcc.n	80001d2 <GFX_DrawChar+0x22>
 800029a:	e000      	b.n	800029e <GFX_DrawChar+0xee>
	if(chr > 0x7E) return; // chr > '~'
 800029c:	bf00      	nop
            }

        }
    }
}
 800029e:	371c      	adds	r7, #28
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	20000094 	.word	0x20000094
 80002a8:	20000000 	.word	0x20000000

080002ac <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ColorType color)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
 80002b8:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80002c4:	e015      	b.n	80002f2 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	7cfa      	ldrb	r2, [r7, #19]
 80002ca:	68b9      	ldr	r1, [r7, #8]
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	f7ff ff6f 	bl	80001b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <GFX_DrawString+0x5c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <GFX_DrawString+0x60>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	fb03 f302 	mul.w	r3, r3, r2
 80002e4:	3301      	adds	r3, #1
 80002e6:	697a      	ldr	r2, [r7, #20]
 80002e8:	4413      	add	r3, r2
 80002ea:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1e3      	bne.n	80002c6 <GFX_DrawString+0x1a>
	}
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000094 	.word	0x20000094
 800030c:	20000000 	.word	0x20000000

08000310 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	; 0x30
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000328:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800032c:	6879      	ldr	r1, [r7, #4]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	1acb      	subs	r3, r1, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	bfb8      	it	lt
 8000336:	425b      	neglt	r3, r3
 8000338:	429a      	cmp	r2, r3
 800033a:	bfcc      	ite	gt
 800033c:	2301      	movgt	r3, #1
 800033e:	2300      	movle	r3, #0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000344:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00b      	beq.n	8000364 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000356:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	623b      	str	r3, [r7, #32]
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	dd0b      	ble.n	8000384 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	61fb      	str	r3, [r7, #28]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b29a      	uxth	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	b29b      	uxth	r3, r3
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b29b      	uxth	r3, r3
 8000390:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	bfb8      	it	lt
 800039c:	425b      	neglt	r3, r3
 800039e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80003a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003a4:	0fda      	lsrs	r2, r3, #31
 80003a6:	4413      	add	r3, r2
 80003a8:	105b      	asrs	r3, r3, #1
 80003aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	da02      	bge.n	80003ba <GFX_WriteLine+0xaa>
	        ystep = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80003b8:	e02e      	b.n	8000418 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80003ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003be:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80003c0:	e02a      	b.n	8000418 <GFX_WriteLine+0x108>
	        if (steep) {
 80003c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	b21b      	sxth	r3, r3
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	b211      	sxth	r1, r2
 80003d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f959 	bl	800068c <ILI9341_WritePixel>
 80003da:	e007      	b.n	80003ec <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	b211      	sxth	r1, r2
 80003e4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f950 	bl	800068c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80003ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003ee:	8abb      	ldrh	r3, [r7, #20]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80003f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	da09      	bge.n	8000412 <GFX_WriteLine+0x102>
	            y_start += ystep;
 80003fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	4413      	add	r3, r2
 8000406:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000408:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800040a:	8afb      	ldrh	r3, [r7, #22]
 800040c:	4413      	add	r3, r2
 800040e:	b29b      	uxth	r3, r3
 8000410:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	ddd0      	ble.n	80003c2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3730      	adds	r7, #48	; 0x30
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af02      	add	r7, sp, #8
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	887b      	ldrh	r3, [r7, #2]
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	4613      	mov	r3, r2
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	68b9      	ldr	r1, [r7, #8]
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f7ff ff60 	bl	8000310 <GFX_WriteLine>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	4611      	mov	r1, r2
 8000464:	461a      	mov	r2, r3
 8000466:	460b      	mov	r3, r1
 8000468:	80fb      	strh	r3, [r7, #6]
 800046a:	4613      	mov	r3, r2
 800046c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e008      	b.n	8000486 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000474:	88ba      	ldrh	r2, [r7, #4]
 8000476:	8c3b      	ldrh	r3, [r7, #32]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ffd5 	bl	800042a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	3301      	adds	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	88fa      	ldrh	r2, [r7, #6]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	4413      	add	r3, r2
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	429a      	cmp	r2, r3
 8000490:	dbf0      	blt.n	8000474 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <ILI9341_Delay>:
#include "ILI9341.h"

spi_handle_t *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { md_systick_delay(ms); }
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f002 f9df 	bl	8002868 <md_systick_delay>
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]

  md_spi_tx_polling(Tft_hspi, Data, Lenght, 1000);
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <ILI9341_SendTFT+0x28>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	f002 f872 	bl	80025b6 <md_spi_tx_polling>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000098 	.word	0x20000098

080004e0 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <ILI9341_SendCommand+0x28>)
 80004f0:	f001 fbdc 	bl	8001cac <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	2101      	movs	r1, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffdb 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010c00 	.word	0x40010c00

0800050c <ILI9341_SendData16>:

// Send 16 bit data
static void ILI9341_SendData16(uint16_t Data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 8000516:	2201      	movs	r2, #1
 8000518:	2101      	movs	r1, #1
 800051a:	480a      	ldr	r0, [pc, #40]	; (8000544 <ILI9341_SendData16+0x38>)
 800051c:	f001 fbc6 	bl	8001cac <md_gpio_write_pin>

  // Send 2 8 bits, first MSB (ILI9341 datasheet)
  uint8_t tmp[2];
  tmp[0] = (Data >> 8);
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	733b      	strb	r3, [r7, #12]
  tmp[1] = Data & 0xFF;
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	737b      	strb	r3, [r7, #13]

  // SEND COMMAND
  ILI9341_SendTFT(tmp, 2);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2102      	movs	r1, #2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffbc 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40010c00 	.word	0x40010c00

08000548 <ILI9341_SendCommandAndData>:

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <ILI9341_SendCommandAndData+0x44>)
 800055e:	f001 fba5 	bl	8001cac <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffa4 	bl	80004b4 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 800056c:	2201      	movs	r2, #1
 800056e:	2101      	movs	r1, #1
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <ILI9341_SendCommandAndData+0x44>)
 8000572:	f001 fb9b 	bl	8001cac <md_gpio_write_pin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	6838      	ldr	r0, [r7, #0]
 800057e:	f7ff ff99 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010c00 	.word	0x40010c00

08000590 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d820      	bhi.n	80005e2 <ILI9341_SetRotation+0x52>
    return;

  switch (Rotation)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d816      	bhi.n	80005d4 <ILI9341_SetRotation+0x44>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <ILI9341_SetRotation+0x1c>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005bd 	.word	0x080005bd
 80005b0:	080005c3 	.word	0x080005c3
 80005b4:	080005c9 	.word	0x080005c9
 80005b8:	080005cf 	.word	0x080005cf
    {
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 80005bc:	2348      	movs	r3, #72	; 0x48
 80005be:	71fb      	strb	r3, [r7, #7]
      break;
 80005c0:	e008      	b.n	80005d4 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 80005c2:	2328      	movs	r3, #40	; 0x28
 80005c4:	71fb      	strb	r3, [r7, #7]
      break;
 80005c6:	e005      	b.n	80005d4 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 80005c8:	2388      	movs	r3, #136	; 0x88
 80005ca:	71fb      	strb	r3, [r7, #7]
      break;
 80005cc:	e002      	b.n	80005d4 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80005ce:	23e8      	movs	r3, #232	; 0xe8
 80005d0:	71fb      	strb	r3, [r7, #7]
      break;
 80005d2:	bf00      	nop
    }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	2036      	movs	r0, #54	; 0x36
 80005dc:	f7ff ffb4 	bl	8000548 <ILI9341_SendCommandAndData>
 80005e0:	e000      	b.n	80005e4 <ILI9341_SetRotation+0x54>
    return;
 80005e2:	bf00      	nop
}
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop

080005ec <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4604      	mov	r4, r0
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4623      	mov	r3, r4
 80005fc:	80fb      	strh	r3, [r7, #6]
 80005fe:	4603      	mov	r3, r0
 8000600:	80bb      	strh	r3, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	807b      	strh	r3, [r7, #2]
 8000606:	4613      	mov	r3, r2
 8000608:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	3b01      	subs	r3, #1
 8000614:	81fb      	strh	r3, [r7, #14]
 8000616:	88ba      	ldrh	r2, [r7, #4]
 8000618:	883b      	ldrh	r3, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	3b01      	subs	r3, #1
 8000620:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	b29b      	uxth	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2204      	movs	r2, #4
 8000648:	4619      	mov	r1, r3
 800064a:	202a      	movs	r0, #42	; 0x2a
 800064c:	f7ff ff7c 	bl	8000548 <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 8000650:	88bb      	ldrh	r3, [r7, #4]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	b29b      	uxth	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 8000660:	89bb      	ldrh	r3, [r7, #12]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	b29b      	uxth	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 800066a:	89bb      	ldrh	r3, [r7, #12]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2204      	movs	r2, #4
 8000676:	4619      	mov	r1, r3
 8000678:	202b      	movs	r0, #43	; 0x2b
 800067a:	f7ff ff65 	bl	8000548 <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR); // Write to RAM
 800067e:	202c      	movs	r0, #44	; 0x2c
 8000680:	f7ff ff2e 	bl	80004e0 <ILI9341_SendCommand>
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}

0800068c <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
 8000696:	460b      	mov	r3, r1
 8000698:	80bb      	strh	r3, [r7, #4]
 800069a:	4613      	mov	r3, r2
 800069c:	807b      	strh	r3, [r7, #2]

  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 800069e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db21      	blt.n	80006ea <ILI9341_WritePixel+0x5e>
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ae:	da1c      	bge.n	80006ea <ILI9341_WritePixel+0x5e>
 80006b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db18      	blt.n	80006ea <ILI9341_WritePixel+0x5e>
 80006b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006bc:	2bef      	cmp	r3, #239	; 0xef
 80006be:	dc14      	bgt.n	80006ea <ILI9341_WritePixel+0x5e>
    {
      //	put data into buffer
      DataToTransfer[0] = (color >> 8);
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	733b      	strb	r3, [r7, #12]
      DataToTransfer[1] = color & 0xFF;
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	737b      	strb	r3, [r7, #13]

      // Set window range the single pixel in tft
      // x,y positions 1,1 ranges
      ILI9341_SetAddrWindow(x, y, 1, 1);
 80006d0:	88f8      	ldrh	r0, [r7, #6]
 80006d2:	88b9      	ldrh	r1, [r7, #4]
 80006d4:	2301      	movs	r3, #1
 80006d6:	2201      	movs	r2, #1
 80006d8:	f7ff ff88 	bl	80005ec <ILI9341_SetAddrWindow>

      // send command that we are writing to RAM, and also color data
      ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2202      	movs	r2, #2
 80006e2:	4619      	mov	r1, r3
 80006e4:	202c      	movs	r0, #44	; 0x2c
 80006e6:	f7ff ff2f 	bl	8000548 <ILI9341_SendCommandAndData>
      // Send 16 bit color to that range
    }
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <ILI9341_ClearArea>:
}

// Clear whole dipslay with a color
void ILI9341_ClearArea(uint16_t color, uint16_t start_x, uint16_t start_y,
                       uint16_t width, uint16_t height)
{
 80006f2:	b590      	push	{r4, r7, lr}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4604      	mov	r4, r0
 80006fa:	4608      	mov	r0, r1
 80006fc:	4611      	mov	r1, r2
 80006fe:	461a      	mov	r2, r3
 8000700:	4623      	mov	r3, r4
 8000702:	80fb      	strh	r3, [r7, #6]
 8000704:	4603      	mov	r3, r0
 8000706:	80bb      	strh	r3, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
 800070c:	4613      	mov	r3, r2
 800070e:	803b      	strh	r3, [r7, #0]
  uint32_t Lenght = width * height;
 8000710:	883b      	ldrh	r3, [r7, #0]
 8000712:	8c3a      	ldrh	r2, [r7, #32]
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	60bb      	str	r3, [r7, #8]

  // set window for whole screen
  ILI9341_SetAddrWindow(start_x, start_y, width, height);
 800071a:	8c3b      	ldrh	r3, [r7, #32]
 800071c:	883a      	ldrh	r2, [r7, #0]
 800071e:	8879      	ldrh	r1, [r7, #2]
 8000720:	88b8      	ldrh	r0, [r7, #4]
 8000722:	f7ff ff63 	bl	80005ec <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000726:	202c      	movs	r0, #44	; 0x2c
 8000728:	f7ff feda 	bl	80004e0 <ILI9341_SendCommand>

  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e006      	b.n	8000740 <ILI9341_ClearArea+0x4e>
    {
      ILI9341_SendData16(color);
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fee9 	bl	800050c <ILI9341_SendData16>
  for (uint32_t i = 0; i < Lenght; i++)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3f4      	bcc.n	8000732 <ILI9341_ClearArea+0x40>
    }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}

08000752 <ILI9341_ClearDisplay>:

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 800075c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000760:	60bb      	str	r3, [r7, #8]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000762:	23f0      	movs	r3, #240	; 0xf0
 8000764:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ff3e 	bl	80005ec <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000770:	202c      	movs	r0, #44	; 0x2c
 8000772:	f7ff feb5 	bl	80004e0 <ILI9341_SendCommand>

  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e006      	b.n	800078a <ILI9341_ClearDisplay+0x38>
    {
      ILI9341_SendData16(color);
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fec4 	bl	800050c <ILI9341_SendData16>
  for (uint32_t i = 0; i < Lenght; i++)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3f4      	bcc.n	800077c <ILI9341_ClearDisplay+0x2a>
    }

}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <ILI9341_Init>:
    0x80, // Display on
    0x00  // End of list
};

void ILI9341_Init(spi_handle_t *hspi)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  // assign correct spi
  Tft_hspi = hspi;
 80007a4:	4a22      	ldr	r2, [pc, #136]	; (8000830 <ILI9341_Init+0x94>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <ILI9341_Init+0x98>)
 80007ac:	60fb      	str	r3, [r7, #12]
  ILI9341_CS_HIGH;
 80007ae:	2201      	movs	r2, #1
 80007b0:	210b      	movs	r1, #11
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <ILI9341_Init+0x9c>)
 80007b4:	f001 fa7a 	bl	8001cac <md_gpio_write_pin>

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 80007b8:	2200      	movs	r2, #0
 80007ba:	210a      	movs	r1, #10
 80007bc:	481e      	ldr	r0, [pc, #120]	; (8000838 <ILI9341_Init+0x9c>)
 80007be:	f001 fa75 	bl	8001cac <md_gpio_write_pin>
  ILI9341_Delay(10);
 80007c2:	200a      	movs	r0, #10
 80007c4:	f7ff fe6a 	bl	800049c <ILI9341_Delay>
  ILI9341_RST_HIGH;
 80007c8:	2201      	movs	r2, #1
 80007ca:	210a      	movs	r1, #10
 80007cc:	481a      	ldr	r0, [pc, #104]	; (8000838 <ILI9341_Init+0x9c>)
 80007ce:	f001 fa6d 	bl	8001cac <md_gpio_write_pin>
  ILI9341_Delay(10);
 80007d2:	200a      	movs	r0, #10
 80007d4:	f7ff fe62 	bl	800049c <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0)
 80007d8:	e01a      	b.n	8000810 <ILI9341_Init+0x74>
    {
      // assign value form address to x (second value that is number of data to
      // be send)
      x = *(addr++);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	60fa      	str	r2, [r7, #12]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	72bb      	strb	r3, [r7, #10]

      // mask this value to maximum of 127
      // 0x7F	0111 1111
      // so if we send 0x80 as second argument then we just send command ->
      // without data
      numArgs = x & 0x7F;
 80007e4:	7abb      	ldrb	r3, [r7, #10]
 80007e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007ea:	727b      	strb	r3, [r7, #9]

      // send command then array of data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 80007ec:	7a7b      	ldrb	r3, [r7, #9]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	7afb      	ldrb	r3, [r7, #11]
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fea7 	bl	8000548 <ILI9341_SendCommandAndData>

      // move adress to next command
      addr += numArgs;
 80007fa:	7a7b      	ldrb	r3, [r7, #9]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]

      // if only command is sent then make a delay
      if (x & 0x80)
 8000802:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da02      	bge.n	8000810 <ILI9341_Init+0x74>
        {
          ILI9341_Delay(150);
 800080a:	2096      	movs	r0, #150	; 0x96
 800080c:	f7ff fe46 	bl	800049c <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60fa      	str	r2, [r7, #12]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	72fb      	strb	r3, [r7, #11]
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1dc      	bne.n	80007da <ILI9341_Init+0x3e>
        }
    }

  ILI9341_SetRotation(ILI9341_ROTATION);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff feb5 	bl	8000590 <ILI9341_SetRotation>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000098 	.word	0x20000098
 8000834:	080033b4 	.word	0x080033b4
 8000838:	40010c00 	.word	0x40010c00

0800083c <example_can_recieve_data>:
        }
    }
}

void example_can_recieve_data(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	; 0x58
 8000840:	af02      	add	r7, sp, #8
  // configure systick
  md_systick_configure_ms();
 8000842:	f001 fff1 	bl	8002828 <md_systick_configure_ms>
  // configure rcc to get 32 Mhz on APB1 (CAN bus)
  example_rcc_configure_pll_32Mhz();
 8000846:	f000 f971 	bl	8000b2c <example_rcc_configure_pll_32Mhz>

  // configure gpio button input
  md_gpio_configure_exti(GPIOB, GPIO_PIN_11, GPIO_INPUT_FLOATING,
 800084a:	2328      	movs	r3, #40	; 0x28
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	2201      	movs	r2, #1
 8000852:	210b      	movs	r1, #11
 8000854:	488e      	ldr	r0, [pc, #568]	; (8000a90 <example_can_recieve_data+0x254>)
 8000856:	f001 f947 	bl	8001ae8 <md_gpio_configure_exti>
                         GPIO_EXTI_FALLING, 40);

  // configure gpio led output
  md_gpio_configure_output(GPIOC, GPIO_PIN_13, GPIO_SPEED_10MHZ,
 800085a:	2300      	movs	r3, #0
 800085c:	2201      	movs	r2, #1
 800085e:	210d      	movs	r1, #13
 8000860:	488c      	ldr	r0, [pc, #560]	; (8000a94 <example_can_recieve_data+0x258>)
 8000862:	f001 f873 	bl	800194c <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // init low level - handler/clock/gpio
  md_can_init(&hcan1);
 8000866:	488c      	ldr	r0, [pc, #560]	; (8000a98 <example_can_recieve_data+0x25c>)
 8000868:	f000 fa12 	bl	8000c90 <md_can_init>

  // can time quanta configuartion
  can_quanta_init_t time_quanta;
  time_quanta.prescaler = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  time_quanta.quanta_ts1 = CAN_TIME_QUANTA13;
 8000872:	230c      	movs	r3, #12
 8000874:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  time_quanta.quanta_ts2 = CAN_TIME_QUANTA2;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  time_quanta.quanta_sjw = CAN_TIME_QUANTA1;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

  // can basic configuration
  can_basic_init_t basic_init;
  basic_init.auto_bus_off = false;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  basic_init.debug_freeze = false;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  basic_init.time_triggered_comm = false;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  basic_init.auto_wake_up = true;
 8000896:	2301      	movs	r3, #1
 8000898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  basic_init.auto_retransmit = false;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  basic_init.rx_fifo_lock = false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  basic_init.tx_fifo_prio = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  // can configure filter
  can_filter_t can_filter;
  can_filter.assign_to_fifo1 = false;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  can_filter.filter_id0 = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  can_filter.filter_mask_or_id1 = 0xFFFF;
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008bc:	63bb      	str	r3, [r7, #56]	; 0x38
  can_filter.filter_number = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  can_filter.list_mode = false;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  can_filter.scale_32bit = false;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  // enter init mode
  md_can_change_op_mode(&hcan1, CAN_OPMODE_INIT, 1000);
 80008d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d4:	2100      	movs	r1, #0
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <example_can_recieve_data+0x25c>)
 80008d8:	f000 f9ea 	bl	8000cb0 <md_can_change_op_mode>
  md_can_init_basic(&hcan1, basic_init);
 80008dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008e4:	486c      	ldr	r0, [pc, #432]	; (8000a98 <example_can_recieve_data+0x25c>)
 80008e6:	f000 fa82 	bl	8000dee <md_can_init_basic>
  md_can_init_time_quanta(&hcan1, time_quanta);
 80008ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008f2:	4869      	ldr	r0, [pc, #420]	; (8000a98 <example_can_recieve_data+0x25c>)
 80008f4:	f000 fa04 	bl	8000d00 <md_can_init_time_quanta>
  md_can_init_filter(&hcan1, can_filter);
 80008f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008fe:	4866      	ldr	r0, [pc, #408]	; (8000a98 <example_can_recieve_data+0x25c>)
 8000900:	f000 fc3c 	bl	800117c <md_can_init_filter>
  //   exit init mode
  md_can_change_op_mode(&hcan1, CAN_OPMODE_NORMAL, 1000);
 8000904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000908:	2101      	movs	r1, #1
 800090a:	4863      	ldr	r0, [pc, #396]	; (8000a98 <example_can_recieve_data+0x25c>)
 800090c:	f000 f9d0 	bl	8000cb0 <md_can_change_op_mode>

  // init frame
  can_frame_t frame;

  // INIT SPI AND TFT
  md_spi_init(&hspi1);
 8000910:	4862      	ldr	r0, [pc, #392]	; (8000a9c <example_can_recieve_data+0x260>)
 8000912:	f001 fd85 	bl	8002420 <md_spi_init>

  spi_config_t spi_config;
  spi_config.clock_1_when_idle = false;
 8000916:	2300      	movs	r3, #0
 8000918:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  spi_config.clock_second_edge_capture = false;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  spi_config.data_format_16bit = false;
 8000922:	2300      	movs	r3, #0
 8000924:	77fb      	strb	r3, [r7, #31]
  spi_config.full_duplex = true;
 8000926:	2301      	movs	r3, #1
 8000928:	777b      	strb	r3, [r7, #29]
  spi_config.lsb_first = false;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 3020 	strb.w	r3, [r7, #32]
  spi_config.master_mode = true;
 8000930:	2301      	movs	r3, #1
 8000932:	773b      	strb	r3, [r7, #28]
  spi_config.prescaler = SPI_PRESCALER_2; // 100kHz
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  spi_config.software_nss_management = true;
 800093a:	2301      	movs	r3, #1
 800093c:	77bb      	strb	r3, [r7, #30]

  md_spi_init_basic(&hspi1, spi_config);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000946:	4855      	ldr	r0, [pc, #340]	; (8000a9c <example_can_recieve_data+0x260>)
 8000948:	f001 fd77 	bl	800243a <md_spi_init_basic>

  // init gpio for tft
  //  DC
  md_gpio_configure_output(GPIOB, GPIO_PIN_1, GPIO_SPEED_10MHZ, GPIO_OUTPUT_PP);
 800094c:	2300      	movs	r3, #0
 800094e:	2201      	movs	r2, #1
 8000950:	2101      	movs	r1, #1
 8000952:	484f      	ldr	r0, [pc, #316]	; (8000a90 <example_can_recieve_data+0x254>)
 8000954:	f000 fffa 	bl	800194c <md_gpio_configure_output>
  // RESET
  md_gpio_configure_output(GPIOB, GPIO_PIN_10, GPIO_SPEED_10MHZ,
 8000958:	2300      	movs	r3, #0
 800095a:	2201      	movs	r2, #1
 800095c:	210a      	movs	r1, #10
 800095e:	484c      	ldr	r0, [pc, #304]	; (8000a90 <example_can_recieve_data+0x254>)
 8000960:	f000 fff4 	bl	800194c <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  ILI9341_Init(&hspi1);
 8000964:	484d      	ldr	r0, [pc, #308]	; (8000a9c <example_can_recieve_data+0x260>)
 8000966:	f7ff ff19 	bl	800079c <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_BLACK);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fef1 	bl	8000752 <ILI9341_ClearDisplay>

  GFX_SetFont(font_8x5);
 8000970:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <example_can_recieve_data+0x264>)
 8000972:	f7ff fbfd 	bl	8000170 <GFX_SetFont>
  GFX_SetFontSize(2);
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fc08 	bl	800018c <GFX_SetFontSize>
  GFX_DrawString(10, 10, "Can message recieved", ILI9341_YELLOW);
 800097c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000980:	4a48      	ldr	r2, [pc, #288]	; (8000aa4 <example_can_recieve_data+0x268>)
 8000982:	210a      	movs	r1, #10
 8000984:	200a      	movs	r0, #10
 8000986:	f7ff fc91 	bl	80002ac <GFX_DrawString>

  md_can_activate_irq(&hcan1, CAN_IRQ_GROUP_RX0, CAN_IER_FMPIE0, 20);
 800098a:	2314      	movs	r3, #20
 800098c:	2202      	movs	r2, #2
 800098e:	2101      	movs	r1, #1
 8000990:	4841      	ldr	r0, [pc, #260]	; (8000a98 <example_can_recieve_data+0x25c>)
 8000992:	f000 fcab 	bl	80012ec <md_can_activate_irq>
  md_can_activate_irq(&hcan1, CAN_IRQ_GROUP_RX1, CAN_IER_FMPIE1, 20);
 8000996:	2314      	movs	r3, #20
 8000998:	2210      	movs	r2, #16
 800099a:	2102      	movs	r1, #2
 800099c:	483e      	ldr	r0, [pc, #248]	; (8000a98 <example_can_recieve_data+0x25c>)
 800099e:	f000 fca5 	bl	80012ec <md_can_activate_irq>


  uint32_t time_tick_led = md_systick_get_tick();
 80009a2:	f001 ff57 	bl	8002854 <md_systick_get_tick>
 80009a6:	4603      	mov	r3, r0
 80009a8:	61bb      	str	r3, [r7, #24]
  uint8_t message[16];
  uint16_t milivolts, microamps, lux;

  while (1)
    {
      example_heart_beat_no_delay(&time_tick_led, 500);
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f896 	bl	8000ae4 <example_heart_beat_no_delay>



          md_can_read_fifo(&hcan1, &frame, data_buffer, 0);
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009c0:	2300      	movs	r3, #0
 80009c2:	4835      	ldr	r0, [pc, #212]	; (8000a98 <example_can_recieve_data+0x25c>)
 80009c4:	f000 fab2 	bl	8000f2c <md_can_read_fifo>
            lux = (data_buffer[0] | (data_buffer[1] << 8));
 80009c8:	7c3b      	ldrb	r3, [r7, #16]
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	7c7b      	ldrb	r3, [r7, #17]
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            microamps = (data_buffer[2] | (data_buffer[3] << 8));
 80009da:	7cbb      	ldrb	r3, [r7, #18]
 80009dc:	b21a      	sxth	r2, r3
 80009de:	7cfb      	ldrb	r3, [r7, #19]
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            milivolts = (data_buffer[4] | (data_buffer[5] << 8));
 80009ec:	7d3b      	ldrb	r3, [r7, #20]
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	7d7b      	ldrb	r3, [r7, #21]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
            sprintf((char *)message, "Lux : %d", lux);
 80009fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000a02:	463b      	mov	r3, r7
 8000a04:	4928      	ldr	r1, [pc, #160]	; (8000aa8 <example_can_recieve_data+0x26c>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 f868 	bl	8002adc <siprintf>
            ILI9341_ClearArea(ILI9341_BLACK, 10, 10, 220, 20);
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	23dc      	movs	r3, #220	; 0xdc
 8000a12:	220a      	movs	r2, #10
 8000a14:	210a      	movs	r1, #10
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fe6b 	bl	80006f2 <ILI9341_ClearArea>
            GFX_DrawString(10, 10, (char*)message, ILI9341_YELLOW);
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a22:	210a      	movs	r1, #10
 8000a24:	200a      	movs	r0, #10
 8000a26:	f7ff fc41 	bl	80002ac <GFX_DrawString>
            sprintf((char *)message, "Microamps : %d", microamps);
 8000a2a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8000a2e:	463b      	mov	r3, r7
 8000a30:	491e      	ldr	r1, [pc, #120]	; (8000aac <example_can_recieve_data+0x270>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 f852 	bl	8002adc <siprintf>
            ILI9341_ClearArea(ILI9341_BLACK, 10, 50, 220, 20);
 8000a38:	2314      	movs	r3, #20
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	23dc      	movs	r3, #220	; 0xdc
 8000a3e:	2232      	movs	r2, #50	; 0x32
 8000a40:	210a      	movs	r1, #10
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fe55 	bl	80006f2 <ILI9341_ClearArea>
            GFX_DrawString(10, 50, (char*)message, ILI9341_YELLOW);
 8000a48:	463a      	mov	r2, r7
 8000a4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a4e:	2132      	movs	r1, #50	; 0x32
 8000a50:	200a      	movs	r0, #10
 8000a52:	f7ff fc2b 	bl	80002ac <GFX_DrawString>
            sprintf((char *)message, "Milivolts : %d", milivolts);
 8000a56:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4914      	ldr	r1, [pc, #80]	; (8000ab0 <example_can_recieve_data+0x274>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 f83c 	bl	8002adc <siprintf>
            ILI9341_ClearArea(ILI9341_BLACK, 10, 90, 220, 20);
 8000a64:	2314      	movs	r3, #20
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	23dc      	movs	r3, #220	; 0xdc
 8000a6a:	225a      	movs	r2, #90	; 0x5a
 8000a6c:	210a      	movs	r1, #10
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fe3f 	bl	80006f2 <ILI9341_ClearArea>
            GFX_DrawString(10, 90, (char*)message, ILI9341_YELLOW);
 8000a74:	463a      	mov	r2, r7
 8000a76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a7a:	215a      	movs	r1, #90	; 0x5a
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f7ff fc15 	bl	80002ac <GFX_DrawString>
            SET_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <example_can_recieve_data+0x278>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <example_can_recieve_data+0x278>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6153      	str	r3, [r2, #20]
    {
 8000a8e:	e78c      	b.n	80009aa <example_can_recieve_data+0x16e>
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000
 8000a98:	200000ac 	.word	0x200000ac
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	08003424 	.word	0x08003424
 8000aa4:	08003370 	.word	0x08003370
 8000aa8:	08003388 	.word	0x08003388
 8000aac:	08003394 	.word	0x08003394
 8000ab0:	080033a4 	.word	0x080033a4
 8000ab4:	40006400 	.word	0x40006400

08000ab8 <md_gpio_exti15_10_callback>:

    }
}

void md_gpio_exti15_10_callback(gpio_pin_number_t pin_number)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  send_can_msg = 1;
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <md_gpio_exti15_10_callback+0x1c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <md_can_mailbox_empty_callback>:

void md_can_mailbox_empty_callback(void) {}
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <example_heart_beat_no_delay>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat_no_delay(uint32_t *tick_buffer, uint32_t freq)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  // init LED
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 8000aee:	2300      	movs	r3, #0
 8000af0:	2201      	movs	r2, #1
 8000af2:	210d      	movs	r1, #13
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <example_heart_beat_no_delay+0x44>)
 8000af6:	f000 ff29 	bl	800194c <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  if (md_systick_get_tick() - (*tick_buffer) > 500)
 8000afa:	f001 feab 	bl	8002854 <md_systick_get_tick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b0a:	d909      	bls.n	8000b20 <example_heart_beat_no_delay+0x3c>
    {
      md_gpio_toggle_pin(LED1_GPIO_PORT, LED1_GPIO_PIN);
 8000b0c:	210d      	movs	r1, #13
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <example_heart_beat_no_delay+0x44>)
 8000b10:	f001 f8ef 	bl	8001cf2 <md_gpio_toggle_pin>
      *tick_buffer = md_systick_get_tick();
 8000b14:	f001 fe9e 	bl	8002854 <md_systick_get_tick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
    }

  return;
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
}
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40011000 	.word	0x40011000

08000b2c <example_rcc_configure_pll_32Mhz>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_rcc_configure_pll_32Mhz(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0

  rcc_clock_freqs_t frequencies = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  // configure frequencies - no prescaler on buses + pll on mul 4x
  md_rcc_configure_prescalers(RCC_AHB_PRESCALER_NODIV, RCC_APB_PRESCALER_NODIV,
 8000b40:	2302      	movs	r3, #2
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2000      	movs	r0, #0
 8000b48:	f001 fa72 	bl	8002030 <md_rcc_configure_prescalers>
                              RCC_APB_PRESCALER_NODIV, RCC_ADC_PRESCALER_DIV6);
  md_rcc_configure_sysclk(RCC_SYSCLK_SOURCE_PLL, RCC_PLL_SOURCE_HSE,
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2202      	movs	r2, #2
 8000b50:	2101      	movs	r1, #1
 8000b52:	2002      	movs	r0, #2
 8000b54:	f001 f9e4 	bl	8001f20 <md_rcc_configure_sysclk>
                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);
  md_rcc_get_frequencies(&frequencies);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 faf7 	bl	800214e <md_rcc_get_frequencies>
}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <md_usart_tc_callback+0x48>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d107      	bne.n	8000b8a <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <md_usart_tc_callback+0x4c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <md_usart_tc_callback+0x4c>)
 8000b82:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <md_usart_tc_callback+0x50>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <md_usart_tc_callback+0x54>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d107      	bne.n	8000ba4 <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <md_usart_tc_callback+0x58>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <md_usart_tc_callback+0x58>)
 8000b9c:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <md_usart_tc_callback+0x5c>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
    }
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	200000a5 	.word	0x200000a5
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	200000a0 	.word	0x200000a0
 8000bc4:	200000a4 	.word	0x200000a4

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <__NVIC_EnableIRQ+0x34>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0c      	blt.n	8000c2c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <__NVIC_ClearPendingIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	3360      	adds	r3, #96	; 0x60
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <md_can_init>:
 * Init handlers gpio and clock
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
void md_can_init(can_handle_t *p_hCANx)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  can_init_handlers();
 8000c98:	f000 fc66 	bl	8001568 <can_init_handlers>
  can_init_clock(p_hCANx);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 fc77 	bl	8001590 <can_init_clock>
  can_init_gpio(p_hCANx);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fca0 	bl	80015e8 <can_init_gpio>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <md_can_change_op_mode>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - can_error_t - can error status
 */
can_error_t md_can_change_op_mode(can_handle_t *p_hCANx, can_op_mode_t op_mode,
                                  uint32_t timeout_ms)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	72fb      	strb	r3, [r7, #11]
  switch (op_mode)
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d012      	beq.n	8000cea <md_can_change_op_mode+0x3a>
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	dc16      	bgt.n	8000cf6 <md_can_change_op_mode+0x46>
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <md_can_change_op_mode+0x22>
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d006      	beq.n	8000cde <md_can_change_op_mode+0x2e>
 8000cd0:	e011      	b.n	8000cf6 <md_can_change_op_mode+0x46>
    {
    case (CAN_OPMODE_INIT):
      {
        return can_enter_init_mode(p_hCANx, timeout_ms);
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 fb63 	bl	80013a0 <can_enter_init_mode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	e00c      	b.n	8000cf8 <md_can_change_op_mode+0x48>
      }
    case (CAN_OPMODE_NORMAL):
      {
        return can_enter_normal_mode(p_hCANx, timeout_ms);
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 fba9 	bl	8001438 <can_enter_normal_mode>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e006      	b.n	8000cf8 <md_can_change_op_mode+0x48>
      }
    case (CAN_OPMODE_SLEEP):
      {
        return can_enter_sleep_mode(p_hCANx, timeout_ms);
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f000 fbef 	bl	80014d0 <can_enter_sleep_mode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e000      	b.n	8000cf8 <md_can_change_op_mode+0x48>
      }
    default:
      return CAN_ERR_SWITCH_MODE;
 8000cf6:	2303      	movs	r3, #3
    }
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <md_can_init_time_quanta>:
 * quanta quanta_sjw - number of quanta for synchronization MAX 4 quanta
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_time_quanta(can_handle_t *p_hCANx,
                                    can_quanta_init_t quanta_init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <md_can_init_time_quanta+0x1a>
    {
      return CAN_ERR_WRONG_MDOE;
 8000d16:	2304      	movs	r3, #4
 8000d18:	e064      	b.n	8000de4 <md_can_init_time_quanta+0xe4>
    }

  // check if values are not exceeded
  if (quanta_init.quanta_ts2 > CAN_TIME_QUANTA8 ||
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b07      	cmp	r3, #7
 8000d1e:	d802      	bhi.n	8000d26 <md_can_init_time_quanta+0x26>
      quanta_init.quanta_sjw > CAN_TIME_QUANTA4)
 8000d20:	7a3b      	ldrb	r3, [r7, #8]
  if (quanta_init.quanta_ts2 > CAN_TIME_QUANTA8 ||
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d904      	bls.n	8000d30 <md_can_init_time_quanta+0x30>
    {
      p_hCANx->can_error = CAN_ERR_INIT_QUANTA;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2205      	movs	r2, #5
 8000d2a:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_QUANTA;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	e059      	b.n	8000de4 <md_can_init_time_quanta+0xe4>
    }

  if (quanta_init.prescaler > 511 || quanta_init.prescaler < 1)
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d36:	d202      	bcs.n	8000d3e <md_can_init_time_quanta+0x3e>
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <md_can_init_time_quanta+0x48>
    {
      p_hCANx->can_error = CAN_ERR_INIT_BAUD;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2206      	movs	r2, #6
 8000d42:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_BAUD;
 8000d44:	2306      	movs	r3, #6
 8000d46:	e04d      	b.n	8000de4 <md_can_init_time_quanta+0xe4>
    }

  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_BRP_Msk);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	61d3      	str	r3, [r2, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_TS1_Msk);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000d6a:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_TS2_Msk);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d7a:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_SJW_Msk);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	69da      	ldr	r2, [r3, #28]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d8a:	61da      	str	r2, [r3, #28]

  // init prescaler and quantas
  p_hCANx->p_CANx->BTR |= ((quanta_init.prescaler - 1) << CAN_BTR_BRP_Pos);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	69da      	ldr	r2, [r3, #28]
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_init.quanta_ts1 << CAN_BTR_TS1_Pos);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_init.quanta_ts2 << CAN_BTR_TS2_Pos);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	051b      	lsls	r3, r3, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_init.quanta_sjw << CAN_BTR_SJW_Pos);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	69da      	ldr	r2, [r3, #28]
 8000dce:	7a3b      	ldrb	r3, [r7, #8]
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	61da      	str	r2, [r3, #28]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <md_can_init_basic>:
 * @param[basic_init] - @can_basic_init
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_basic(can_handle_t *p_hCANx,
                              can_basic_init_t basic_init)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	e883 0006 	stmia.w	r3, {r1, r2}
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	795b      	ldrb	r3, [r3, #5]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <md_can_init_basic+0x1a>
    {
      return CAN_ERR_WRONG_MDOE;
 8000e04:	2304      	movs	r3, #4
 8000e06:	e08c      	b.n	8000f22 <md_can_init_basic+0x134>
    }

  // set or reset all the configuration flags
  if (basic_init.debug_freeze == true)
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d008      	beq.n	8000e20 <md_can_init_basic+0x32>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_DBF);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e007      	b.n	8000e30 <md_can_init_basic+0x42>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_DBF);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e2e:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.time_triggered_comm == true)
 8000e30:	797b      	ldrb	r3, [r7, #5]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d008      	beq.n	8000e48 <md_can_init_basic+0x5a>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TTCM);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e007      	b.n	8000e58 <md_can_init_basic+0x6a>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TTCM);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e56:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.auto_bus_off == true)
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d008      	beq.n	8000e70 <md_can_init_basic+0x82>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_ABOM);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e007      	b.n	8000e80 <md_can_init_basic+0x92>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_ABOM);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e7e:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.auto_wake_up == true)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d008      	beq.n	8000e98 <md_can_init_basic+0xaa>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_AWUM);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0220 	orr.w	r2, r2, #32
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e007      	b.n	8000ea8 <md_can_init_basic+0xba>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_AWUM);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0220 	bic.w	r2, r2, #32
 8000ea6:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.auto_retransmit == true)
 8000ea8:	7a3b      	ldrb	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <md_can_init_basic+0xd2>
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_NART);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0210 	bic.w	r2, r2, #16
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e007      	b.n	8000ed0 <md_can_init_basic+0xe2>
    }
  else
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_NART);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0210 	orr.w	r2, r2, #16
 8000ece:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.rx_fifo_lock == true)
 8000ed0:	7a7b      	ldrb	r3, [r7, #9]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <md_can_init_basic+0xfa>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_RFLM);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0208 	orr.w	r2, r2, #8
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <md_can_init_basic+0x10a>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_RFLM);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0208 	bic.w	r2, r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.tx_fifo_prio == true)
 8000ef8:	7abb      	ldrb	r3, [r7, #10]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d008      	beq.n	8000f10 <md_can_init_basic+0x122>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TXFP);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0204 	orr.w	r2, r2, #4
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e007      	b.n	8000f20 <md_can_init_basic+0x132>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TXFP);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0204 	bic.w	r2, r2, #4
 8000f1e:	601a      	str	r2, [r3, #0]
    }

  return CAN_ERR_NOERR;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <md_can_read_fifo>:
 * @param[fifo_number] - 0 or 1
 * @return - can_error_t - can error status
 */
can_error_t md_can_read_fifo(can_handle_t *p_hCANx, can_frame_t *p_frame_buffer,
                             uint8_t *p_data_buffer, uint8_t fifo_number)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	70fb      	strb	r3, [r7, #3]
  // assign pointer to frame struct
  p_frame_buffer->p_data_buffer = p_data_buffer;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

  if (fifo_number == 0)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f040 8082 	bne.w	800104c <md_can_read_fifo+0x120>
    {
      // check if fifo is not empty
      if (!(p_hCANx->p_CANx->RF0R & CAN_RF0R_FMP0))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <md_can_read_fifo+0x34>
        {
          p_hCANx->can_error = CAN_ERR_FIFO_EMPTY;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	220a      	movs	r2, #10
 8000f5a:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_FIFO_EMPTY;
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	e105      	b.n	800116c <md_can_read_fifo+0x240>
        }

      // read from fifo - frame info
      SET_BIT(p_hCANx->p_CANx->RF0R, CAN_RF0R_RFOM0);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	60da      	str	r2, [r3, #12]
      p_frame_buffer->remote =
          (p_hCANx->p_CANx->sFIFOMailBox[0].RIR & CAN_RI0R_RTR);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
      p_frame_buffer->remote =
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	719a      	strb	r2, [r3, #6]
      p_frame_buffer->data_lenght =
          (p_hCANx->p_CANx->sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	b2da      	uxtb	r2, r3
      p_frame_buffer->data_lenght =
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	711a      	strb	r2, [r3, #4]

      if (p_hCANx->p_CANx->sFIFOMailBox[0].RIR & CAN_RI0R_IDE)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00a      	beq.n	8000fc4 <md_can_read_fifo+0x98>
        {
          p_frame_buffer->id_extended = 1;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	715a      	strb	r2, [r3, #5]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[0].RIR >> CAN_RI0R_EXID_Pos);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fbc:	08da      	lsrs	r2, r3, #3
          p_frame_buffer->id =
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e009      	b.n	8000fd8 <md_can_read_fifo+0xac>
        }
      else
        {
          p_frame_buffer->id_extended = 0;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	715a      	strb	r2, [r3, #5]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[0].RIR >> CAN_RI0R_STID_Pos);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fd2:	0d5a      	lsrs	r2, r3, #21
          p_frame_buffer->id =
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	601a      	str	r2, [r3, #0]
        }

      // read form fifo - data info
      for (uint8_t i = 0; i < 8; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	75fb      	strb	r3, [r7, #23]
 8000fdc:	e024      	b.n	8001028 <md_can_read_fifo+0xfc>
        {
          if (i < 4)
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d80e      	bhi.n	8001002 <md_can_read_fifo+0xd6>
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[0].RDLR >> (i * 8));
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2ca      	uxtb	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e00f      	b.n	8001022 <md_can_read_fifo+0xf6>
            }
          else
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[0].RDHR >> ((i % 4) * 8));
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4413      	add	r3, r2
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = 0; i < 8; i++)
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	3301      	adds	r3, #1
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9d7      	bls.n	8000fde <md_can_read_fifo+0xb2>
            }
        }

      // if using irq mode , activate irq for next message
      if (p_hCANx->msg_pending_fifo0 == 1)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	799b      	ldrb	r3, [r3, #6]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8096 	beq.w	8001164 <md_can_read_fifo+0x238>
        {
          SET_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8001038:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <md_can_read_fifo+0x24c>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <md_can_read_fifo+0x24c>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6153      	str	r3, [r2, #20]
          p_hCANx->msg_pending_fifo0 = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	719a      	strb	r2, [r3, #6]
 800104a:	e08b      	b.n	8001164 <md_can_read_fifo+0x238>
        }
    }
  else if (fifo_number == 1)
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	2b01      	cmp	r3, #1
 8001050:	f040 8088 	bne.w	8001164 <md_can_read_fifo+0x238>
    {
      // check if fifo is not empty
      if (!(p_hCANx->p_CANx->RF1R & CAN_RF1R_FMP1))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d104      	bne.n	800106c <md_can_read_fifo+0x140>
        {
          p_hCANx->can_error = CAN_ERR_FIFO_EMPTY;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	220a      	movs	r2, #10
 8001066:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_FIFO_EMPTY;
 8001068:	230a      	movs	r3, #10
 800106a:	e07f      	b.n	800116c <md_can_read_fifo+0x240>
        }

      // read from fifo
      SET_BIT(p_hCANx->p_CANx->RF1R, CAN_RF1R_RFOM1);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	611a      	str	r2, [r3, #16]

      // read from fifo - frame info
      SET_BIT(p_hCANx->p_CANx->RF1R, CAN_RF1R_RFOM1);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0220 	orr.w	r2, r2, #32
 800108a:	611a      	str	r2, [r3, #16]
      p_frame_buffer->remote =
          (p_hCANx->p_CANx->sFIFOMailBox[1].RIR & CAN_RI1R_RTR);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2da      	uxtb	r2, r3
      p_frame_buffer->remote =
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	719a      	strb	r2, [r3, #6]
      p_frame_buffer->data_lenght =
          (p_hCANx->p_CANx->sFIFOMailBox[1].RDTR & CAN_RDT1R_DLC);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	b2da      	uxtb	r2, r3
      p_frame_buffer->data_lenght =
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	711a      	strb	r2, [r3, #4]

      if (p_hCANx->p_CANx->sFIFOMailBox[1].RIR & CAN_RI1R_IDE)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <md_can_read_fifo+0x1b4>
        {
          p_frame_buffer->id_extended = 1;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2201      	movs	r2, #1
 80010ce:	715a      	strb	r2, [r3, #5]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[1].RIR >> CAN_RI1R_EXID_Pos);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80010d8:	08da      	lsrs	r2, r3, #3
          p_frame_buffer->id =
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e009      	b.n	80010f4 <md_can_read_fifo+0x1c8>
        }
      else
        {
          p_frame_buffer->id_extended = 0;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2200      	movs	r2, #0
 80010e4:	715a      	strb	r2, [r3, #5]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[1].RIR >> CAN_RI1R_STID_Pos);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80010ee:	0d5a      	lsrs	r2, r3, #21
          p_frame_buffer->id =
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	601a      	str	r2, [r3, #0]
        }

      // read form fifo - data info
      for (uint8_t i = 0; i < 8; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	75bb      	strb	r3, [r7, #22]
 80010f8:	e024      	b.n	8001144 <md_can_read_fifo+0x218>
        {
          if (i < 4)
 80010fa:	7dbb      	ldrb	r3, [r7, #22]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d80e      	bhi.n	800111e <md_can_read_fifo+0x1f2>
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[1].RDLR >> (i * 8));
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	7dbb      	ldrb	r3, [r7, #22]
 8001116:	4413      	add	r3, r2
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e00f      	b.n	800113e <md_can_read_fifo+0x212>
            }
          else
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[1].RDHR >> ((i % 4) * 8));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8001126:	7dbb      	ldrb	r3, [r7, #22]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	4413      	add	r3, r2
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = 0; i < 8; i++)
 800113e:	7dbb      	ldrb	r3, [r7, #22]
 8001140:	3301      	adds	r3, #1
 8001142:	75bb      	strb	r3, [r7, #22]
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d9d7      	bls.n	80010fa <md_can_read_fifo+0x1ce>
            }
        }

      // if using irq mode , activate irq for next message
      if (p_hCANx->msg_pending_fifo1 == 1)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	79db      	ldrb	r3, [r3, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d008      	beq.n	8001164 <md_can_read_fifo+0x238>
        {
          SET_BIT(CAN1->IER, CAN_IER_FMPIE1);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <md_can_read_fifo+0x24c>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <md_can_read_fifo+0x24c>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6153      	str	r3, [r2, #20]
          p_hCANx->msg_pending_fifo1 = 1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2201      	movs	r2, #1
 8001162:	71da      	strb	r2, [r3, #7]
        }
    }
  p_hCANx->can_error = CAN_ERR_NOERR;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40006400 	.word	0x40006400

0800117c <md_can_init_filter>:
 * @param[*p_hCANx] - @can_handler
 * @param[filter] - filter struct
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_filter(can_handle_t *p_hCANx, can_filter_t filter)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	4638      	mov	r0, r7
 8001186:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  if (filter.filter_number > 13)
 800118a:	783b      	ldrb	r3, [r7, #0]
 800118c:	2b0d      	cmp	r3, #13
 800118e:	d904      	bls.n	800119a <md_can_init_filter+0x1e>
    {
      p_hCANx->can_error = CAN_ERR_FILTER_NO_TOO_HIGH;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2209      	movs	r2, #9
 8001194:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_FILTER_NO_TOO_HIGH;
 8001196:	2309      	movs	r3, #9
 8001198:	e0a3      	b.n	80012e2 <md_can_init_filter+0x166>
    }

  // start init filter mode
  SET_BIT(p_hCANx->p_CANx->FMR, CAN_FMR_FINIT);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  // deactivate filter for configuration
  CLEAR_BIT(p_hCANx->p_CANx->FA1R, (0x01 << filter.filter_number));
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011b6:	783b      	ldrb	r3, [r7, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2301      	movs	r3, #1
 80011bc:	408b      	lsls	r3, r1
 80011be:	43db      	mvns	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	400a      	ands	r2, r1
 80011c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // assign filter to fifo
  if (filter.assign_to_fifo1 == true)
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00e      	beq.n	80011f0 <md_can_init_filter+0x74>
    {
      SET_BIT(p_hCANx->p_CANx->FFA1R, (0x01 << filter.filter_number));
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011da:	783b      	ldrb	r3, [r7, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	2301      	movs	r3, #1
 80011e0:	408b      	lsls	r3, r1
 80011e2:	4619      	mov	r1, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011ee:	e00e      	b.n	800120e <md_can_init_filter+0x92>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->FFA1R, (0x01 << filter.filter_number));
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011f8:	783b      	ldrb	r3, [r7, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	2301      	movs	r3, #1
 80011fe:	408b      	lsls	r3, r1
 8001200:	43db      	mvns	r3, r3
 8001202:	4619      	mov	r1, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

  // select scale 16 bit (for standard) 32 bit (for extended id)
  if (filter.scale_32bit == true)
 800120e:	78bb      	ldrb	r3, [r7, #2]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00e      	beq.n	8001232 <md_can_init_filter+0xb6>
    {
      SET_BIT(p_hCANx->p_CANx->FS1R, (0x01 << filter.filter_number));
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800121c:	783b      	ldrb	r3, [r7, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	2301      	movs	r3, #1
 8001222:	408b      	lsls	r3, r1
 8001224:	4619      	mov	r1, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001230:	e00e      	b.n	8001250 <md_can_init_filter+0xd4>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->FS1R, (0x01 << filter.filter_number));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800123a:	783b      	ldrb	r3, [r7, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	2301      	movs	r3, #1
 8001240:	408b      	lsls	r3, r1
 8001242:	43db      	mvns	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	400a      	ands	r2, r1
 800124c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    }

  // select mode
  if (filter.list_mode == true)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00e      	beq.n	8001274 <md_can_init_filter+0xf8>
    {
      SET_BIT(p_hCANx->p_CANx->FS1R, (0x01 << filter.filter_number));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800125e:	783b      	ldrb	r3, [r7, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	2301      	movs	r3, #1
 8001264:	408b      	lsls	r3, r1
 8001266:	4619      	mov	r1, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001272:	e00e      	b.n	8001292 <md_can_init_filter+0x116>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->FS1R, (0x01 << filter.filter_number));
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800127c:	783b      	ldrb	r3, [r7, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	2301      	movs	r3, #1
 8001282:	408b      	lsls	r3, r1
 8001284:	43db      	mvns	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	400a      	ands	r2, r1
 800128e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    }

  // fill value registers
  p_hCANx->p_CANx->sFilterRegister[filter.filter_number].FR1 =
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	783a      	ldrb	r2, [r7, #0]
      filter.filter_id0;
 8001298:	6879      	ldr	r1, [r7, #4]
  p_hCANx->p_CANx->sFilterRegister[filter.filter_number].FR1 =
 800129a:	3248      	adds	r2, #72	; 0x48
 800129c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  p_hCANx->p_CANx->sFilterRegister[filter.filter_number].FR2 =
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	783b      	ldrb	r3, [r7, #0]
      filter.filter_mask_or_id1;
 80012a6:	68ba      	ldr	r2, [r7, #8]
  p_hCANx->p_CANx->sFilterRegister[filter.filter_number].FR2 =
 80012a8:	3348      	adds	r3, #72	; 0x48
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	605a      	str	r2, [r3, #4]

  // activate filter
  SET_BIT(p_hCANx->p_CANx->FA1R, (0x01 << filter.filter_number));
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012b8:	783b      	ldrb	r3, [r7, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	408b      	lsls	r3, r1
 80012c0:	4619      	mov	r1, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // stop filter init mode
  CLEAR_BIT(p_hCANx->p_CANx->FMR, CAN_FMR_FINIT);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  return CAN_ERR_NOERR;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <md_can_activate_irq>:
 * @param[irq_prio] - priority to certain irq
 * @return - can_error_t - can error status
 */
void md_can_activate_irq(can_handle_t *p_hCANx, can_irq_group_t irq_group,
                         uint32_t irq_flags, uint8_t irq_prio)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	72fb      	strb	r3, [r7, #11]
 80012fc:	4613      	mov	r3, r2
 80012fe:	72bb      	strb	r3, [r7, #10]
  // choose nvic group to activate + filter flags
  switch (irq_group)
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d83e      	bhi.n	8001384 <md_can_activate_irq+0x98>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <md_can_activate_irq+0x20>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001337 	.word	0x08001337
 8001314:	08001351 	.word	0x08001351
 8001318:	0800136b 	.word	0x0800136b
    {
    case (CAN_IRQ_GROUP_TX):
      irq_flags &= 0x00000001;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001324:	2013      	movs	r0, #19
 8001326:	f7ff fc4f 	bl	8000bc8 <__NVIC_EnableIRQ>
      NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, irq_prio);
 800132a:	7abb      	ldrb	r3, [r7, #10]
 800132c:	4619      	mov	r1, r3
 800132e:	2013      	movs	r0, #19
 8001330:	f7ff fc84 	bl	8000c3c <__NVIC_SetPriority>
      break;
 8001334:	e026      	b.n	8001384 <md_can_activate_irq+0x98>

    case (CAN_IRQ_GROUP_RX0):
      irq_flags &= 0x0000000E;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f003 030e 	and.w	r3, r3, #14
 800133c:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800133e:	2014      	movs	r0, #20
 8001340:	f7ff fc42 	bl	8000bc8 <__NVIC_EnableIRQ>
      NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, irq_prio);
 8001344:	7abb      	ldrb	r3, [r7, #10]
 8001346:	4619      	mov	r1, r3
 8001348:	2014      	movs	r0, #20
 800134a:	f7ff fc77 	bl	8000c3c <__NVIC_SetPriority>
      break;
 800134e:	e019      	b.n	8001384 <md_can_activate_irq+0x98>

    case (CAN_IRQ_GROUP_RX1):
      irq_flags &= 0x00000070;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001356:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001358:	2015      	movs	r0, #21
 800135a:	f7ff fc35 	bl	8000bc8 <__NVIC_EnableIRQ>
      NVIC_SetPriority(CAN1_RX1_IRQn, irq_prio);
 800135e:	7abb      	ldrb	r3, [r7, #10]
 8001360:	4619      	mov	r1, r3
 8001362:	2015      	movs	r0, #21
 8001364:	f7ff fc6a 	bl	8000c3c <__NVIC_SetPriority>
      break;
 8001368:	e00c      	b.n	8001384 <md_can_activate_irq+0x98>

    case (CAN_IRQ_GROUP_SCE):
      irq_flags &= 0x00038F00;
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <md_can_activate_irq+0xb0>)
 800136e:	4013      	ands	r3, r2
 8001370:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001372:	2016      	movs	r0, #22
 8001374:	f7ff fc28 	bl	8000bc8 <__NVIC_EnableIRQ>
      NVIC_SetPriority(CAN1_SCE_IRQn, irq_prio);
 8001378:	7abb      	ldrb	r3, [r7, #10]
 800137a:	4619      	mov	r1, r3
 800137c:	2016      	movs	r0, #22
 800137e:	f7ff fc5d 	bl	8000c3c <__NVIC_SetPriority>
      break;
 8001382:	bf00      	nop
    }

  // activate flags in IER register
  p_hCANx->p_CANx->IER |= irq_flags;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6959      	ldr	r1, [r3, #20]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	430a      	orrs	r2, r1
 8001392:	615a      	str	r2, [r3, #20]

  return;
 8001394:	bf00      	nop
}
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	00038f00 	.word	0x00038f00

080013a0 <can_enter_init_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_init_mode(can_handle_t *p_hCANx,
                                       uint32_t timeout_ms)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0202 	bic.w	r2, r2, #2
 80013cc:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80013ce:	e00c      	b.n	80013ea <can_enter_init_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80013d0:	f001 fa40 	bl	8002854 <md_systick_get_tick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d204      	bcs.n	80013ea <can_enter_init_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e022      	b.n	8001430 <can_enter_init_mode+0x90>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0eb      	beq.n	80013d0 <can_enter_init_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80013f8:	e00c      	b.n	8001414 <can_enter_init_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80013fa:	f001 fa2b 	bl	8002854 <md_systick_get_tick>
 80013fe:	4602      	mov	r2, r0
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d204      	bcs.n	8001414 <can_enter_init_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2202      	movs	r2, #2
 800140e:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8001410:	2302      	movs	r3, #2
 8001412:	e00d      	b.n	8001430 <can_enter_init_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1eb      	bne.n	80013fa <can_enter_init_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_INIT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <can_enter_normal_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_normal_mode(can_handle_t *p_hCANx,
                                         uint32_t timeout_ms)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0202 	bic.w	r2, r2, #2
 8001464:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8001466:	e00c      	b.n	8001482 <can_enter_normal_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001468:	f001 f9f4 	bl	8002854 <md_systick_get_tick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d204      	bcs.n	8001482 <can_enter_normal_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 800147e:	2301      	movs	r3, #1
 8001480:	e022      	b.n	80014c8 <can_enter_normal_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1eb      	bne.n	8001468 <can_enter_normal_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8001490:	e00c      	b.n	80014ac <can_enter_normal_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001492:	f001 f9df 	bl	8002854 <md_systick_get_tick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d204      	bcs.n	80014ac <can_enter_normal_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2202      	movs	r2, #2
 80014a6:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 80014a8:	2302      	movs	r3, #2
 80014aa:	e00d      	b.n	80014c8 <can_enter_normal_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1eb      	bne.n	8001492 <can_enter_normal_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_NORMAL;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <can_enter_sleep_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_sleep_mode(can_handle_t *p_hCANx,
                                        uint32_t timeout_ms)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0202 	orr.w	r2, r2, #2
 80014fc:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 80014fe:	e00c      	b.n	800151a <can_enter_sleep_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001500:	f001 f9a8 	bl	8002854 <md_systick_get_tick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d204      	bcs.n	800151a <can_enter_sleep_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 8001516:	2301      	movs	r3, #1
 8001518:	e022      	b.n	8001560 <can_enter_sleep_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1eb      	bne.n	8001500 <can_enter_sleep_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8001528:	e00c      	b.n	8001544 <can_enter_sleep_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 800152a:	f001 f993 	bl	8002854 <md_systick_get_tick>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d204      	bcs.n	8001544 <can_enter_sleep_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2202      	movs	r2, #2
 800153e:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8001540:	2302      	movs	r3, #2
 8001542:	e00d      	b.n	8001560 <can_enter_sleep_mode+0x90>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0eb      	beq.n	800152a <can_enter_sleep_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_SLEEP;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <can_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
static void can_init_handlers(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  hcan1.p_CANx = CAN1;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <can_init_handlers+0x20>)
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <can_init_handlers+0x24>)
 8001570:	601a      	str	r2, [r3, #0]
  hcan1.can_error = CAN_ERR_NOERR;
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <can_init_handlers+0x20>)
 8001574:	2200      	movs	r2, #0
 8001576:	711a      	strb	r2, [r3, #4]
  hcan1.op_mode = CAN_OPMODE_SLEEP;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <can_init_handlers+0x20>)
 800157a:	2202      	movs	r2, #2
 800157c:	715a      	strb	r2, [r3, #5]
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200000ac 	.word	0x200000ac
 800158c:	40006400 	.word	0x40006400

08001590 <can_init_clock>:
 * Starts clock for CAN and resets the peripheral
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
static void can_init_clock(can_handle_t *p_hCANx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <can_init_clock+0x50>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d117      	bne.n	80015d2 <can_init_clock+0x42>
    {
      if (RCC->APB1ENR & RCC_APB1ENR_CAN1EN)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <can_init_clock+0x54>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d113      	bne.n	80015d6 <can_init_clock+0x46>
        return;

      RCC_CLOCK_ENABLE_CAN();
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <can_init_clock+0x54>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <can_init_clock+0x54>)
 80015b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b8:	61d3      	str	r3, [r2, #28]
      SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <can_init_clock+0x54>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <can_init_clock+0x54>)
 80015c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c4:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <can_init_clock+0x54>)
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <can_init_clock+0x54>)
 80015cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80015d0:	6113      	str	r3, [r2, #16]
    }
  return;
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <can_init_clock+0x48>
        return;
 80015d6:	bf00      	nop
}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40006400 	.word	0x40006400
 80015e4:	40021000 	.word	0x40021000

080015e8 <can_init_gpio>:
 * Init gpio pins for can bus
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
static void can_init_gpio(can_handle_t *p_hCANx)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <can_init_gpio+0x34>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10b      	bne.n	8001612 <can_init_gpio+0x2a>
    {
      // CAN TX PA12, REMAP : PB8
      md_gpio_configure_output(GPIOA, GPIO_PIN_12, GPIO_SPEED_50MHZ,
 80015fa:	2302      	movs	r3, #2
 80015fc:	2203      	movs	r2, #3
 80015fe:	210c      	movs	r1, #12
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <can_init_gpio+0x38>)
 8001602:	f000 f9a3 	bl	800194c <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      // CAN RX PA11, REMAP : PB9
      md_gpio_configure_input(GPIOA, GPIO_PIN_11, GPIO_INPUT_FLOATING);
 8001606:	2201      	movs	r2, #1
 8001608:	210b      	movs	r1, #11
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <can_init_gpio+0x38>)
 800160c:	f000 f9f9 	bl	8001a02 <md_gpio_configure_input>
    }
  return;
 8001610:	bf00      	nop
 8001612:	bf00      	nop
}
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40006400 	.word	0x40006400
 8001620:	40010800 	.word	0x40010800

08001624 <can_main_rx0_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx0_callback(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if (CAN1->RF0R & CAN_RF0R_FULL0)
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <can_main_rx0_callback+0x24>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <can_main_rx0_callback+0x1c>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <can_main_rx0_callback+0x24>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <can_main_rx0_callback+0x24>)
 800163a:	f023 0302 	bic.w	r3, r3, #2
 800163e:	6153      	str	r3, [r2, #20]
    }
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40006400 	.word	0x40006400

0800164c <can_main_rx1_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx1_callback(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if (CAN1->RF1R & CAN_RF1R_FULL1)
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <can_main_rx1_callback+0x24>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <can_main_rx1_callback+0x1c>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE1);
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <can_main_rx1_callback+0x24>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <can_main_rx1_callback+0x24>)
 8001662:	f023 0310 	bic.w	r3, r3, #16
 8001666:	6153      	str	r3, [r2, #20]
    }
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40006400 	.word	0x40006400

08001674 <can_main_sce_callback>:

/*
 * this callback is called on error/status change
 * @return - void
 */
static void can_main_sce_callback(void) {}
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <USB_HP_CAN_TX_IRQHandler>:

// Vector table handlers for can

void USB_HP_CAN_TX_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  // clear only 1 request complete bit - so if 3 mailboxes become empty
  // there will be 3 interrupts
  if (CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_RQCP0))
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <USB_HP_CAN_TX_IRQHandler+0x64>)
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <USB_HP_CAN_TX_IRQHandler+0x1e>
    {
      CAN1->TSR |= CAN_TSR_RQCP0;
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6093      	str	r3, [r2, #8]
 800169c:	e018      	b.n	80016d0 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME1 | CAN_TSR_RQCP1))
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <USB_HP_CAN_TX_IRQHandler+0x68>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <USB_HP_CAN_TX_IRQHandler+0x38>
    {
      CAN1->TSR |= CAN_TSR_RQCP1;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6093      	str	r3, [r2, #8]
 80016b6:	e00b      	b.n	80016d0 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME2 | CAN_TSR_RQCP2))
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <USB_HP_CAN_TX_IRQHandler+0x6c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <USB_HP_CAN_TX_IRQHandler+0x50>
    {
      CAN1->TSR |= CAN_TSR_RQCP2;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6093      	str	r3, [r2, #8]
    }

  // clear nvic pending flag
  NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 80016d0:	2013      	movs	r0, #19
 80016d2:	f7ff fa95 	bl	8000c00 <__NVIC_ClearPendingIRQ>

  md_can_mailbox_empty_callback();
 80016d6:	f7ff f9ff 	bl	8000ad8 <md_can_mailbox_empty_callback>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40006400 	.word	0x40006400
 80016e4:	04000001 	.word	0x04000001
 80016e8:	08000100 	.word	0x08000100
 80016ec:	10010000 	.word	0x10010000

080016f0 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 80016f4:	2014      	movs	r0, #20
 80016f6:	f7ff fa83 	bl	8000c00 <__NVIC_ClearPendingIRQ>
  can_main_rx0_callback();
 80016fa:	f7ff ff93 	bl	8001624 <can_main_rx0_callback>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}

08001702 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8001706:	2015      	movs	r0, #21
 8001708:	f7ff fa7a 	bl	8000c00 <__NVIC_ClearPendingIRQ>
  can_main_rx1_callback();
 800170c:	f7ff ff9e 	bl	800164c <can_main_rx1_callback>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(CAN1_SCE_IRQn);
 8001718:	2016      	movs	r0, #22
 800171a:	f7ff fa71 	bl	8000c00 <__NVIC_ClearPendingIRQ>
  can_main_sce_callback();
 800171e:	f7ff ffa9 	bl	8001674 <can_main_sce_callback>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <__NVIC_EnableIRQ>:
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <__NVIC_EnableIRQ+0x34>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_ClearPendingIRQ>:
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0c      	blt.n	800178c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <__NVIC_ClearPendingIRQ+0x38>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	3360      	adds	r3, #96	; 0x60
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <md_gpio_init_clock+0x108>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d118      	bne.n	8001832 <md_gpio_init_clock+0x42>
    {
      if (RCC->APB2ENR & RCC_APB2ENR_IOPAEN)
 8001800:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d168      	bne.n	80018de <md_gpio_init_clock+0xee>
        return;

      RCC_CLOCK_ENABLE_IOPA();
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <md_gpio_init_clock+0x10c>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <md_gpio_init_clock+0x10c>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a37      	ldr	r2, [pc, #220]	; (80018fc <md_gpio_init_clock+0x10c>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a34      	ldr	r2, [pc, #208]	; (80018fc <md_gpio_init_clock+0x10c>)
 800182a:	f023 0304 	bic.w	r3, r3, #4
 800182e:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 8001830:	e05b      	b.n	80018ea <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOB)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a32      	ldr	r2, [pc, #200]	; (8001900 <md_gpio_init_clock+0x110>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d118      	bne.n	800186c <md_gpio_init_clock+0x7c>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPBEN)
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <md_gpio_init_clock+0x10c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d14d      	bne.n	80018e2 <md_gpio_init_clock+0xf2>
      RCC_CLOCK_ENABLE_IOPB();
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <md_gpio_init_clock+0x10c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4a29      	ldr	r2, [pc, #164]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4a26      	ldr	r2, [pc, #152]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001864:	f023 0308 	bic.w	r3, r3, #8
 8001868:	60d3      	str	r3, [r2, #12]
  return;
 800186a:	e03e      	b.n	80018ea <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOC)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a25      	ldr	r2, [pc, #148]	; (8001904 <md_gpio_init_clock+0x114>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d118      	bne.n	80018a6 <md_gpio_init_clock+0xb6>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPCEN)
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d132      	bne.n	80018e6 <md_gpio_init_clock+0xf6>
      RCC_CLOCK_ENABLE_IOPC();
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <md_gpio_init_clock+0x10c>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <md_gpio_init_clock+0x10c>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <md_gpio_init_clock+0x10c>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <md_gpio_init_clock+0x10c>)
 800189e:	f023 0310 	bic.w	r3, r3, #16
 80018a2:	60d3      	str	r3, [r2, #12]
  return;
 80018a4:	e021      	b.n	80018ea <md_gpio_init_clock+0xfa>
  else if (p_GPIOx)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01e      	beq.n	80018ea <md_gpio_init_clock+0xfa>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPDEN)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11a      	bne.n	80018ee <md_gpio_init_clock+0xfe>
      RCC_CLOCK_ENABLE_IOPD();
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018be:	f043 0320 	orr.w	r3, r3, #32
 80018c2:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a09      	ldr	r2, [pc, #36]	; (80018fc <md_gpio_init_clock+0x10c>)
 80018d6:	f023 0320 	bic.w	r3, r3, #32
 80018da:	60d3      	str	r3, [r2, #12]
  return;
 80018dc:	e005      	b.n	80018ea <md_gpio_init_clock+0xfa>
        return;
 80018de:	bf00      	nop
 80018e0:	e006      	b.n	80018f0 <md_gpio_init_clock+0x100>
        return;
 80018e2:	bf00      	nop
 80018e4:	e004      	b.n	80018f0 <md_gpio_init_clock+0x100>
        return;
 80018e6:	bf00      	nop
 80018e8:	e002      	b.n	80018f0 <md_gpio_init_clock+0x100>
  return;
 80018ea:	bf00      	nop
 80018ec:	e000      	b.n	80018f0 <md_gpio_init_clock+0x100>
        return;
 80018ee:	bf00      	nop
}
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40010800 	.word	0x40010800
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010c00 	.word	0x40010c00
 8001904:	40011000 	.word	0x40011000

08001908 <md_gpio_init_af_clock>:
 * Starts clock for AFIO and resets the peripheral
 * @param[void]
 * @return - void
 */
void md_gpio_init_af_clock(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  if (RCC->APB2ENR & RCC_APB2ENR_AFIOEN)
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <md_gpio_init_af_clock+0x40>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <md_gpio_init_af_clock+0x36>
    return;

  RCC_CLOCK_ENABLE_AFIO();
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <md_gpio_init_af_clock+0x40>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <md_gpio_init_af_clock+0x40>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_AFIORST);
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <md_gpio_init_af_clock+0x40>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <md_gpio_init_af_clock+0x40>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_AFIORST);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <md_gpio_init_af_clock+0x40>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <md_gpio_init_af_clock+0x40>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	60d3      	str	r3, [r2, #12]
  return;
 800193c:	e000      	b.n	8001940 <md_gpio_init_af_clock+0x38>
    return;
 800193e:	bf00      	nop
}
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	70fb      	strb	r3, [r7, #3]
 800195e:	460b      	mov	r3, r1
 8001960:	70bb      	strb	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
  md_gpio_init_clock(p_GPIOx);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff42 	bl	80017f0 <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b07      	cmp	r3, #7
 8001970:	d820      	bhi.n	80019b4 <md_gpio_configure_output+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	210f      	movs	r1, #15
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	43d2      	mvns	r2, r2
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	78b9      	ldrb	r1, [r7, #2]
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	7879      	ldrb	r1, [r7, #1]
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	3202      	adds	r2, #2
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 80019b2:	e023      	b.n	80019fc <md_gpio_configure_output+0xb0>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	3a08      	subs	r2, #8
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	210f      	movs	r1, #15
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	43d2      	mvns	r2, r2
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	78b9      	ldrb	r1, [r7, #2]
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	3a08      	subs	r2, #8
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	7879      	ldrb	r1, [r7, #1]
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	3a08      	subs	r2, #8
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	3202      	adds	r2, #2
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
  return;
 80019fa:	bf00      	nop
}
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <md_gpio_configure_input>:
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70fb      	strb	r3, [r7, #3]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	70bb      	strb	r3, [r7, #2]
  md_gpio_init_clock(p_GPIOx);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff feec 	bl	80017f0 <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	2b07      	cmp	r3, #7
 8001a1c:	d825      	bhi.n	8001a6a <md_gpio_configure_input+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	210f      	movs	r1, #15
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	43d2      	mvns	r2, r2
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d90b      	bls.n	8001a52 <md_gpio_configure_input+0x50>
        {
          p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	3202      	adds	r2, #2
 8001a44:	2102      	movs	r1, #2
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e033      	b.n	8001aba <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	78b9      	ldrb	r1, [r7, #2]
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	3202      	adds	r2, #2
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e027      	b.n	8001aba <md_gpio_configure_input+0xb8>
        }
    }
  else
    {
      // clear config and mode bits
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	3a08      	subs	r2, #8
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	210f      	movs	r1, #15
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	43d2      	mvns	r2, r2
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	605a      	str	r2, [r3, #4]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8001a82:	78bb      	ldrb	r3, [r7, #2]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d90c      	bls.n	8001aa2 <md_gpio_configure_input+0xa0>
        {
          p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	3a08      	subs	r2, #8
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	3202      	adds	r2, #2
 8001a94:	2102      	movs	r1, #2
 8001a96:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	e00b      	b.n	8001aba <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	78b9      	ldrb	r1, [r7, #2]
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	3a08      	subs	r2, #8
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	3202      	adds	r2, #2
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	605a      	str	r2, [r3, #4]
        }
    }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP)
 8001aba:	78bb      	ldrb	r3, [r7, #2]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d107      	bne.n	8001ad0 <md_gpio_configure_input+0xce>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
  else
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8001ace:	e007      	b.n	8001ae0 <md_gpio_configure_input+0xde>
      p_GPIOx->BRR = (0x01 << pin_number);
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	615a      	str	r2, [r3, #20]
  return;
 8001ade:	bf00      	nop
}
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <md_gpio_configure_exti>:
 * @return - void
 */
void md_gpio_configure_exti(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                            gpio_input_config input_config,
                            gpio_exti_trigger trigger, uint8_t irq_prio)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	70fb      	strb	r3, [r7, #3]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70bb      	strb	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	707b      	strb	r3, [r7, #1]

  md_gpio_init_af_clock();
 8001b02:	f7ff ff01 	bl	8001908 <md_gpio_init_af_clock>

  md_gpio_configure_input(p_GPIOx, pin_number, input_config);
 8001b06:	78ba      	ldrb	r2, [r7, #2]
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff78 	bl	8001a02 <md_gpio_configure_input>

  uint8_t code = GPIO_BASEADDR_TO_CODE(p_GPIOx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a5f      	ldr	r2, [pc, #380]	; (8001c94 <md_gpio_configure_exti+0x1ac>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <md_gpio_configure_exti+0x5a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a5e      	ldr	r2, [pc, #376]	; (8001c98 <md_gpio_configure_exti+0x1b0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <md_gpio_configure_exti+0x56>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <md_gpio_configure_exti+0x1b4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <md_gpio_configure_exti+0x52>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <md_gpio_configure_exti+0x1b8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <md_gpio_configure_exti+0x4e>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e006      	b.n	8001b44 <md_gpio_configure_exti+0x5c>
 8001b36:	2300      	movs	r3, #0
 8001b38:	e004      	b.n	8001b44 <md_gpio_configure_exti+0x5c>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <md_gpio_configure_exti+0x5c>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <md_gpio_configure_exti+0x5c>
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]

  AFIO->EXTICR[pin_number / 4] &= ~(0x0F << (pin_number % 4) * 4);
 8001b46:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <md_gpio_configure_exti+0x1bc>)
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	b2d8      	uxtb	r0, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	210f      	movs	r1, #15
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	43d2      	mvns	r2, r2
 8001b66:	494f      	ldr	r1, [pc, #316]	; (8001ca4 <md_gpio_configure_exti+0x1bc>)
 8001b68:	401a      	ands	r2, r3
 8001b6a:	1c83      	adds	r3, r0, #2
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[pin_number / 4] |= code << (pin_number % 4) * 4;
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <md_gpio_configure_exti+0x1bc>)
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	b2d8      	uxtb	r0, r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	7bf9      	ldrb	r1, [r7, #15]
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	f002 0203 	and.w	r2, r2, #3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	4945      	ldr	r1, [pc, #276]	; (8001ca4 <md_gpio_configure_exti+0x1bc>)
 8001b90:	431a      	orrs	r2, r3
 8001b92:	1c83      	adds	r3, r0, #2
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // mask irq in exti
  EXTI->IMR |= (0x01 << pin_number);
 8001b98:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <md_gpio_configure_exti+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <md_gpio_configure_exti+0x1c0>)
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6013      	str	r3, [r2, #0]

  if (trigger == GPIO_EXTI_RISING || trigger == GPIO_EXTI_RISINGFALLING)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <md_gpio_configure_exti+0xd0>
 8001bb2:	787b      	ldrb	r3, [r7, #1]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d109      	bne.n	8001bcc <md_gpio_configure_exti+0xe4>
    {
      EXTI->RTSR |= (0x01 << pin_number);
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <md_gpio_configure_exti+0x1c0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <md_gpio_configure_exti+0x1c0>)
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]
    }

  if (trigger == GPIO_EXTI_FALLING || trigger == GPIO_EXTI_RISINGFALLING)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d002      	beq.n	8001bd8 <md_gpio_configure_exti+0xf0>
 8001bd2:	787b      	ldrb	r3, [r7, #1]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d109      	bne.n	8001bec <md_gpio_configure_exti+0x104>
    {
      EXTI->FTSR |= (0x01 << pin_number);
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <md_gpio_configure_exti+0x1c0>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4611      	mov	r1, r2
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <md_gpio_configure_exti+0x1c0>)
 8001be8:	430b      	orrs	r3, r1
 8001bea:	60d3      	str	r3, [r2, #12]
    }

  if (pin_number == GPIO_PIN_0)
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <md_gpio_configure_exti+0x11c>
    {
      NVIC_EnableIRQ(EXTI0_IRQn);
 8001bf2:	2006      	movs	r0, #6
 8001bf4:	f7ff fd98 	bl	8001728 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI0_IRQn, irq_prio);
 8001bf8:	7e3b      	ldrb	r3, [r7, #24]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	2006      	movs	r0, #6
 8001bfe:	f7ff fdcd 	bl	800179c <__NVIC_SetPriority>
    {
      NVIC_SetPriority(EXTI15_10_IRQn, irq_prio);
      NVIC_EnableIRQ(EXTI15_10_IRQn);
    }

  return;
 8001c02:	e044      	b.n	8001c8e <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_1)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <md_gpio_configure_exti+0x134>
      NVIC_EnableIRQ(EXTI1_IRQn);
 8001c0a:	2007      	movs	r0, #7
 8001c0c:	f7ff fd8c 	bl	8001728 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI1_IRQn, irq_prio);
 8001c10:	7e3b      	ldrb	r3, [r7, #24]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2007      	movs	r0, #7
 8001c16:	f7ff fdc1 	bl	800179c <__NVIC_SetPriority>
  return;
 8001c1a:	e038      	b.n	8001c8e <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_2)
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d108      	bne.n	8001c34 <md_gpio_configure_exti+0x14c>
      NVIC_EnableIRQ(EXTI2_IRQn);
 8001c22:	2008      	movs	r0, #8
 8001c24:	f7ff fd80 	bl	8001728 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI2_IRQn, irq_prio);
 8001c28:	7e3b      	ldrb	r3, [r7, #24]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	2008      	movs	r0, #8
 8001c2e:	f7ff fdb5 	bl	800179c <__NVIC_SetPriority>
  return;
 8001c32:	e02c      	b.n	8001c8e <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_3)
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d108      	bne.n	8001c4c <md_gpio_configure_exti+0x164>
      NVIC_EnableIRQ(EXTI3_IRQn);
 8001c3a:	2009      	movs	r0, #9
 8001c3c:	f7ff fd74 	bl	8001728 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI3_IRQn, irq_prio);
 8001c40:	7e3b      	ldrb	r3, [r7, #24]
 8001c42:	4619      	mov	r1, r3
 8001c44:	2009      	movs	r0, #9
 8001c46:	f7ff fda9 	bl	800179c <__NVIC_SetPriority>
  return;
 8001c4a:	e020      	b.n	8001c8e <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_4)
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d108      	bne.n	8001c64 <md_gpio_configure_exti+0x17c>
      NVIC_EnableIRQ(EXTI4_IRQn);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f7ff fd68 	bl	8001728 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI4_IRQn, irq_prio);
 8001c58:	7e3b      	ldrb	r3, [r7, #24]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f7ff fd9d 	bl	800179c <__NVIC_SetPriority>
  return;
 8001c62:	e014      	b.n	8001c8e <md_gpio_configure_exti+0x1a6>
  else if (pin_number < GPIO_PIN_10)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	d808      	bhi.n	8001c7c <md_gpio_configure_exti+0x194>
      NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c6a:	2017      	movs	r0, #23
 8001c6c:	f7ff fd5c 	bl	8001728 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI9_5_IRQn, irq_prio);
 8001c70:	7e3b      	ldrb	r3, [r7, #24]
 8001c72:	4619      	mov	r1, r3
 8001c74:	2017      	movs	r0, #23
 8001c76:	f7ff fd91 	bl	800179c <__NVIC_SetPriority>
  return;
 8001c7a:	e008      	b.n	8001c8e <md_gpio_configure_exti+0x1a6>
      NVIC_SetPriority(EXTI15_10_IRQn, irq_prio);
 8001c7c:	7e3b      	ldrb	r3, [r7, #24]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	2028      	movs	r0, #40	; 0x28
 8001c82:	f7ff fd8b 	bl	800179c <__NVIC_SetPriority>
      NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c86:	2028      	movs	r0, #40	; 0x28
 8001c88:	f7ff fd4e 	bl	8001728 <__NVIC_EnableIRQ>
  return;
 8001c8c:	bf00      	nop
}
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40010800 	.word	0x40010800
 8001c98:	40010c00 	.word	0x40010c00
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40011400 	.word	0x40011400
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010400 	.word	0x40010400

08001cac <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8001cbc:	78bb      	ldrb	r3, [r7, #2]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8001cd0:	e00a      	b.n	8001ce8 <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8001cd2:	78bb      	ldrb	r3, [r7, #2]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	615a      	str	r2, [r3, #20]
  return;
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
}
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <md_gpio_toggle_pin>:
 * @param[*p_GPIOx] - gpiox base address
 * @param[pin_number] - pin number enum @gpio_pin_number
 * @return - void
 */
void md_gpio_toggle_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  p_GPIOx->ODR ^= (0x01 << pin_number);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	405a      	eors	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
  return;
 8001d10:	bf00      	nop
}
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <md_gpio_exti4_callback>:
/*
 * callback for exti 4 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti4_callback(void) {}
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <md_gpio_exti3_callback>:
/*
 * callback for exti 3 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti3_callback(void) {}
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <md_gpio_exti2_callback>:
/*
 * callback for exti 2 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti2_callback(void) {}
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <md_gpio_exti1_callback>:
/*
 * callback for exti 1 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti1_callback(void) {}
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <md_gpio_exti0_callback>:
/*
 * callback for exti 0 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti0_callback(void) {}
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <gpio_exti15_10_get_pin>:
/*
 * find first exti pending number from registers 15-10/9-5
 * @return - pin number;
 */
static uint8_t gpio_exti15_10_get_pin(IRQn_Type exti_irq)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  uint32_t temp = EXTI->PR;
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <gpio_exti15_10_get_pin+0x90>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	60fb      	str	r3, [r7, #12]

  if (exti_irq == EXTI9_5_IRQn)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b17      	cmp	r3, #23
 8001d6e:	d118      	bne.n	8001da2 <gpio_exti15_10_get_pin+0x4a>
    {
      temp >>= 5;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	72fb      	strb	r3, [r7, #11]
 8001d7a:	e00e      	b.n	8001d9a <gpio_exti15_10_get_pin+0x42>
        {
          if (temp & 0x01)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <gpio_exti15_10_get_pin+0x36>
            return (i + 5);
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	3305      	adds	r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	e026      	b.n	8001ddc <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	3301      	adds	r3, #1
 8001d98:	72fb      	strb	r3, [r7, #11]
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d9ed      	bls.n	8001d7c <gpio_exti15_10_get_pin+0x24>
 8001da0:	e01b      	b.n	8001dda <gpio_exti15_10_get_pin+0x82>
        }
    }
  else if (exti_irq == EXTI15_10_IRQn)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b28      	cmp	r3, #40	; 0x28
 8001da8:	d117      	bne.n	8001dda <gpio_exti15_10_get_pin+0x82>
    {
      temp >>= 10;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	0a9b      	lsrs	r3, r3, #10
 8001dae:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	72bb      	strb	r3, [r7, #10]
 8001db4:	e00e      	b.n	8001dd4 <gpio_exti15_10_get_pin+0x7c>
        {
          if (temp & 0x01)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <gpio_exti15_10_get_pin+0x70>
            return (i + 10);
 8001dc0:	7abb      	ldrb	r3, [r7, #10]
 8001dc2:	330a      	adds	r3, #10
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e009      	b.n	8001ddc <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8001dce:	7abb      	ldrb	r3, [r7, #10]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	72bb      	strb	r3, [r7, #10]
 8001dd4:	7abb      	ldrb	r3, [r7, #10]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d9ed      	bls.n	8001db6 <gpio_exti15_10_get_pin+0x5e>
        }
    }

  return 0;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010400 	.word	0x40010400

08001dec <EXTI15_10_IRQHandler>:

// Vector table handlers for exti

void EXTI15_10_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI15_10_IRQn);
 8001df2:	2028      	movs	r0, #40	; 0x28
 8001df4:	f7ff ffb0 	bl	8001d58 <gpio_exti15_10_get_pin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <EXTI15_10_IRQHandler+0x3c>)
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <EXTI15_10_IRQHandler+0x3c>)
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001e10:	2028      	movs	r0, #40	; 0x28
 8001e12:	f7ff fca5 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fe4d 	bl	8000ab8 <md_gpio_exti15_10_callback>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40010400 	.word	0x40010400

08001e2c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI9_5_IRQn);
 8001e32:	2017      	movs	r0, #23
 8001e34:	f7ff ff90 	bl	8001d58 <gpio_exti15_10_get_pin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <EXTI9_5_IRQHandler+0x3c>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f202 	lsl.w	r2, r1, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <EXTI9_5_IRQHandler+0x3c>)
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8001e50:	2017      	movs	r0, #23
 8001e52:	f7ff fc85 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fe2d 	bl	8000ab8 <md_gpio_exti15_10_callback>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40010400 	.word	0x40010400

08001e6c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 4);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <EXTI4_IRQHandler+0x20>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <EXTI4_IRQHandler+0x20>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f7ff fc6f 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti4_callback();
 8001e82:	f7ff ff4a 	bl	8001d1a <md_gpio_exti4_callback>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40010400 	.word	0x40010400

08001e90 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 3);
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <EXTI3_IRQHandler+0x20>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <EXTI3_IRQHandler+0x20>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8001ea0:	2009      	movs	r0, #9
 8001ea2:	f7ff fc5d 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti3_callback();
 8001ea6:	f7ff ff3e 	bl	8001d26 <md_gpio_exti3_callback>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 2);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <EXTI2_IRQHandler+0x20>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <EXTI2_IRQHandler+0x20>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8001ec4:	2008      	movs	r0, #8
 8001ec6:	f7ff fc4b 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti2_callback();
 8001eca:	f7ff ff32 	bl	8001d32 <md_gpio_exti2_callback>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 1);
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <EXTI1_IRQHandler+0x20>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <EXTI1_IRQHandler+0x20>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001ee8:	2007      	movs	r0, #7
 8001eea:	f7ff fc39 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti1_callback();
 8001eee:	f7ff ff26 	bl	8001d3e <md_gpio_exti1_callback>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40010400 	.word	0x40010400

08001efc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 0);
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <EXTI0_IRQHandler+0x20>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <EXTI0_IRQHandler+0x20>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f7ff fc27 	bl	8001760 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti0_callback();
 8001f12:	f7ff ff1a 	bl	8001d4a <md_gpio_exti0_callback>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40010400 	.word	0x40010400

08001f20 <md_rcc_configure_sysclk>:
 * @param[hse_div] - pll1 hse division factor @rcc_hse_div
 * @return - void
 */
void md_rcc_configure_sysclk(rcc_sysclk_source_t sysclk_source,
                             rcc_pll_source_t pll_source,
                             rcc_pll1_mul_t pll1_mul, rcc_hse_div_t hse_div) {
 8001f20:	b490      	push	{r4, r7}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4604      	mov	r4, r0
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	4603      	mov	r3, r0
 8001f34:	71bb      	strb	r3, [r7, #6]
 8001f36:	460b      	mov	r3, r1
 8001f38:	717b      	strb	r3, [r7, #5]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	713b      	strb	r3, [r7, #4]
  // enable HSI
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSI ||
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <md_rcc_configure_sysclk+0x2a>
 8001f44:	79bb      	ldrb	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <md_rcc_configure_sysclk+0x44>
      pll_source == RCC_PLL_SOURCE_HSI) {
    SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
    // wait until HSI is ready
    while (!(RCC->CR & RCC_CR_HSIRDY))
 8001f56:	bf00      	nop
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f9      	beq.n	8001f58 <md_rcc_configure_sysclk+0x38>
      ;
  }

  // enable HSE
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSE ||
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d002      	beq.n	8001f70 <md_rcc_configure_sysclk+0x50>
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10c      	bne.n	8001f8a <md_rcc_configure_sysclk+0x6a>
      pll_source == RCC_PLL_SOURCE_HSE) {
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f70:	4b2e      	ldr	r3, [pc, #184]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
    // wait until HSE is ready
    while (!(RCC->CR & RCC_CR_HSERDY))
 8001f7c:	bf00      	nop
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f9      	beq.n	8001f7e <md_rcc_configure_sysclk+0x5e>
      ;
  }

  // configure PLL
  if (sysclk_source == RCC_SYSCLK_SOURCE_PLL) {
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d139      	bne.n	8002004 <md_rcc_configure_sysclk+0xe4>
    // choose PLL source and multiplier
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a25      	ldr	r2, [pc, #148]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll_source << RCC_CFGR_PLLSRC_Pos);
 8001f9c:	4b23      	ldr	r3, [pc, #140]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	79ba      	ldrb	r2, [r7, #6]
 8001fa2:	0412      	lsls	r2, r2, #16
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fb2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001fb6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll1_mul << RCC_CFGR_PLLMULL_Pos);
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	797a      	ldrb	r2, [r7, #5]
 8001fbe:	0492      	lsls	r2, r2, #18
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6053      	str	r3, [r2, #4]

    // if source is HSE choose prediv
    if (pll_source == RCC_PLL_SOURCE_HSE) {
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10d      	bne.n	8001fea <md_rcc_configure_sysclk+0xca>
      RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fd8:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (hse_div << RCC_CFGR_PLLXTPRE_Pos);
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	793a      	ldrb	r2, [r7, #4]
 8001fe0:	0452      	lsls	r2, r2, #17
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	6053      	str	r3, [r2, #4]
    }

    // enable PLL
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6013      	str	r3, [r2, #0]
    // wait until PLL is ready
    while (!(RCC->CR & RCC_CR_PLLRDY))
 8001ff6:	bf00      	nop
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f9      	beq.n	8001ff8 <md_rcc_configure_sysclk+0xd8>
      ;
  }

  // change sysclk source
  RCC->CFGR |= (sysclk_source << RCC_CFGR_SW_Pos);
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

   //wait until sys clock is switched
   while (!(RCC->CFGR & (sysclk_source << 2U)))
 8002010:	bf00      	nop
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <md_rcc_configure_sysclk+0x10c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f8      	beq.n	8002012 <md_rcc_configure_sysclk+0xf2>
      ;

  return;
 8002020:	bf00      	nop
}
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bc90      	pop	{r4, r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <md_rcc_configure_prescalers>:
 * @return - void
 */
void md_rcc_configure_prescalers(rcc_ahb_prescaler_t ahb_prescaler,
                                 rcc_apb_prescaler_t apb1_prescaler,
                                 rcc_apb_prescaler_t apb2_prescaler,
                                 rcc_adc_prescaler_t adc_prescaler) {
 8002030:	b490      	push	{r4, r7}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4604      	mov	r4, r0
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4623      	mov	r3, r4
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	4603      	mov	r3, r0
 8002044:	71bb      	strb	r3, [r7, #6]
 8002046:	460b      	mov	r3, r1
 8002048:	717b      	strb	r3, [r7, #5]
 800204a:	4613      	mov	r3, r2
 800204c:	713b      	strb	r3, [r7, #4]
  // configure ahb prescaler
  RCC->CFGR |= (ahb_prescaler << RCC_CFGR_HPRE_Pos);
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	4611      	mov	r1, r2
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 800205a:	430b      	orrs	r3, r1
 800205c:	6053      	str	r3, [r2, #4]

  // configure apb1/apb2 prescalers
  RCC->CFGR |= (apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	79ba      	ldrb	r2, [r7, #6]
 8002064:	0212      	lsls	r2, r2, #8
 8002066:	4611      	mov	r1, r2
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 800206a:	430b      	orrs	r3, r1
 800206c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	797a      	ldrb	r2, [r7, #5]
 8002074:	02d2      	lsls	r2, r2, #11
 8002076:	4611      	mov	r1, r2
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 800207a:	430b      	orrs	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

  // configure adc prescaler
  RCC->CFGR |= (adc_prescaler << RCC_CFGR_ADCPRE_Pos);
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	793a      	ldrb	r2, [r7, #4]
 8002084:	0392      	lsls	r2, r2, #14
 8002086:	4611      	mov	r1, r2
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <md_rcc_configure_prescalers+0x68>)
 800208a:	430b      	orrs	r3, r1
 800208c:	6053      	str	r3, [r2, #4]

  return;
 800208e:	bf00      	nop
}
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bc90      	pop	{r4, r7}
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <md_rcc_get_sysclk+0x34>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d00a      	beq.n	80020c2 <md_rcc_get_sysclk+0x26>
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d80c      	bhi.n	80020ca <md_rcc_get_sysclk+0x2e>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <md_rcc_get_sysclk+0x1e>
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d002      	beq.n	80020be <md_rcc_get_sysclk+0x22>
 80020b8:	e007      	b.n	80020ca <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <md_rcc_get_sysclk+0x38>)
 80020bc:	e006      	b.n	80020cc <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <md_rcc_get_sysclk+0x38>)
 80020c0:	e004      	b.n	80020cc <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 80020c2:	f000 f947 	bl	8002354 <rcc_calculate_pll_sysclk>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e000      	b.n	80020cc <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 80020de:	f7ff ffdd 	bl	800209c <md_rcc_get_sysclk>
 80020e2:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 80020e4:	f000 f856 	bl	8002194 <rcc_get_ahb_prescaler>
 80020e8:	4603      	mov	r3, r0
 80020ea:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 8002106:	f7ff ffe7 	bl	80020d8 <md_rcc_get_hclk>
 800210a:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f896 	bl	8002240 <rcc_get_apb_prescaler>
 8002114:	4603      	mov	r3, r0
 8002116:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 800212e:	2002      	movs	r0, #2
 8002130:	f7ff ffe4 	bl	80020fc <md_rcc_get_pclk>
 8002134:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 8002136:	f000 f94b 	bl	80023d0 <rcc_get_adc_prescaler>
 800213a:	4603      	mov	r3, r0
 800213c:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 8002156:	f7ff ffa1 	bl	800209c <md_rcc_get_sysclk>
 800215a:	4602      	mov	r2, r0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8002160:	f7ff ffba 	bl	80020d8 <md_rcc_get_hclk>
 8002164:	4602      	mov	r2, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff ffc6 	bl	80020fc <md_rcc_get_pclk>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 8002176:	2002      	movs	r0, #2
 8002178:	f7ff ffc0 	bl	80020fc <md_rcc_get_pclk>
 800217c:	4602      	mov	r2, r0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 8002182:	f7ff ffd1 	bl	8002128 <md_rcc_get_adcclk>
 8002186:	4602      	mov	r2, r0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]

  return;
 800218c:	bf00      	nop
}
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <rcc_get_ahb_prescaler+0xa8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d83f      	bhi.n	800222e <rcc_get_ahb_prescaler+0x9a>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <rcc_get_ahb_prescaler+0x20>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	080021f5 	.word	0x080021f5
 80021b8:	0800222f 	.word	0x0800222f
 80021bc:	0800222f 	.word	0x0800222f
 80021c0:	0800222f 	.word	0x0800222f
 80021c4:	0800222f 	.word	0x0800222f
 80021c8:	0800222f 	.word	0x0800222f
 80021cc:	0800222f 	.word	0x0800222f
 80021d0:	0800222f 	.word	0x0800222f
 80021d4:	080021fb 	.word	0x080021fb
 80021d8:	08002201 	.word	0x08002201
 80021dc:	08002207 	.word	0x08002207
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	08002213 	.word	0x08002213
 80021e8:	08002219 	.word	0x08002219
 80021ec:	0800221f 	.word	0x0800221f
 80021f0:	08002227 	.word	0x08002227
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
      break;
 80021f8:	e019      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 80021fa:	2302      	movs	r3, #2
 80021fc:	607b      	str	r3, [r7, #4]
      break;
 80021fe:	e016      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 8002200:	2304      	movs	r3, #4
 8002202:	607b      	str	r3, [r7, #4]
      break;
 8002204:	e013      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 8002206:	2308      	movs	r3, #8
 8002208:	607b      	str	r3, [r7, #4]
      break;
 800220a:	e010      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 800220c:	2310      	movs	r3, #16
 800220e:	607b      	str	r3, [r7, #4]
      break;
 8002210:	e00d      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 8002212:	2340      	movs	r3, #64	; 0x40
 8002214:	607b      	str	r3, [r7, #4]
      break;
 8002216:	e00a      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	607b      	str	r3, [r7, #4]
      break;
 800221c:	e007      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 800221e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002222:	607b      	str	r3, [r7, #4]
      break;
 8002224:	e003      	b.n	800222e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	607b      	str	r3, [r7, #4]
      break;
 800222c:	bf00      	nop
  }

  return ahb_prescaler;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	b29b      	uxth	r3, r3
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40021000 	.word	0x40021000

08002240 <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d002      	beq.n	8002256 <rcc_get_apb_prescaler+0x16>
 8002250:	2b02      	cmp	r3, #2
 8002252:	d008      	beq.n	8002266 <rcc_get_apb_prescaler+0x26>
 8002254:	e00f      	b.n	8002276 <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <rcc_get_apb_prescaler+0x90>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	72fb      	strb	r3, [r7, #11]
      break;
 8002264:	e007      	b.n	8002276 <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <rcc_get_apb_prescaler+0x90>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	72fb      	strb	r3, [r7, #11]
      break;
 8002274:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	2b07      	cmp	r3, #7
 800227a:	d822      	bhi.n	80022c2 <rcc_get_apb_prescaler+0x82>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <rcc_get_apb_prescaler+0x44>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	080022a5 	.word	0x080022a5
 8002288:	080022c3 	.word	0x080022c3
 800228c:	080022c3 	.word	0x080022c3
 8002290:	080022c3 	.word	0x080022c3
 8002294:	080022ab 	.word	0x080022ab
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022b7 	.word	0x080022b7
 80022a0:	080022bd 	.word	0x080022bd
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 80022a4:	2301      	movs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      break;
 80022a8:	e00b      	b.n	80022c2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	60fb      	str	r3, [r7, #12]
      break;
 80022ae:	e008      	b.n	80022c2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 80022b0:	2304      	movs	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
      break;
 80022b4:	e005      	b.n	80022c2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 80022b6:	2308      	movs	r3, #8
 80022b8:	60fb      	str	r3, [r7, #12]
      break;
 80022ba:	e002      	b.n	80022c2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 80022bc:	2310      	movs	r3, #16
 80022be:	60fb      	str	r3, [r7, #12]
      break;
 80022c0:	bf00      	nop
  }

  return apb_prescaler;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	b29b      	uxth	r3, r3
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000

080022d4 <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <rcc_get_pll_multiplier+0x7c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c9b      	lsrs	r3, r3, #18
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	3b02      	subs	r3, #2
 80022ec:	2b0b      	cmp	r3, #11
 80022ee:	d829      	bhi.n	8002344 <rcc_get_pll_multiplier+0x70>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <rcc_get_pll_multiplier+0x24>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	08002329 	.word	0x08002329
 80022fc:	0800232d 	.word	0x0800232d
 8002300:	08002331 	.word	0x08002331
 8002304:	08002335 	.word	0x08002335
 8002308:	08002339 	.word	0x08002339
 800230c:	0800233d 	.word	0x0800233d
 8002310:	08002345 	.word	0x08002345
 8002314:	08002345 	.word	0x08002345
 8002318:	08002345 	.word	0x08002345
 800231c:	08002345 	.word	0x08002345
 8002320:	08002345 	.word	0x08002345
 8002324:	08002341 	.word	0x08002341
    case (RCC_PLL1_MUL_X4):
      return 4;
 8002328:	2304      	movs	r3, #4
 800232a:	e00c      	b.n	8002346 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 800232c:	2305      	movs	r3, #5
 800232e:	e00a      	b.n	8002346 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8002330:	2306      	movs	r3, #6
 8002332:	e008      	b.n	8002346 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 8002334:	2307      	movs	r3, #7
 8002336:	e006      	b.n	8002346 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 8002338:	2308      	movs	r3, #8
 800233a:	e004      	b.n	8002346 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 800233c:	2309      	movs	r3, #9
 800233e:	e002      	b.n	8002346 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8002340:	230d      	movs	r3, #13
 8002342:	e000      	b.n	8002346 <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000

08002354 <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 800235a:	f7ff ffbb 	bl	80022d4 <rcc_get_pll_multiplier>
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <rcc_calculate_pll_sysclk+0x70>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 8002376:	2302      	movs	r3, #2
 8002378:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <rcc_calculate_pll_sysclk+0x70>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <rcc_calculate_pll_sysclk+0x3a>
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d006      	beq.n	800239a <rcc_calculate_pll_sysclk+0x46>
 800238c:	e00e      	b.n	80023ac <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <rcc_calculate_pll_sysclk+0x74>)
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	60bb      	str	r3, [r7, #8]
      break;
 8002398:	e008      	b.n	80023ac <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <rcc_calculate_pll_sysclk+0x78>)
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	60bb      	str	r3, [r7, #8]
      break;
 80023aa:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	2b0d      	cmp	r3, #13
 80023b0:	d102      	bne.n	80023b8 <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 80023b8:	68bb      	ldr	r3, [r7, #8]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	003d0900 	.word	0x003d0900
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <rcc_get_adc_prescaler+0x4c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0b9b      	lsrs	r3, r3, #14
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d812      	bhi.n	8002410 <rcc_get_adc_prescaler+0x40>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <rcc_get_adc_prescaler+0x20>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002401 	.word	0x08002401
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240d 	.word	0x0800240d
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 8002400:	2302      	movs	r3, #2
 8002402:	e006      	b.n	8002412 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 8002404:	2304      	movs	r3, #4
 8002406:	e004      	b.n	8002412 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 8002408:	2306      	movs	r3, #6
 800240a:	e002      	b.n	8002412 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 800240c:	2308      	movs	r3, #8
 800240e:	e000      	b.n	8002412 <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 8002410:	2300      	movs	r3, #0

}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000

08002420 <md_spi_init>:
 * Init handlers gpio and clock
 * @param[*p_hSPIx] - can struct handler @spi_handler
 * @return - void
 */
void md_spi_init(spi_handle_t *p_hSPIx)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  spi_init_handlers();
 8002428:	f000 f922 	bl	8002670 <spi_init_handlers>
  spi_init_clock(p_hSPIx);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f93b 	bl	80026a8 <spi_init_clock>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <md_spi_init_basic>:
 * @param[spi_config] - basic configuration to work as master/slave full duplex
 * mode
 * @return - void
 */
void md_spi_init_basic(spi_handle_t *p_hSPIx, spi_config_t spi_config)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	e883 0006 	stmia.w	r3, {r1, r2}
  // init pins
  spi_init_gpio(p_hSPIx, spi_config);
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f94e 	bl	80026f0 <spi_init_gpio>

  // clock phase
  if (spi_config.clock_second_edge_capture == true)
 8002454:	7abb      	ldrb	r3, [r7, #10]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <md_spi_init_basic+0x32>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPHA);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e007      	b.n	800247c <md_spi_init_basic+0x42>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPHA);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    }

  // clock polarity
  if (spi_config.clock_1_when_idle == true)
 800247c:	7a7b      	ldrb	r3, [r7, #9]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <md_spi_init_basic+0x5a>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPOL);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0202 	orr.w	r2, r2, #2
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <md_spi_init_basic+0x6a>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPOL);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0202 	bic.w	r2, r2, #2
 80024a2:	601a      	str	r2, [r3, #0]
    }

  // data format
  if (spi_config.data_format_16bit == true)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <md_spi_init_basic+0x82>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_DFF);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e007      	b.n	80024cc <md_spi_init_basic+0x92>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_DFF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]
    }

  // full duplex
  if (spi_config.full_duplex == true)
 80024cc:	797b      	ldrb	r3, [r7, #5]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00f      	beq.n	80024f2 <md_spi_init_basic+0xb8>
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_RXONLY);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e0:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_BIDIMODE);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f0:	601a      	str	r2, [r3, #0]
    {
      //!!! ADD SIMPELX !!!
    }

  // lsb/msb first
  if (spi_config.lsb_first == true)
 80024f2:	7a3b      	ldrb	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <md_spi_init_basic+0xd0>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_LSBFIRST);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e007      	b.n	800251a <md_spi_init_basic+0xe0>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_LSBFIRST);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002518:	601a      	str	r2, [r3, #0]
    }

  // nss manangement
  if (spi_config.software_nss_management)
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <md_spi_init_basic+0x108>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252e:	601a      	str	r2, [r3, #0]
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSI);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e007      	b.n	8002552 <md_spi_init_basic+0x118>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
    }

  // master mode
  if (spi_config.master_mode == true)
 8002552:	793b      	ldrb	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <md_spi_init_basic+0x130>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_MSTR);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <md_spi_init_basic+0x140>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_MSTR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0204 	bic.w	r2, r2, #4
 8002578:	601a      	str	r2, [r3, #0]
    }

  // prescaler
  p_hSPIx->p_SPIx->CR1 &= ~(SPI_CR1_BR_Msk);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002588:	601a      	str	r2, [r3, #0]
  p_hSPIx->p_SPIx->CR1 |= (spi_config.prescaler << SPI_CR1_BR_Pos);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4619      	mov	r1, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ac:	601a      	str	r2, [r3, #0]

  return;
 80025ae:	bf00      	nop
}
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <md_spi_tx_polling>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - void
 */
spi_error_t md_spi_tx_polling(spi_handle_t *p_hSPIx, uint8_t *p_data_buffer,
                              uint16_t data_lenght, uint32_t timeout_ms)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  uint32_t time_tick;
  uint16_t data_counter = data_lenght;
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	82fb      	strh	r3, [r7, #22]

  // enable SPI
  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d8:	601a      	str	r2, [r3, #0]

  // check if other transfer is not ongoing
  if (p_hSPIx->spi_tx_status != SPI_TX_IDLE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	7b5b      	ldrb	r3, [r3, #13]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <md_spi_tx_polling+0x36>
    {
      p_hSPIx->spi_error = SPI_ERR_TX_COLLISION;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	731a      	strb	r2, [r3, #12]
      return SPI_ERR_TX_COLLISION;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e03d      	b.n	8002668 <md_spi_tx_polling+0xb2>
    }

  // change status of tx line
  p_hSPIx->spi_tx_status = SPI_TX_POLLING;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	735a      	strb	r2, [r3, #13]

  while (data_counter > 0)
 80025f2:	e027      	b.n	8002644 <md_spi_tx_polling+0x8e>
    {
      // waint until transmit buffer is empty
      time_tick = md_systick_get_tick();
 80025f4:	f000 f92e 	bl	8002854 <md_systick_get_tick>
 80025f8:	6138      	str	r0, [r7, #16]
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 80025fa:	e00f      	b.n	800261c <md_spi_tx_polling+0x66>
        {
          if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80025fc:	f000 f92a 	bl	8002854 <md_systick_get_tick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <md_spi_tx_polling+0x66>
            {
              p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2202      	movs	r2, #2
 8002610:	731a      	strb	r2, [r3, #12]
              p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	735a      	strb	r2, [r3, #13]
              return SPI_ERR_TIMEOUT_TXE;
 8002618:	2302      	movs	r3, #2
 800261a:	e025      	b.n	8002668 <md_spi_tx_polling+0xb2>
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0e8      	beq.n	80025fc <md_spi_tx_polling+0x46>
            }
        }

      // put data in data register
      p_hSPIx->p_SPIx->DR = p_data_buffer[data_lenght - data_counter];
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	8afb      	ldrh	r3, [r7, #22]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4413      	add	r3, r2
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60da      	str	r2, [r3, #12]
      data_counter--;
 800263e:	8afb      	ldrh	r3, [r7, #22]
 8002640:	3b01      	subs	r3, #1
 8002642:	82fb      	strh	r3, [r7, #22]
  while (data_counter > 0)
 8002644:	8afb      	ldrh	r3, [r7, #22]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1d4      	bne.n	80025f4 <md_spi_tx_polling+0x3e>
    }

  // wait for last byte transmission
  while (p_hSPIx->p_SPIx->SR & SPI_SR_BSY)
 800264a:	bf00      	nop
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f8      	bne.n	800264c <md_spi_tx_polling+0x96>
    ;

  p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2202      	movs	r2, #2
 800265e:	731a      	strb	r2, [r3, #12]
  p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	735a      	strb	r2, [r3, #13]
  return SPI_ERR_NOERR;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <spi_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
static void spi_init_handlers(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
#if MD_USING_SPI1
  hspi1.p_SPIx = SPI1;
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <spi_init_handlers+0x30>)
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <spi_init_handlers+0x34>)
 8002678:	601a      	str	r2, [r3, #0]
  hspi1.p_tx_buffer = NULL;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <spi_init_handlers+0x30>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  hspi1.tx_buffer_count = 0;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <spi_init_handlers+0x30>)
 8002682:	2200      	movs	r2, #0
 8002684:	80da      	strh	r2, [r3, #6]
  hspi1.spi_error = SPI_ERR_NOERR;
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <spi_init_handlers+0x30>)
 8002688:	2200      	movs	r2, #0
 800268a:	731a      	strb	r2, [r3, #12]
  hspi1.spi_rx_status = SPI_RX_IDLE;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <spi_init_handlers+0x30>)
 800268e:	2200      	movs	r2, #0
 8002690:	739a      	strb	r2, [r3, #14]
  hspi1.spi_tx_status = SPI_TX_IDLE;
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <spi_init_handlers+0x30>)
 8002694:	2200      	movs	r2, #0
 8002696:	735a      	strb	r2, [r3, #13]
#endif // MD_USING_SPI1
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	200000b4 	.word	0x200000b4
 80026a4:	40013000 	.word	0x40013000

080026a8 <spi_init_clock>:
 * Starts clock for SPI and resets the peripheral
 * @param[*p_hSPIx] - spix base address
 * @return - void
 */
static void spi_init_clock(spi_handle_t *p_hSPIx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if (RCC->APB2ENR & RCC_APB2ENR_SPI1EN)
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <spi_init_clock+0x44>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d112      	bne.n	80026e2 <spi_init_clock+0x3a>
    return;

  RCC_CLOCK_ENABLE_SPI1();
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <spi_init_clock+0x44>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <spi_init_clock+0x44>)
 80026c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c6:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <spi_init_clock+0x44>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <spi_init_clock+0x44>)
 80026ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <spi_init_clock+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <spi_init_clock+0x44>)
 80026da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026de:	60d3      	str	r3, [r2, #12]

  return;
 80026e0:	e000      	b.n	80026e4 <spi_init_clock+0x3c>
    return;
 80026e2:	bf00      	nop
}
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000

080026f0 <spi_init_gpio>:
 * Init gpio pins for spi - make sure that GPIO clock is enabled before
 * @param[*p_hSPIx] - spix base address
 * @return - void
 */
static void spi_init_gpio(spi_handle_t *p_hSPIx, spi_config_t spi_config)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	e883 0006 	stmia.w	r3, {r1, r2}
  // master mode
  if (spi_config.master_mode == true)
 80026fe:	793b      	ldrb	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <spi_init_gpio+0x56>
    {
      // SCK - PA5
      md_gpio_configure_output(GPIOA, GPIO_PIN_5, GPIO_SPEED_10MHZ,
 8002704:	2302      	movs	r3, #2
 8002706:	2201      	movs	r2, #1
 8002708:	2105      	movs	r1, #5
 800270a:	4820      	ldr	r0, [pc, #128]	; (800278c <spi_init_gpio+0x9c>)
 800270c:	f7ff f91e 	bl	800194c <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (spi_config.full_duplex == true)
 8002710:	797b      	ldrb	r3, [r7, #5]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <spi_init_gpio+0x30>
        {
          // MISO - PA6 // REMAP PB4
          md_gpio_configure_input(GPIOA, GPIO_PIN_6, GPIO_INPUT_PULLUP);
 8002716:	2202      	movs	r2, #2
 8002718:	2106      	movs	r1, #6
 800271a:	481c      	ldr	r0, [pc, #112]	; (800278c <spi_init_gpio+0x9c>)
 800271c:	f7ff f971 	bl	8001a02 <md_gpio_configure_input>
        }

      // MOSI PA7 // REMAP PB5
      md_gpio_configure_output(GPIOA, GPIO_PIN_7, GPIO_SPEED_10MHZ,
 8002720:	2302      	movs	r3, #2
 8002722:	2201      	movs	r2, #1
 8002724:	2107      	movs	r1, #7
 8002726:	4819      	ldr	r0, [pc, #100]	; (800278c <spi_init_gpio+0x9c>)
 8002728:	f7ff f910 	bl	800194c <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (spi_config.software_nss_management == false)
 800272c:	79bb      	ldrb	r3, [r7, #6]
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d024      	beq.n	8002782 <spi_init_gpio+0x92>
        {
          // NSS - PA4
          md_gpio_configure_output(GPIOA, GPIO_PIN_4, GPIO_SPEED_50MHZ,
 8002738:	2302      	movs	r3, #2
 800273a:	2203      	movs	r2, #3
 800273c:	2104      	movs	r1, #4
 800273e:	4813      	ldr	r0, [pc, #76]	; (800278c <spi_init_gpio+0x9c>)
 8002740:	f7ff f904 	bl	800194c <md_gpio_configure_output>
        {
          // NSS - PA4
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
        }
    }
}
 8002744:	e01d      	b.n	8002782 <spi_init_gpio+0x92>
      md_gpio_configure_input(GPIOA, GPIO_PIN_5, GPIO_INPUT_FLOATING);
 8002746:	2201      	movs	r2, #1
 8002748:	2105      	movs	r1, #5
 800274a:	4810      	ldr	r0, [pc, #64]	; (800278c <spi_init_gpio+0x9c>)
 800274c:	f7ff f959 	bl	8001a02 <md_gpio_configure_input>
      if (spi_config.full_duplex == true)
 8002750:	797b      	ldrb	r3, [r7, #5]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <spi_init_gpio+0x70>
          md_gpio_configure_input(GPIOA, GPIO_PIN_7, GPIO_INPUT_PULLUP);
 8002756:	2202      	movs	r2, #2
 8002758:	2107      	movs	r1, #7
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <spi_init_gpio+0x9c>)
 800275c:	f7ff f951 	bl	8001a02 <md_gpio_configure_input>
      md_gpio_configure_output(GPIOA, GPIO_PIN_6, GPIO_SPEED_10MHZ,
 8002760:	2302      	movs	r3, #2
 8002762:	2201      	movs	r2, #1
 8002764:	2106      	movs	r1, #6
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <spi_init_gpio+0x9c>)
 8002768:	f7ff f8f0 	bl	800194c <md_gpio_configure_output>
      if (spi_config.software_nss_management == false)
 800276c:	79bb      	ldrb	r3, [r7, #6]
 800276e:	f083 0301 	eor.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <spi_init_gpio+0x92>
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
 8002778:	2202      	movs	r2, #2
 800277a:	2104      	movs	r1, #4
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <spi_init_gpio+0x9c>)
 800277e:	f7ff f940 	bl	8001a02 <md_gpio_configure_input>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40010800 	.word	0x40010800

08002790 <__NVIC_SetPriority>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ffc2 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fc8c 	bl	800214e <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <md_systick_configure_ms+0x28>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ffcf 	bl	80027e4 <SysTick_Config>

  return;
 8002846:	bf00      	nop
}
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
 8002858:	4b02      	ldr	r3, [pc, #8]	; (8002864 <md_systick_get_tick+0x10>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000084 	.word	0x20000084

08002868 <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 8002870:	f7ff fff0 	bl	8002854 <md_systick_get_tick>
 8002874:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 8002876:	bf00      	nop
 8002878:	f7ff ffec 	bl	8002854 <md_systick_get_tick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <md_systick_delay+0x10>
    ;
  return;
 8002888:	bf00      	nop
}
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Handler+0x18>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <SysTick_Handler+0x18>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000084 	.word	0x20000084

080028ac <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	88da      	ldrh	r2, [r3, #6]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	889b      	ldrh	r3, [r3, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d20f      	bcs.n	80028f2 <usart_txe_callback+0x34>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	88d2      	ldrh	r2, [r2, #6]
 80028da:	4413      	add	r3, r2
 80028dc:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	88db      	ldrh	r3, [r3, #6]
 80028e8:	3301      	adds	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	80da      	strh	r2, [r3, #6]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 80028f0:	e00b      	b.n	800290a <usart_txe_callback+0x4c>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002900:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	735a      	strb	r2, [r3, #13]
  return;
 8002908:	bf00      	nop
}
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7b5b      	ldrb	r3, [r3, #13]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d105      	bne.n	800293c <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ffbb 	bl	80028ac <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffc1 	bl	80028be <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d019      	beq.n	800297e <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	88da      	ldrh	r2, [r3, #6]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	889b      	ldrh	r3, [r3, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d10a      	bne.n	800296c <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f906 	bl	8000b68 <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296a:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297a:	60da      	str	r2, [r3, #12]
    }

  return;
 800297c:	bf00      	nop
 800297e:	bf00      	nop
}
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <USART1_IRQHandler+0x10>)
 800298e:	f7ff ffc0 	bl	8002912 <usart_main_callback>
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200000d4 	.word	0x200000d4

0800299c <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <USART2_IRQHandler+0x10>)
 80029a2:	f7ff ffb6 	bl	8002912 <usart_main_callback>
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200000c4 	.word	0x200000c4

080029b0 <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
//  example_usart_send_irq_2usarts();

  /* CAN EXAMPLES */
//  example_can_init();
//  example_can_send_data();
  example_can_recieve_data();
 80029b4:	f7fd ff42 	bl	800083c <example_can_recieve_data>
//  example_spi_transfer_tft();

  /* ADC EXAMPLES */
//  example_adc_init();

  for (;;)
 80029b8:	e7fe      	b.n	80029b8 <main+0x8>
	...

080029bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <_sbrk+0x5c>)
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <_sbrk+0x60>)
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <_sbrk+0x64>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <_sbrk+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ec:	f000 f84c 	bl	8002a88 <__errno>
 80029f0:	4603      	mov	r3, r0
 80029f2:	220c      	movs	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e009      	b.n	8002a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <_sbrk+0x64>)
 8002a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20002800 	.word	0x20002800
 8002a1c:	00000400 	.word	0x00000400
 8002a20:	20000088 	.word	0x20000088
 8002a24:	200000f8 	.word	0x200000f8

08002a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a38:	f7ff fff6 	bl	8002a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a3c:	480c      	ldr	r0, [pc, #48]	; (8002a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3e:	490d      	ldr	r1, [pc, #52]	; (8002a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <LoopForever+0xe>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a54:	4c0a      	ldr	r4, [pc, #40]	; (8002a80 <LoopForever+0x16>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a62:	f000 f817 	bl	8002a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a66:	f7ff ffa3 	bl	80029b0 <main>

08002a6a <LoopForever>:

LoopForever:
    b LoopForever
 8002a6a:	e7fe      	b.n	8002a6a <LoopForever>
  ldr   r0, =_estack
 8002a6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002a78:	0800363c 	.word	0x0800363c
  ldr r2, =_sbss
 8002a7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002a80:	200000f4 	.word	0x200000f4

08002a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a84:	e7fe      	b.n	8002a84 <ADC1_2_IRQHandler>
	...

08002a88 <__errno>:
 8002a88:	4b01      	ldr	r3, [pc, #4]	; (8002a90 <__errno+0x8>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000004 	.word	0x20000004

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	2600      	movs	r6, #0
 8002a98:	4d0c      	ldr	r5, [pc, #48]	; (8002acc <__libc_init_array+0x38>)
 8002a9a:	4c0d      	ldr	r4, [pc, #52]	; (8002ad0 <__libc_init_array+0x3c>)
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	f000 fc54 	bl	8003350 <_init>
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	4d0a      	ldr	r5, [pc, #40]	; (8002ad4 <__libc_init_array+0x40>)
 8002aac:	4c0a      	ldr	r4, [pc, #40]	; (8002ad8 <__libc_init_array+0x44>)
 8002aae:	1b64      	subs	r4, r4, r5
 8002ab0:	10a4      	asrs	r4, r4, #2
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	08003634 	.word	0x08003634
 8002ad0:	08003634 	.word	0x08003634
 8002ad4:	08003634 	.word	0x08003634
 8002ad8:	08003638 	.word	0x08003638

08002adc <siprintf>:
 8002adc:	b40e      	push	{r1, r2, r3}
 8002ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ae2:	b500      	push	{lr}
 8002ae4:	b09c      	sub	sp, #112	; 0x70
 8002ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ae8:	9002      	str	r0, [sp, #8]
 8002aea:	9006      	str	r0, [sp, #24]
 8002aec:	9107      	str	r1, [sp, #28]
 8002aee:	9104      	str	r1, [sp, #16]
 8002af0:	4808      	ldr	r0, [pc, #32]	; (8002b14 <siprintf+0x38>)
 8002af2:	4909      	ldr	r1, [pc, #36]	; (8002b18 <siprintf+0x3c>)
 8002af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002af8:	9105      	str	r1, [sp, #20]
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	a902      	add	r1, sp, #8
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f000 f868 	bl	8002bd4 <_svfiprintf_r>
 8002b04:	2200      	movs	r2, #0
 8002b06:	9b02      	ldr	r3, [sp, #8]
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	b01c      	add	sp, #112	; 0x70
 8002b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b10:	b003      	add	sp, #12
 8002b12:	4770      	bx	lr
 8002b14:	20000004 	.word	0x20000004
 8002b18:	ffff0208 	.word	0xffff0208

08002b1c <__ssputs_r>:
 8002b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b20:	688e      	ldr	r6, [r1, #8]
 8002b22:	4682      	mov	sl, r0
 8002b24:	429e      	cmp	r6, r3
 8002b26:	460c      	mov	r4, r1
 8002b28:	4690      	mov	r8, r2
 8002b2a:	461f      	mov	r7, r3
 8002b2c:	d838      	bhi.n	8002ba0 <__ssputs_r+0x84>
 8002b2e:	898a      	ldrh	r2, [r1, #12]
 8002b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b34:	d032      	beq.n	8002b9c <__ssputs_r+0x80>
 8002b36:	6825      	ldr	r5, [r4, #0]
 8002b38:	6909      	ldr	r1, [r1, #16]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	eba5 0901 	sub.w	r9, r5, r1
 8002b40:	6965      	ldr	r5, [r4, #20]
 8002b42:	444b      	add	r3, r9
 8002b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b4c:	106d      	asrs	r5, r5, #1
 8002b4e:	429d      	cmp	r5, r3
 8002b50:	bf38      	it	cc
 8002b52:	461d      	movcc	r5, r3
 8002b54:	0553      	lsls	r3, r2, #21
 8002b56:	d531      	bpl.n	8002bbc <__ssputs_r+0xa0>
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f000 fb53 	bl	8003204 <_malloc_r>
 8002b5e:	4606      	mov	r6, r0
 8002b60:	b950      	cbnz	r0, 8002b78 <__ssputs_r+0x5c>
 8002b62:	230c      	movs	r3, #12
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f8ca 3000 	str.w	r3, [sl]
 8002b6c:	89a3      	ldrh	r3, [r4, #12]
 8002b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b72:	81a3      	strh	r3, [r4, #12]
 8002b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b78:	464a      	mov	r2, r9
 8002b7a:	6921      	ldr	r1, [r4, #16]
 8002b7c:	f000 face 	bl	800311c <memcpy>
 8002b80:	89a3      	ldrh	r3, [r4, #12]
 8002b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8a:	81a3      	strh	r3, [r4, #12]
 8002b8c:	6126      	str	r6, [r4, #16]
 8002b8e:	444e      	add	r6, r9
 8002b90:	6026      	str	r6, [r4, #0]
 8002b92:	463e      	mov	r6, r7
 8002b94:	6165      	str	r5, [r4, #20]
 8002b96:	eba5 0509 	sub.w	r5, r5, r9
 8002b9a:	60a5      	str	r5, [r4, #8]
 8002b9c:	42be      	cmp	r6, r7
 8002b9e:	d900      	bls.n	8002ba2 <__ssputs_r+0x86>
 8002ba0:	463e      	mov	r6, r7
 8002ba2:	4632      	mov	r2, r6
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	f000 fac6 	bl	8003138 <memmove>
 8002bac:	68a3      	ldr	r3, [r4, #8]
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	1b9b      	subs	r3, r3, r6
 8002bb2:	4432      	add	r2, r6
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	60a3      	str	r3, [r4, #8]
 8002bb8:	6022      	str	r2, [r4, #0]
 8002bba:	e7db      	b.n	8002b74 <__ssputs_r+0x58>
 8002bbc:	462a      	mov	r2, r5
 8002bbe:	f000 fb7b 	bl	80032b8 <_realloc_r>
 8002bc2:	4606      	mov	r6, r0
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d1e1      	bne.n	8002b8c <__ssputs_r+0x70>
 8002bc8:	4650      	mov	r0, sl
 8002bca:	6921      	ldr	r1, [r4, #16]
 8002bcc:	f000 face 	bl	800316c <_free_r>
 8002bd0:	e7c7      	b.n	8002b62 <__ssputs_r+0x46>
	...

08002bd4 <_svfiprintf_r>:
 8002bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd8:	4698      	mov	r8, r3
 8002bda:	898b      	ldrh	r3, [r1, #12]
 8002bdc:	4607      	mov	r7, r0
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	460d      	mov	r5, r1
 8002be2:	4614      	mov	r4, r2
 8002be4:	b09d      	sub	sp, #116	; 0x74
 8002be6:	d50e      	bpl.n	8002c06 <_svfiprintf_r+0x32>
 8002be8:	690b      	ldr	r3, [r1, #16]
 8002bea:	b963      	cbnz	r3, 8002c06 <_svfiprintf_r+0x32>
 8002bec:	2140      	movs	r1, #64	; 0x40
 8002bee:	f000 fb09 	bl	8003204 <_malloc_r>
 8002bf2:	6028      	str	r0, [r5, #0]
 8002bf4:	6128      	str	r0, [r5, #16]
 8002bf6:	b920      	cbnz	r0, 8002c02 <_svfiprintf_r+0x2e>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	e0d1      	b.n	8002da6 <_svfiprintf_r+0x1d2>
 8002c02:	2340      	movs	r3, #64	; 0x40
 8002c04:	616b      	str	r3, [r5, #20]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c10:	2330      	movs	r3, #48	; 0x30
 8002c12:	f04f 0901 	mov.w	r9, #1
 8002c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002dc0 <_svfiprintf_r+0x1ec>
 8002c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c22:	4623      	mov	r3, r4
 8002c24:	469a      	mov	sl, r3
 8002c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c2a:	b10a      	cbz	r2, 8002c30 <_svfiprintf_r+0x5c>
 8002c2c:	2a25      	cmp	r2, #37	; 0x25
 8002c2e:	d1f9      	bne.n	8002c24 <_svfiprintf_r+0x50>
 8002c30:	ebba 0b04 	subs.w	fp, sl, r4
 8002c34:	d00b      	beq.n	8002c4e <_svfiprintf_r+0x7a>
 8002c36:	465b      	mov	r3, fp
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	f7ff ff6d 	bl	8002b1c <__ssputs_r>
 8002c42:	3001      	adds	r0, #1
 8002c44:	f000 80aa 	beq.w	8002d9c <_svfiprintf_r+0x1c8>
 8002c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c4a:	445a      	add	r2, fp
 8002c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80a2 	beq.w	8002d9c <_svfiprintf_r+0x1c8>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c62:	f10a 0a01 	add.w	sl, sl, #1
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	9307      	str	r3, [sp, #28]
 8002c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8002c70:	4654      	mov	r4, sl
 8002c72:	2205      	movs	r2, #5
 8002c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c78:	4851      	ldr	r0, [pc, #324]	; (8002dc0 <_svfiprintf_r+0x1ec>)
 8002c7a:	f000 fa41 	bl	8003100 <memchr>
 8002c7e:	9a04      	ldr	r2, [sp, #16]
 8002c80:	b9d8      	cbnz	r0, 8002cba <_svfiprintf_r+0xe6>
 8002c82:	06d0      	lsls	r0, r2, #27
 8002c84:	bf44      	itt	mi
 8002c86:	2320      	movmi	r3, #32
 8002c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c8c:	0711      	lsls	r1, r2, #28
 8002c8e:	bf44      	itt	mi
 8002c90:	232b      	movmi	r3, #43	; 0x2b
 8002c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c96:	f89a 3000 	ldrb.w	r3, [sl]
 8002c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c9c:	d015      	beq.n	8002cca <_svfiprintf_r+0xf6>
 8002c9e:	4654      	mov	r4, sl
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f04f 0c0a 	mov.w	ip, #10
 8002ca6:	9a07      	ldr	r2, [sp, #28]
 8002ca8:	4621      	mov	r1, r4
 8002caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cae:	3b30      	subs	r3, #48	; 0x30
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d94e      	bls.n	8002d52 <_svfiprintf_r+0x17e>
 8002cb4:	b1b0      	cbz	r0, 8002ce4 <_svfiprintf_r+0x110>
 8002cb6:	9207      	str	r2, [sp, #28]
 8002cb8:	e014      	b.n	8002ce4 <_svfiprintf_r+0x110>
 8002cba:	eba0 0308 	sub.w	r3, r0, r8
 8002cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	46a2      	mov	sl, r4
 8002cc6:	9304      	str	r3, [sp, #16]
 8002cc8:	e7d2      	b.n	8002c70 <_svfiprintf_r+0x9c>
 8002cca:	9b03      	ldr	r3, [sp, #12]
 8002ccc:	1d19      	adds	r1, r3, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	9103      	str	r1, [sp, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bfbb      	ittet	lt
 8002cd6:	425b      	neglt	r3, r3
 8002cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8002cdc:	9307      	strge	r3, [sp, #28]
 8002cde:	9307      	strlt	r3, [sp, #28]
 8002ce0:	bfb8      	it	lt
 8002ce2:	9204      	strlt	r2, [sp, #16]
 8002ce4:	7823      	ldrb	r3, [r4, #0]
 8002ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce8:	d10c      	bne.n	8002d04 <_svfiprintf_r+0x130>
 8002cea:	7863      	ldrb	r3, [r4, #1]
 8002cec:	2b2a      	cmp	r3, #42	; 0x2a
 8002cee:	d135      	bne.n	8002d5c <_svfiprintf_r+0x188>
 8002cf0:	9b03      	ldr	r3, [sp, #12]
 8002cf2:	3402      	adds	r4, #2
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	9203      	str	r2, [sp, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfb8      	it	lt
 8002cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d02:	9305      	str	r3, [sp, #20]
 8002d04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002dd0 <_svfiprintf_r+0x1fc>
 8002d08:	2203      	movs	r2, #3
 8002d0a:	4650      	mov	r0, sl
 8002d0c:	7821      	ldrb	r1, [r4, #0]
 8002d0e:	f000 f9f7 	bl	8003100 <memchr>
 8002d12:	b140      	cbz	r0, 8002d26 <_svfiprintf_r+0x152>
 8002d14:	2340      	movs	r3, #64	; 0x40
 8002d16:	eba0 000a 	sub.w	r0, r0, sl
 8002d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d1e:	9b04      	ldr	r3, [sp, #16]
 8002d20:	3401      	adds	r4, #1
 8002d22:	4303      	orrs	r3, r0
 8002d24:	9304      	str	r3, [sp, #16]
 8002d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2a:	2206      	movs	r2, #6
 8002d2c:	4825      	ldr	r0, [pc, #148]	; (8002dc4 <_svfiprintf_r+0x1f0>)
 8002d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d32:	f000 f9e5 	bl	8003100 <memchr>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d038      	beq.n	8002dac <_svfiprintf_r+0x1d8>
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <_svfiprintf_r+0x1f4>)
 8002d3c:	bb1b      	cbnz	r3, 8002d86 <_svfiprintf_r+0x1b2>
 8002d3e:	9b03      	ldr	r3, [sp, #12]
 8002d40:	3307      	adds	r3, #7
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	3308      	adds	r3, #8
 8002d48:	9303      	str	r3, [sp, #12]
 8002d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d4c:	4433      	add	r3, r6
 8002d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d50:	e767      	b.n	8002c22 <_svfiprintf_r+0x4e>
 8002d52:	460c      	mov	r4, r1
 8002d54:	2001      	movs	r0, #1
 8002d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d5a:	e7a5      	b.n	8002ca8 <_svfiprintf_r+0xd4>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f04f 0c0a 	mov.w	ip, #10
 8002d62:	4619      	mov	r1, r3
 8002d64:	3401      	adds	r4, #1
 8002d66:	9305      	str	r3, [sp, #20]
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d6e:	3a30      	subs	r2, #48	; 0x30
 8002d70:	2a09      	cmp	r2, #9
 8002d72:	d903      	bls.n	8002d7c <_svfiprintf_r+0x1a8>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0c5      	beq.n	8002d04 <_svfiprintf_r+0x130>
 8002d78:	9105      	str	r1, [sp, #20]
 8002d7a:	e7c3      	b.n	8002d04 <_svfiprintf_r+0x130>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	2301      	movs	r3, #1
 8002d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d84:	e7f0      	b.n	8002d68 <_svfiprintf_r+0x194>
 8002d86:	ab03      	add	r3, sp, #12
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	462a      	mov	r2, r5
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <_svfiprintf_r+0x1f8>)
 8002d90:	a904      	add	r1, sp, #16
 8002d92:	f3af 8000 	nop.w
 8002d96:	1c42      	adds	r2, r0, #1
 8002d98:	4606      	mov	r6, r0
 8002d9a:	d1d6      	bne.n	8002d4a <_svfiprintf_r+0x176>
 8002d9c:	89ab      	ldrh	r3, [r5, #12]
 8002d9e:	065b      	lsls	r3, r3, #25
 8002da0:	f53f af2c 	bmi.w	8002bfc <_svfiprintf_r+0x28>
 8002da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002da6:	b01d      	add	sp, #116	; 0x74
 8002da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dac:	ab03      	add	r3, sp, #12
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	462a      	mov	r2, r5
 8002db2:	4638      	mov	r0, r7
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <_svfiprintf_r+0x1f8>)
 8002db6:	a904      	add	r1, sp, #16
 8002db8:	f000 f87c 	bl	8002eb4 <_printf_i>
 8002dbc:	e7eb      	b.n	8002d96 <_svfiprintf_r+0x1c2>
 8002dbe:	bf00      	nop
 8002dc0:	08003601 	.word	0x08003601
 8002dc4:	0800360b 	.word	0x0800360b
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	08002b1d 	.word	0x08002b1d
 8002dd0:	08003607 	.word	0x08003607

08002dd4 <_printf_common>:
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	4616      	mov	r6, r2
 8002dda:	4699      	mov	r9, r3
 8002ddc:	688a      	ldr	r2, [r1, #8]
 8002dde:	690b      	ldr	r3, [r1, #16]
 8002de0:	4607      	mov	r7, r0
 8002de2:	4293      	cmp	r3, r2
 8002de4:	bfb8      	it	lt
 8002de6:	4613      	movlt	r3, r2
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dee:	460c      	mov	r4, r1
 8002df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df4:	b10a      	cbz	r2, 8002dfa <_printf_common+0x26>
 8002df6:	3301      	adds	r3, #1
 8002df8:	6033      	str	r3, [r6, #0]
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	0699      	lsls	r1, r3, #26
 8002dfe:	bf42      	ittt	mi
 8002e00:	6833      	ldrmi	r3, [r6, #0]
 8002e02:	3302      	addmi	r3, #2
 8002e04:	6033      	strmi	r3, [r6, #0]
 8002e06:	6825      	ldr	r5, [r4, #0]
 8002e08:	f015 0506 	ands.w	r5, r5, #6
 8002e0c:	d106      	bne.n	8002e1c <_printf_common+0x48>
 8002e0e:	f104 0a19 	add.w	sl, r4, #25
 8002e12:	68e3      	ldr	r3, [r4, #12]
 8002e14:	6832      	ldr	r2, [r6, #0]
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	42ab      	cmp	r3, r5
 8002e1a:	dc28      	bgt.n	8002e6e <_printf_common+0x9a>
 8002e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e20:	1e13      	subs	r3, r2, #0
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	bf18      	it	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	0692      	lsls	r2, r2, #26
 8002e2a:	d42d      	bmi.n	8002e88 <_printf_common+0xb4>
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e34:	47c0      	blx	r8
 8002e36:	3001      	adds	r0, #1
 8002e38:	d020      	beq.n	8002e7c <_printf_common+0xa8>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	68e5      	ldr	r5, [r4, #12]
 8002e3e:	f003 0306 	and.w	r3, r3, #6
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf18      	it	ne
 8002e46:	2500      	movne	r5, #0
 8002e48:	6832      	ldr	r2, [r6, #0]
 8002e4a:	f04f 0600 	mov.w	r6, #0
 8002e4e:	68a3      	ldr	r3, [r4, #8]
 8002e50:	bf08      	it	eq
 8002e52:	1aad      	subeq	r5, r5, r2
 8002e54:	6922      	ldr	r2, [r4, #16]
 8002e56:	bf08      	it	eq
 8002e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	bfc4      	itt	gt
 8002e60:	1a9b      	subgt	r3, r3, r2
 8002e62:	18ed      	addgt	r5, r5, r3
 8002e64:	341a      	adds	r4, #26
 8002e66:	42b5      	cmp	r5, r6
 8002e68:	d11a      	bne.n	8002ea0 <_printf_common+0xcc>
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e008      	b.n	8002e80 <_printf_common+0xac>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	4652      	mov	r2, sl
 8002e72:	4649      	mov	r1, r9
 8002e74:	4638      	mov	r0, r7
 8002e76:	47c0      	blx	r8
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d103      	bne.n	8002e84 <_printf_common+0xb0>
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e84:	3501      	adds	r5, #1
 8002e86:	e7c4      	b.n	8002e12 <_printf_common+0x3e>
 8002e88:	2030      	movs	r0, #48	; 0x30
 8002e8a:	18e1      	adds	r1, r4, r3
 8002e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e96:	4422      	add	r2, r4
 8002e98:	3302      	adds	r3, #2
 8002e9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e9e:	e7c5      	b.n	8002e2c <_printf_common+0x58>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	47c0      	blx	r8
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d0e6      	beq.n	8002e7c <_printf_common+0xa8>
 8002eae:	3601      	adds	r6, #1
 8002eb0:	e7d9      	b.n	8002e66 <_printf_common+0x92>
	...

08002eb4 <_printf_i>:
 8002eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb8:	460c      	mov	r4, r1
 8002eba:	7e27      	ldrb	r7, [r4, #24]
 8002ebc:	4691      	mov	r9, r2
 8002ebe:	2f78      	cmp	r7, #120	; 0x78
 8002ec0:	4680      	mov	r8, r0
 8002ec2:	469a      	mov	sl, r3
 8002ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eca:	d807      	bhi.n	8002edc <_printf_i+0x28>
 8002ecc:	2f62      	cmp	r7, #98	; 0x62
 8002ece:	d80a      	bhi.n	8002ee6 <_printf_i+0x32>
 8002ed0:	2f00      	cmp	r7, #0
 8002ed2:	f000 80d9 	beq.w	8003088 <_printf_i+0x1d4>
 8002ed6:	2f58      	cmp	r7, #88	; 0x58
 8002ed8:	f000 80a4 	beq.w	8003024 <_printf_i+0x170>
 8002edc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ee4:	e03a      	b.n	8002f5c <_printf_i+0xa8>
 8002ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eea:	2b15      	cmp	r3, #21
 8002eec:	d8f6      	bhi.n	8002edc <_printf_i+0x28>
 8002eee:	a001      	add	r0, pc, #4	; (adr r0, 8002ef4 <_printf_i+0x40>)
 8002ef0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ef4:	08002f4d 	.word	0x08002f4d
 8002ef8:	08002f61 	.word	0x08002f61
 8002efc:	08002edd 	.word	0x08002edd
 8002f00:	08002edd 	.word	0x08002edd
 8002f04:	08002edd 	.word	0x08002edd
 8002f08:	08002edd 	.word	0x08002edd
 8002f0c:	08002f61 	.word	0x08002f61
 8002f10:	08002edd 	.word	0x08002edd
 8002f14:	08002edd 	.word	0x08002edd
 8002f18:	08002edd 	.word	0x08002edd
 8002f1c:	08002edd 	.word	0x08002edd
 8002f20:	0800306f 	.word	0x0800306f
 8002f24:	08002f91 	.word	0x08002f91
 8002f28:	08003051 	.word	0x08003051
 8002f2c:	08002edd 	.word	0x08002edd
 8002f30:	08002edd 	.word	0x08002edd
 8002f34:	08003091 	.word	0x08003091
 8002f38:	08002edd 	.word	0x08002edd
 8002f3c:	08002f91 	.word	0x08002f91
 8002f40:	08002edd 	.word	0x08002edd
 8002f44:	08002edd 	.word	0x08002edd
 8002f48:	08003059 	.word	0x08003059
 8002f4c:	680b      	ldr	r3, [r1, #0]
 8002f4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	600a      	str	r2, [r1, #0]
 8002f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0a4      	b.n	80030aa <_printf_i+0x1f6>
 8002f60:	6825      	ldr	r5, [r4, #0]
 8002f62:	6808      	ldr	r0, [r1, #0]
 8002f64:	062e      	lsls	r6, r5, #24
 8002f66:	f100 0304 	add.w	r3, r0, #4
 8002f6a:	d50a      	bpl.n	8002f82 <_printf_i+0xce>
 8002f6c:	6805      	ldr	r5, [r0, #0]
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	da03      	bge.n	8002f7c <_printf_i+0xc8>
 8002f74:	232d      	movs	r3, #45	; 0x2d
 8002f76:	426d      	negs	r5, r5
 8002f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	485e      	ldr	r0, [pc, #376]	; (80030f8 <_printf_i+0x244>)
 8002f80:	e019      	b.n	8002fb6 <_printf_i+0x102>
 8002f82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f86:	6805      	ldr	r5, [r0, #0]
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	bf18      	it	ne
 8002f8c:	b22d      	sxthne	r5, r5
 8002f8e:	e7ef      	b.n	8002f70 <_printf_i+0xbc>
 8002f90:	680b      	ldr	r3, [r1, #0]
 8002f92:	6825      	ldr	r5, [r4, #0]
 8002f94:	1d18      	adds	r0, r3, #4
 8002f96:	6008      	str	r0, [r1, #0]
 8002f98:	0628      	lsls	r0, r5, #24
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_i+0xec>
 8002f9c:	681d      	ldr	r5, [r3, #0]
 8002f9e:	e002      	b.n	8002fa6 <_printf_i+0xf2>
 8002fa0:	0669      	lsls	r1, r5, #25
 8002fa2:	d5fb      	bpl.n	8002f9c <_printf_i+0xe8>
 8002fa4:	881d      	ldrh	r5, [r3, #0]
 8002fa6:	2f6f      	cmp	r7, #111	; 0x6f
 8002fa8:	bf0c      	ite	eq
 8002faa:	2308      	moveq	r3, #8
 8002fac:	230a      	movne	r3, #10
 8002fae:	4852      	ldr	r0, [pc, #328]	; (80030f8 <_printf_i+0x244>)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fb6:	6866      	ldr	r6, [r4, #4]
 8002fb8:	2e00      	cmp	r6, #0
 8002fba:	bfa8      	it	ge
 8002fbc:	6821      	ldrge	r1, [r4, #0]
 8002fbe:	60a6      	str	r6, [r4, #8]
 8002fc0:	bfa4      	itt	ge
 8002fc2:	f021 0104 	bicge.w	r1, r1, #4
 8002fc6:	6021      	strge	r1, [r4, #0]
 8002fc8:	b90d      	cbnz	r5, 8002fce <_printf_i+0x11a>
 8002fca:	2e00      	cmp	r6, #0
 8002fcc:	d04d      	beq.n	800306a <_printf_i+0x1b6>
 8002fce:	4616      	mov	r6, r2
 8002fd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fd4:	fb03 5711 	mls	r7, r3, r1, r5
 8002fd8:	5dc7      	ldrb	r7, [r0, r7]
 8002fda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fde:	462f      	mov	r7, r5
 8002fe0:	42bb      	cmp	r3, r7
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	d9f4      	bls.n	8002fd0 <_printf_i+0x11c>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d10b      	bne.n	8003002 <_printf_i+0x14e>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	07df      	lsls	r7, r3, #31
 8002fee:	d508      	bpl.n	8003002 <_printf_i+0x14e>
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	6861      	ldr	r1, [r4, #4]
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	bfde      	ittt	le
 8002ff8:	2330      	movle	r3, #48	; 0x30
 8002ffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ffe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003002:	1b92      	subs	r2, r2, r6
 8003004:	6122      	str	r2, [r4, #16]
 8003006:	464b      	mov	r3, r9
 8003008:	4621      	mov	r1, r4
 800300a:	4640      	mov	r0, r8
 800300c:	f8cd a000 	str.w	sl, [sp]
 8003010:	aa03      	add	r2, sp, #12
 8003012:	f7ff fedf 	bl	8002dd4 <_printf_common>
 8003016:	3001      	adds	r0, #1
 8003018:	d14c      	bne.n	80030b4 <_printf_i+0x200>
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	b004      	add	sp, #16
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	4834      	ldr	r0, [pc, #208]	; (80030f8 <_printf_i+0x244>)
 8003026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800302a:	680e      	ldr	r6, [r1, #0]
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003032:	061f      	lsls	r7, r3, #24
 8003034:	600e      	str	r6, [r1, #0]
 8003036:	d514      	bpl.n	8003062 <_printf_i+0x1ae>
 8003038:	07d9      	lsls	r1, r3, #31
 800303a:	bf44      	itt	mi
 800303c:	f043 0320 	orrmi.w	r3, r3, #32
 8003040:	6023      	strmi	r3, [r4, #0]
 8003042:	b91d      	cbnz	r5, 800304c <_printf_i+0x198>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f023 0320 	bic.w	r3, r3, #32
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	2310      	movs	r3, #16
 800304e:	e7af      	b.n	8002fb0 <_printf_i+0xfc>
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	f043 0320 	orr.w	r3, r3, #32
 8003056:	6023      	str	r3, [r4, #0]
 8003058:	2378      	movs	r3, #120	; 0x78
 800305a:	4828      	ldr	r0, [pc, #160]	; (80030fc <_printf_i+0x248>)
 800305c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003060:	e7e3      	b.n	800302a <_printf_i+0x176>
 8003062:	065e      	lsls	r6, r3, #25
 8003064:	bf48      	it	mi
 8003066:	b2ad      	uxthmi	r5, r5
 8003068:	e7e6      	b.n	8003038 <_printf_i+0x184>
 800306a:	4616      	mov	r6, r2
 800306c:	e7bb      	b.n	8002fe6 <_printf_i+0x132>
 800306e:	680b      	ldr	r3, [r1, #0]
 8003070:	6826      	ldr	r6, [r4, #0]
 8003072:	1d1d      	adds	r5, r3, #4
 8003074:	6960      	ldr	r0, [r4, #20]
 8003076:	600d      	str	r5, [r1, #0]
 8003078:	0635      	lsls	r5, r6, #24
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	d501      	bpl.n	8003082 <_printf_i+0x1ce>
 800307e:	6018      	str	r0, [r3, #0]
 8003080:	e002      	b.n	8003088 <_printf_i+0x1d4>
 8003082:	0671      	lsls	r1, r6, #25
 8003084:	d5fb      	bpl.n	800307e <_printf_i+0x1ca>
 8003086:	8018      	strh	r0, [r3, #0]
 8003088:	2300      	movs	r3, #0
 800308a:	4616      	mov	r6, r2
 800308c:	6123      	str	r3, [r4, #16]
 800308e:	e7ba      	b.n	8003006 <_printf_i+0x152>
 8003090:	680b      	ldr	r3, [r1, #0]
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	600a      	str	r2, [r1, #0]
 8003096:	681e      	ldr	r6, [r3, #0]
 8003098:	2100      	movs	r1, #0
 800309a:	4630      	mov	r0, r6
 800309c:	6862      	ldr	r2, [r4, #4]
 800309e:	f000 f82f 	bl	8003100 <memchr>
 80030a2:	b108      	cbz	r0, 80030a8 <_printf_i+0x1f4>
 80030a4:	1b80      	subs	r0, r0, r6
 80030a6:	6060      	str	r0, [r4, #4]
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	6123      	str	r3, [r4, #16]
 80030ac:	2300      	movs	r3, #0
 80030ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b2:	e7a8      	b.n	8003006 <_printf_i+0x152>
 80030b4:	4632      	mov	r2, r6
 80030b6:	4649      	mov	r1, r9
 80030b8:	4640      	mov	r0, r8
 80030ba:	6923      	ldr	r3, [r4, #16]
 80030bc:	47d0      	blx	sl
 80030be:	3001      	adds	r0, #1
 80030c0:	d0ab      	beq.n	800301a <_printf_i+0x166>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	079b      	lsls	r3, r3, #30
 80030c6:	d413      	bmi.n	80030f0 <_printf_i+0x23c>
 80030c8:	68e0      	ldr	r0, [r4, #12]
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	4298      	cmp	r0, r3
 80030ce:	bfb8      	it	lt
 80030d0:	4618      	movlt	r0, r3
 80030d2:	e7a4      	b.n	800301e <_printf_i+0x16a>
 80030d4:	2301      	movs	r3, #1
 80030d6:	4632      	mov	r2, r6
 80030d8:	4649      	mov	r1, r9
 80030da:	4640      	mov	r0, r8
 80030dc:	47d0      	blx	sl
 80030de:	3001      	adds	r0, #1
 80030e0:	d09b      	beq.n	800301a <_printf_i+0x166>
 80030e2:	3501      	adds	r5, #1
 80030e4:	68e3      	ldr	r3, [r4, #12]
 80030e6:	9903      	ldr	r1, [sp, #12]
 80030e8:	1a5b      	subs	r3, r3, r1
 80030ea:	42ab      	cmp	r3, r5
 80030ec:	dcf2      	bgt.n	80030d4 <_printf_i+0x220>
 80030ee:	e7eb      	b.n	80030c8 <_printf_i+0x214>
 80030f0:	2500      	movs	r5, #0
 80030f2:	f104 0619 	add.w	r6, r4, #25
 80030f6:	e7f5      	b.n	80030e4 <_printf_i+0x230>
 80030f8:	08003612 	.word	0x08003612
 80030fc:	08003623 	.word	0x08003623

08003100 <memchr>:
 8003100:	4603      	mov	r3, r0
 8003102:	b510      	push	{r4, lr}
 8003104:	b2c9      	uxtb	r1, r1
 8003106:	4402      	add	r2, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	4618      	mov	r0, r3
 800310c:	d101      	bne.n	8003112 <memchr+0x12>
 800310e:	2000      	movs	r0, #0
 8003110:	e003      	b.n	800311a <memchr+0x1a>
 8003112:	7804      	ldrb	r4, [r0, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	428c      	cmp	r4, r1
 8003118:	d1f6      	bne.n	8003108 <memchr+0x8>
 800311a:	bd10      	pop	{r4, pc}

0800311c <memcpy>:
 800311c:	440a      	add	r2, r1
 800311e:	4291      	cmp	r1, r2
 8003120:	f100 33ff 	add.w	r3, r0, #4294967295
 8003124:	d100      	bne.n	8003128 <memcpy+0xc>
 8003126:	4770      	bx	lr
 8003128:	b510      	push	{r4, lr}
 800312a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800312e:	4291      	cmp	r1, r2
 8003130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003134:	d1f9      	bne.n	800312a <memcpy+0xe>
 8003136:	bd10      	pop	{r4, pc}

08003138 <memmove>:
 8003138:	4288      	cmp	r0, r1
 800313a:	b510      	push	{r4, lr}
 800313c:	eb01 0402 	add.w	r4, r1, r2
 8003140:	d902      	bls.n	8003148 <memmove+0x10>
 8003142:	4284      	cmp	r4, r0
 8003144:	4623      	mov	r3, r4
 8003146:	d807      	bhi.n	8003158 <memmove+0x20>
 8003148:	1e43      	subs	r3, r0, #1
 800314a:	42a1      	cmp	r1, r4
 800314c:	d008      	beq.n	8003160 <memmove+0x28>
 800314e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003156:	e7f8      	b.n	800314a <memmove+0x12>
 8003158:	4601      	mov	r1, r0
 800315a:	4402      	add	r2, r0
 800315c:	428a      	cmp	r2, r1
 800315e:	d100      	bne.n	8003162 <memmove+0x2a>
 8003160:	bd10      	pop	{r4, pc}
 8003162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800316a:	e7f7      	b.n	800315c <memmove+0x24>

0800316c <_free_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	4605      	mov	r5, r0
 8003170:	2900      	cmp	r1, #0
 8003172:	d043      	beq.n	80031fc <_free_r+0x90>
 8003174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003178:	1f0c      	subs	r4, r1, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	bfb8      	it	lt
 800317e:	18e4      	addlt	r4, r4, r3
 8003180:	f000 f8d0 	bl	8003324 <__malloc_lock>
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <_free_r+0x94>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	4610      	mov	r0, r2
 800318a:	b933      	cbnz	r3, 800319a <_free_r+0x2e>
 800318c:	6063      	str	r3, [r4, #4]
 800318e:	6014      	str	r4, [r2, #0]
 8003190:	4628      	mov	r0, r5
 8003192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003196:	f000 b8cb 	b.w	8003330 <__malloc_unlock>
 800319a:	42a3      	cmp	r3, r4
 800319c:	d90a      	bls.n	80031b4 <_free_r+0x48>
 800319e:	6821      	ldr	r1, [r4, #0]
 80031a0:	1862      	adds	r2, r4, r1
 80031a2:	4293      	cmp	r3, r2
 80031a4:	bf01      	itttt	eq
 80031a6:	681a      	ldreq	r2, [r3, #0]
 80031a8:	685b      	ldreq	r3, [r3, #4]
 80031aa:	1852      	addeq	r2, r2, r1
 80031ac:	6022      	streq	r2, [r4, #0]
 80031ae:	6063      	str	r3, [r4, #4]
 80031b0:	6004      	str	r4, [r0, #0]
 80031b2:	e7ed      	b.n	8003190 <_free_r+0x24>
 80031b4:	461a      	mov	r2, r3
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	b10b      	cbz	r3, 80031be <_free_r+0x52>
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d9fa      	bls.n	80031b4 <_free_r+0x48>
 80031be:	6811      	ldr	r1, [r2, #0]
 80031c0:	1850      	adds	r0, r2, r1
 80031c2:	42a0      	cmp	r0, r4
 80031c4:	d10b      	bne.n	80031de <_free_r+0x72>
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	4401      	add	r1, r0
 80031ca:	1850      	adds	r0, r2, r1
 80031cc:	4283      	cmp	r3, r0
 80031ce:	6011      	str	r1, [r2, #0]
 80031d0:	d1de      	bne.n	8003190 <_free_r+0x24>
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4401      	add	r1, r0
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	6053      	str	r3, [r2, #4]
 80031dc:	e7d8      	b.n	8003190 <_free_r+0x24>
 80031de:	d902      	bls.n	80031e6 <_free_r+0x7a>
 80031e0:	230c      	movs	r3, #12
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	e7d4      	b.n	8003190 <_free_r+0x24>
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	1821      	adds	r1, r4, r0
 80031ea:	428b      	cmp	r3, r1
 80031ec:	bf01      	itttt	eq
 80031ee:	6819      	ldreq	r1, [r3, #0]
 80031f0:	685b      	ldreq	r3, [r3, #4]
 80031f2:	1809      	addeq	r1, r1, r0
 80031f4:	6021      	streq	r1, [r4, #0]
 80031f6:	6063      	str	r3, [r4, #4]
 80031f8:	6054      	str	r4, [r2, #4]
 80031fa:	e7c9      	b.n	8003190 <_free_r+0x24>
 80031fc:	bd38      	pop	{r3, r4, r5, pc}
 80031fe:	bf00      	nop
 8003200:	2000008c 	.word	0x2000008c

08003204 <_malloc_r>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	1ccd      	adds	r5, r1, #3
 8003208:	f025 0503 	bic.w	r5, r5, #3
 800320c:	3508      	adds	r5, #8
 800320e:	2d0c      	cmp	r5, #12
 8003210:	bf38      	it	cc
 8003212:	250c      	movcc	r5, #12
 8003214:	2d00      	cmp	r5, #0
 8003216:	4606      	mov	r6, r0
 8003218:	db01      	blt.n	800321e <_malloc_r+0x1a>
 800321a:	42a9      	cmp	r1, r5
 800321c:	d903      	bls.n	8003226 <_malloc_r+0x22>
 800321e:	230c      	movs	r3, #12
 8003220:	6033      	str	r3, [r6, #0]
 8003222:	2000      	movs	r0, #0
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003226:	f000 f87d 	bl	8003324 <__malloc_lock>
 800322a:	4921      	ldr	r1, [pc, #132]	; (80032b0 <_malloc_r+0xac>)
 800322c:	680a      	ldr	r2, [r1, #0]
 800322e:	4614      	mov	r4, r2
 8003230:	b99c      	cbnz	r4, 800325a <_malloc_r+0x56>
 8003232:	4f20      	ldr	r7, [pc, #128]	; (80032b4 <_malloc_r+0xb0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b923      	cbnz	r3, 8003242 <_malloc_r+0x3e>
 8003238:	4621      	mov	r1, r4
 800323a:	4630      	mov	r0, r6
 800323c:	f000 f862 	bl	8003304 <_sbrk_r>
 8003240:	6038      	str	r0, [r7, #0]
 8003242:	4629      	mov	r1, r5
 8003244:	4630      	mov	r0, r6
 8003246:	f000 f85d 	bl	8003304 <_sbrk_r>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	d123      	bne.n	8003296 <_malloc_r+0x92>
 800324e:	230c      	movs	r3, #12
 8003250:	4630      	mov	r0, r6
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	f000 f86c 	bl	8003330 <__malloc_unlock>
 8003258:	e7e3      	b.n	8003222 <_malloc_r+0x1e>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	1b5b      	subs	r3, r3, r5
 800325e:	d417      	bmi.n	8003290 <_malloc_r+0x8c>
 8003260:	2b0b      	cmp	r3, #11
 8003262:	d903      	bls.n	800326c <_malloc_r+0x68>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	441c      	add	r4, r3
 8003268:	6025      	str	r5, [r4, #0]
 800326a:	e004      	b.n	8003276 <_malloc_r+0x72>
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	42a2      	cmp	r2, r4
 8003270:	bf0c      	ite	eq
 8003272:	600b      	streq	r3, [r1, #0]
 8003274:	6053      	strne	r3, [r2, #4]
 8003276:	4630      	mov	r0, r6
 8003278:	f000 f85a 	bl	8003330 <__malloc_unlock>
 800327c:	f104 000b 	add.w	r0, r4, #11
 8003280:	1d23      	adds	r3, r4, #4
 8003282:	f020 0007 	bic.w	r0, r0, #7
 8003286:	1ac2      	subs	r2, r0, r3
 8003288:	d0cc      	beq.n	8003224 <_malloc_r+0x20>
 800328a:	1a1b      	subs	r3, r3, r0
 800328c:	50a3      	str	r3, [r4, r2]
 800328e:	e7c9      	b.n	8003224 <_malloc_r+0x20>
 8003290:	4622      	mov	r2, r4
 8003292:	6864      	ldr	r4, [r4, #4]
 8003294:	e7cc      	b.n	8003230 <_malloc_r+0x2c>
 8003296:	1cc4      	adds	r4, r0, #3
 8003298:	f024 0403 	bic.w	r4, r4, #3
 800329c:	42a0      	cmp	r0, r4
 800329e:	d0e3      	beq.n	8003268 <_malloc_r+0x64>
 80032a0:	1a21      	subs	r1, r4, r0
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f82e 	bl	8003304 <_sbrk_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d1dd      	bne.n	8003268 <_malloc_r+0x64>
 80032ac:	e7cf      	b.n	800324e <_malloc_r+0x4a>
 80032ae:	bf00      	nop
 80032b0:	2000008c 	.word	0x2000008c
 80032b4:	20000090 	.word	0x20000090

080032b8 <_realloc_r>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	4607      	mov	r7, r0
 80032bc:	4614      	mov	r4, r2
 80032be:	460e      	mov	r6, r1
 80032c0:	b921      	cbnz	r1, 80032cc <_realloc_r+0x14>
 80032c2:	4611      	mov	r1, r2
 80032c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032c8:	f7ff bf9c 	b.w	8003204 <_malloc_r>
 80032cc:	b922      	cbnz	r2, 80032d8 <_realloc_r+0x20>
 80032ce:	f7ff ff4d 	bl	800316c <_free_r>
 80032d2:	4625      	mov	r5, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d8:	f000 f830 	bl	800333c <_malloc_usable_size_r>
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d20f      	bcs.n	8003300 <_realloc_r+0x48>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4638      	mov	r0, r7
 80032e4:	f7ff ff8e 	bl	8003204 <_malloc_r>
 80032e8:	4605      	mov	r5, r0
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0f2      	beq.n	80032d4 <_realloc_r+0x1c>
 80032ee:	4631      	mov	r1, r6
 80032f0:	4622      	mov	r2, r4
 80032f2:	f7ff ff13 	bl	800311c <memcpy>
 80032f6:	4631      	mov	r1, r6
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff37 	bl	800316c <_free_r>
 80032fe:	e7e9      	b.n	80032d4 <_realloc_r+0x1c>
 8003300:	4635      	mov	r5, r6
 8003302:	e7e7      	b.n	80032d4 <_realloc_r+0x1c>

08003304 <_sbrk_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	2300      	movs	r3, #0
 8003308:	4d05      	ldr	r5, [pc, #20]	; (8003320 <_sbrk_r+0x1c>)
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7ff fb54 	bl	80029bc <_sbrk>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_sbrk_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_sbrk_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	200000e4 	.word	0x200000e4

08003324 <__malloc_lock>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__malloc_lock+0x8>)
 8003326:	f000 b811 	b.w	800334c <__retarget_lock_acquire_recursive>
 800332a:	bf00      	nop
 800332c:	200000ec 	.word	0x200000ec

08003330 <__malloc_unlock>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__malloc_unlock+0x8>)
 8003332:	f000 b80c 	b.w	800334e <__retarget_lock_release_recursive>
 8003336:	bf00      	nop
 8003338:	200000ec 	.word	0x200000ec

0800333c <_malloc_usable_size_r>:
 800333c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003340:	1f18      	subs	r0, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbc      	itt	lt
 8003346:	580b      	ldrlt	r3, [r1, r0]
 8003348:	18c0      	addlt	r0, r0, r3
 800334a:	4770      	bx	lr

0800334c <__retarget_lock_acquire_recursive>:
 800334c:	4770      	bx	lr

0800334e <__retarget_lock_release_recursive>:
 800334e:	4770      	bx	lr

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
