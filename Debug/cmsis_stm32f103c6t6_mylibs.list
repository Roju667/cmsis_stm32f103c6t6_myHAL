
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003198  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003594  08003594  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08003594  08003594  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003594  08003594  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800359c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  200000ac  08003648  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003648  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a35f  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f61  00000000  00000000  0002a434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0002c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001252f  00000000  00000000  0002cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071c5  00000000  00000000  0003f41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bad2  00000000  00000000  000465e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a20b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019e4  00000000  00000000  000a210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000ac 	.word	0x200000ac
 800014c:	00000000 	.word	0x00000000
 8000150:	080032b0 	.word	0x080032b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000b0 	.word	0x200000b0
 800016c:	080032b0 	.word	0x080032b0

08000170 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <GFX_SetFont+0x18>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000d8 	.word	0x200000d8

0800018c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <GFX_SetFontSize+0x16>
		size = size_t;
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <GFX_SetFontSize+0x20>)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	7013      	strb	r3, [r2, #0]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000000 	.word	0x20000000

080001b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ColorType color)
{
 80001b0:	b590      	push	{r4, r7, lr}
 80001b2:	b089      	sub	sp, #36	; 0x24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	4611      	mov	r1, r2
 80001bc:	461a      	mov	r2, r3
 80001be:	460b      	mov	r3, r1
 80001c0:	71fb      	strb	r3, [r7, #7]
 80001c2:	4613      	mov	r3, r2
 80001c4:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b7e      	cmp	r3, #126	; 0x7e
 80001ca:	d867      	bhi.n	800029c <GFX_DrawChar+0xec>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80001cc:	2300      	movs	r3, #0
 80001ce:	75fb      	strb	r3, [r7, #23]
 80001d0:	e05c      	b.n	800028c <GFX_DrawChar+0xdc>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <GFX_DrawChar+0xf4>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	3b20      	subs	r3, #32
 80001da:	4932      	ldr	r1, [pc, #200]	; (80002a4 <GFX_DrawChar+0xf4>)
 80001dc:	6809      	ldr	r1, [r1, #0]
 80001de:	3101      	adds	r1, #1
 80001e0:	7809      	ldrb	r1, [r1, #0]
 80001e2:	fb01 f103 	mul.w	r1, r1, r3
 80001e6:	7dfb      	ldrb	r3, [r7, #23]
 80001e8:	440b      	add	r3, r1
 80001ea:	3302      	adds	r3, #2
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80001f2:	2300      	movs	r3, #0
 80001f4:	757b      	strb	r3, [r7, #21]
 80001f6:	e03f      	b.n	8000278 <GFX_DrawChar+0xc8>
        {
            if(line & 1) // Check last pixel in line
 80001f8:	7dbb      	ldrb	r3, [r7, #22]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d031      	beq.n	8000266 <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 8000202:	4b29      	ldr	r3, [pc, #164]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d113      	bne.n	8000232 <GFX_DrawChar+0x82>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	b29a      	uxth	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	b29b      	uxth	r3, r3
 8000212:	4413      	add	r3, r2
 8000214:	b29b      	uxth	r3, r3
 8000216:	b218      	sxth	r0, r3
 8000218:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800021c:	b29a      	uxth	r2, r3
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	b29b      	uxth	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b29b      	uxth	r3, r3
 8000226:	b21b      	sxth	r3, r3
 8000228:	88ba      	ldrh	r2, [r7, #4]
 800022a:	4619      	mov	r1, r3
 800022c:	f000 fa2c 	bl	8000688 <ILI9341_WritePixel>
 8000230:	e019      	b.n	8000266 <GFX_DrawChar+0xb6>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000232:	7dfb      	ldrb	r3, [r7, #23]
 8000234:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000236:	7812      	ldrb	r2, [r2, #0]
 8000238:	fb02 f203 	mul.w	r2, r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	18d0      	adds	r0, r2, r3
 8000240:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000244:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	fb02 f203 	mul.w	r2, r2, r3
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	18d1      	adds	r1, r2, r3
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	b29a      	uxth	r2, r3
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b29c      	uxth	r4, r3
 800025c:	88bb      	ldrh	r3, [r7, #4]
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	4623      	mov	r3, r4
 8000262:	f000 f8f9 	bl	8000458 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000266:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	757b      	strb	r3, [r7, #21]
 8000272:	7dbb      	ldrb	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	75bb      	strb	r3, [r7, #22]
 8000278:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <GFX_DrawChar+0xf4>)
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	4293      	cmp	r3, r2
 8000284:	dbb8      	blt.n	80001f8 <GFX_DrawChar+0x48>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	3301      	adds	r3, #1
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <GFX_DrawChar+0xf4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	429a      	cmp	r2, r3
 8000298:	d39b      	bcc.n	80001d2 <GFX_DrawChar+0x22>
 800029a:	e000      	b.n	800029e <GFX_DrawChar+0xee>
	if(chr > 0x7E) return; // chr > '~'
 800029c:	bf00      	nop
            }

        }
    }
}
 800029e:	371c      	adds	r7, #28
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	200000d8 	.word	0x200000d8
 80002a8:	20000000 	.word	0x20000000

080002ac <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ColorType color)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
 80002b8:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80002c4:	e015      	b.n	80002f2 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	7cfa      	ldrb	r2, [r7, #19]
 80002ca:	68b9      	ldr	r1, [r7, #8]
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	f7ff ff6f 	bl	80001b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <GFX_DrawString+0x5c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <GFX_DrawString+0x60>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	fb03 f302 	mul.w	r3, r3, r2
 80002e4:	3301      	adds	r3, #1
 80002e6:	697a      	ldr	r2, [r7, #20]
 80002e8:	4413      	add	r3, r2
 80002ea:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1e3      	bne.n	80002c6 <GFX_DrawString+0x1a>
	}
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200000d8 	.word	0x200000d8
 800030c:	20000000 	.word	0x20000000

08000310 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	; 0x30
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000328:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800032c:	6879      	ldr	r1, [r7, #4]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	1acb      	subs	r3, r1, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	bfb8      	it	lt
 8000336:	425b      	neglt	r3, r3
 8000338:	429a      	cmp	r2, r3
 800033a:	bfcc      	ite	gt
 800033c:	2301      	movgt	r3, #1
 800033e:	2300      	movle	r3, #0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000344:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00b      	beq.n	8000364 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000356:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	623b      	str	r3, [r7, #32]
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	dd0b      	ble.n	8000384 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	61fb      	str	r3, [r7, #28]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b29a      	uxth	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	b29b      	uxth	r3, r3
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b29b      	uxth	r3, r3
 8000390:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	bfb8      	it	lt
 800039c:	425b      	neglt	r3, r3
 800039e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80003a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003a4:	0fda      	lsrs	r2, r3, #31
 80003a6:	4413      	add	r3, r2
 80003a8:	105b      	asrs	r3, r3, #1
 80003aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	da02      	bge.n	80003ba <GFX_WriteLine+0xaa>
	        ystep = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80003b8:	e02e      	b.n	8000418 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80003ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003be:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80003c0:	e02a      	b.n	8000418 <GFX_WriteLine+0x108>
	        if (steep) {
 80003c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	b21b      	sxth	r3, r3
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	b211      	sxth	r1, r2
 80003d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f957 	bl	8000688 <ILI9341_WritePixel>
 80003da:	e007      	b.n	80003ec <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	b211      	sxth	r1, r2
 80003e4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f94e 	bl	8000688 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80003ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003ee:	8abb      	ldrh	r3, [r7, #20]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80003f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	da09      	bge.n	8000412 <GFX_WriteLine+0x102>
	            y_start += ystep;
 80003fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	4413      	add	r3, r2
 8000406:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000408:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800040a:	8afb      	ldrh	r3, [r7, #22]
 800040c:	4413      	add	r3, r2
 800040e:	b29b      	uxth	r3, r3
 8000410:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	ddd0      	ble.n	80003c2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3730      	adds	r7, #48	; 0x30
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af02      	add	r7, sp, #8
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	887b      	ldrh	r3, [r7, #2]
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	4613      	mov	r3, r2
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	68b9      	ldr	r1, [r7, #8]
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f7ff ff60 	bl	8000310 <GFX_WriteLine>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	4611      	mov	r1, r2
 8000464:	461a      	mov	r2, r3
 8000466:	460b      	mov	r3, r1
 8000468:	80fb      	strh	r3, [r7, #6]
 800046a:	4613      	mov	r3, r2
 800046c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e008      	b.n	8000486 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000474:	88ba      	ldrh	r2, [r7, #4]
 8000476:	8c3b      	ldrh	r3, [r7, #32]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ffd5 	bl	800042a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	3301      	adds	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	88fa      	ldrh	r2, [r7, #6]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	4413      	add	r3, r2
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	429a      	cmp	r2, r3
 8000490:	dbf0      	blt.n	8000474 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <ILI9341_Delay>:
#include "ILI9341.h"

spi_handle_t *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { md_systick_delay(ms); }
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f002 f991 	bl	80027cc <md_systick_delay>
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]

  md_spi_tx_polling(Tft_hspi, Data, Lenght, 1000);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <ILI9341_SendTFT+0x24>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	78fa      	ldrb	r2, [r7, #3]
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	f002 f83c 	bl	8002548 <md_spi_tx_polling>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000dc 	.word	0x200000dc

080004dc <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <ILI9341_SendCommand+0x28>)
 80004ec:	f001 fbcc 	bl	8001c88 <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	2101      	movs	r1, #1
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ffdd 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010c00 	.word	0x40010c00

08000508 <ILI9341_SendData16>:

// Send 16 bit data
static void ILI9341_SendData16(uint16_t Data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 8000512:	2201      	movs	r2, #1
 8000514:	2101      	movs	r1, #1
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <ILI9341_SendData16+0x38>)
 8000518:	f001 fbb6 	bl	8001c88 <md_gpio_write_pin>

  // Send 2 8 bits, first MSB (ILI9341 datasheet)
  uint8_t tmp[2];
  tmp[0] = (Data >> 8);
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	b29b      	uxth	r3, r3
 8000522:	b2db      	uxtb	r3, r3
 8000524:	733b      	strb	r3, [r7, #12]
  tmp[1] = Data & 0xFF;
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	737b      	strb	r3, [r7, #13]

  // SEND COMMAND
  ILI9341_SendTFT(tmp, 2);
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2102      	movs	r1, #2
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffbe 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010c00 	.word	0x40010c00

08000544 <ILI9341_SendCommandAndData>:

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <ILI9341_SendCommandAndData+0x44>)
 800055a:	f001 fb95 	bl	8001c88 <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	2101      	movs	r1, #1
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffa6 	bl	80004b4 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <ILI9341_SendCommandAndData+0x44>)
 800056e:	f001 fb8b 	bl	8001c88 <md_gpio_write_pin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 8000572:	88bb      	ldrh	r3, [r7, #4]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	6838      	ldr	r0, [r7, #0]
 800057a:	f7ff ff9b 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010c00 	.word	0x40010c00

0800058c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d820      	bhi.n	80005de <ILI9341_SetRotation+0x52>
    return;

  switch (Rotation)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d816      	bhi.n	80005d0 <ILI9341_SetRotation+0x44>
 80005a2:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <ILI9341_SetRotation+0x1c>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005b9 	.word	0x080005b9
 80005ac:	080005bf 	.word	0x080005bf
 80005b0:	080005c5 	.word	0x080005c5
 80005b4:	080005cb 	.word	0x080005cb
    {
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 80005b8:	2348      	movs	r3, #72	; 0x48
 80005ba:	71fb      	strb	r3, [r7, #7]
      break;
 80005bc:	e008      	b.n	80005d0 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 80005be:	2328      	movs	r3, #40	; 0x28
 80005c0:	71fb      	strb	r3, [r7, #7]
      break;
 80005c2:	e005      	b.n	80005d0 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 80005c4:	2388      	movs	r3, #136	; 0x88
 80005c6:	71fb      	strb	r3, [r7, #7]
      break;
 80005c8:	e002      	b.n	80005d0 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80005ca:	23e8      	movs	r3, #232	; 0xe8
 80005cc:	71fb      	strb	r3, [r7, #7]
      break;
 80005ce:	bf00      	nop
    }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	2036      	movs	r0, #54	; 0x36
 80005d8:	f7ff ffb4 	bl	8000544 <ILI9341_SendCommandAndData>
 80005dc:	e000      	b.n	80005e0 <ILI9341_SetRotation+0x54>
    return;
 80005de:	bf00      	nop
}
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop

080005e8 <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4604      	mov	r4, r0
 80005f0:	4608      	mov	r0, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	461a      	mov	r2, r3
 80005f6:	4623      	mov	r3, r4
 80005f8:	80fb      	strh	r3, [r7, #6]
 80005fa:	4603      	mov	r3, r0
 80005fc:	80bb      	strh	r3, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	807b      	strh	r3, [r7, #2]
 8000602:	4613      	mov	r3, r2
 8000604:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8000606:	88fa      	ldrh	r2, [r7, #6]
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	4413      	add	r3, r2
 800060c:	b29b      	uxth	r3, r3
 800060e:	3b01      	subs	r3, #1
 8000610:	81fb      	strh	r3, [r7, #14]
 8000612:	88ba      	ldrh	r2, [r7, #4]
 8000614:	883b      	ldrh	r3, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	b29b      	uxth	r3, r3
 800061a:	3b01      	subs	r3, #1
 800061c:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	b29b      	uxth	r3, r3
 8000624:	b2db      	uxtb	r3, r3
 8000626:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 800062e:	89fb      	ldrh	r3, [r7, #14]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b29b      	uxth	r3, r3
 8000634:	b2db      	uxtb	r3, r3
 8000636:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2204      	movs	r2, #4
 8000644:	4619      	mov	r1, r3
 8000646:	202a      	movs	r0, #42	; 0x2a
 8000648:	f7ff ff7c 	bl	8000544 <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 800064c:	88bb      	ldrh	r3, [r7, #4]
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	b29b      	uxth	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 800065c:	89bb      	ldrh	r3, [r7, #12]
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b29b      	uxth	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 8000666:	89bb      	ldrh	r3, [r7, #12]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2204      	movs	r2, #4
 8000672:	4619      	mov	r1, r3
 8000674:	202b      	movs	r0, #43	; 0x2b
 8000676:	f7ff ff65 	bl	8000544 <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR); // Write to RAM
 800067a:	202c      	movs	r0, #44	; 0x2c
 800067c:	f7ff ff2e 	bl	80004dc <ILI9341_SendCommand>
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}

08000688 <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	460b      	mov	r3, r1
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	4613      	mov	r3, r2
 8000698:	807b      	strh	r3, [r7, #2]

  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 800069a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db21      	blt.n	80006e6 <ILI9341_WritePixel+0x5e>
 80006a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006aa:	da1c      	bge.n	80006e6 <ILI9341_WritePixel+0x5e>
 80006ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db18      	blt.n	80006e6 <ILI9341_WritePixel+0x5e>
 80006b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006b8:	2bef      	cmp	r3, #239	; 0xef
 80006ba:	dc14      	bgt.n	80006e6 <ILI9341_WritePixel+0x5e>
    {
      //	put data into buffer
      DataToTransfer[0] = (color >> 8);
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	733b      	strb	r3, [r7, #12]
      DataToTransfer[1] = color & 0xFF;
 80006c6:	887b      	ldrh	r3, [r7, #2]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	737b      	strb	r3, [r7, #13]

      // Set window range the single pixel in tft
      // x,y positions 1,1 ranges
      ILI9341_SetAddrWindow(x, y, 1, 1);
 80006cc:	88f8      	ldrh	r0, [r7, #6]
 80006ce:	88b9      	ldrh	r1, [r7, #4]
 80006d0:	2301      	movs	r3, #1
 80006d2:	2201      	movs	r2, #1
 80006d4:	f7ff ff88 	bl	80005e8 <ILI9341_SetAddrWindow>

      // send command that we are writing to RAM, and also color data
      ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2202      	movs	r2, #2
 80006de:	4619      	mov	r1, r3
 80006e0:	202c      	movs	r0, #44	; 0x2c
 80006e2:	f7ff ff2f 	bl	8000544 <ILI9341_SendCommandAndData>
      // Send 16 bit color to that range
    }
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <ILI9341_ClearArea>:
}

// Clear whole dipslay with a color
void ILI9341_ClearArea(uint16_t color, uint16_t start_x, uint16_t start_y,
                       uint16_t width, uint16_t height)
{
 80006ee:	b590      	push	{r4, r7, lr}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4604      	mov	r4, r0
 80006f6:	4608      	mov	r0, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	461a      	mov	r2, r3
 80006fc:	4623      	mov	r3, r4
 80006fe:	80fb      	strh	r3, [r7, #6]
 8000700:	4603      	mov	r3, r0
 8000702:	80bb      	strh	r3, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	807b      	strh	r3, [r7, #2]
 8000708:	4613      	mov	r3, r2
 800070a:	803b      	strh	r3, [r7, #0]
  uint32_t Lenght = width * height;
 800070c:	883b      	ldrh	r3, [r7, #0]
 800070e:	8c3a      	ldrh	r2, [r7, #32]
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	60bb      	str	r3, [r7, #8]

  // set window for whole screen
  ILI9341_SetAddrWindow(start_x, start_y, width, height);
 8000716:	8c3b      	ldrh	r3, [r7, #32]
 8000718:	883a      	ldrh	r2, [r7, #0]
 800071a:	8879      	ldrh	r1, [r7, #2]
 800071c:	88b8      	ldrh	r0, [r7, #4]
 800071e:	f7ff ff63 	bl	80005e8 <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000722:	202c      	movs	r0, #44	; 0x2c
 8000724:	f7ff feda 	bl	80004dc <ILI9341_SendCommand>

  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e006      	b.n	800073c <ILI9341_ClearArea+0x4e>
    {
      ILI9341_SendData16(color);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fee9 	bl	8000508 <ILI9341_SendData16>
  for (uint32_t i = 0; i < Lenght; i++)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	429a      	cmp	r2, r3
 8000742:	d3f4      	bcc.n	800072e <ILI9341_ClearArea+0x40>
    }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bd90      	pop	{r4, r7, pc}

0800074e <ILI9341_ClearDisplay>:

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8000758:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800075c:	60bb      	str	r3, [r7, #8]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800075e:	23f0      	movs	r3, #240	; 0xf0
 8000760:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000764:	2100      	movs	r1, #0
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff3e 	bl	80005e8 <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 800076c:	202c      	movs	r0, #44	; 0x2c
 800076e:	f7ff feb5 	bl	80004dc <ILI9341_SendCommand>

  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e006      	b.n	8000786 <ILI9341_ClearDisplay+0x38>
    {
      ILI9341_SendData16(color);
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fec4 	bl	8000508 <ILI9341_SendData16>
  for (uint32_t i = 0; i < Lenght; i++)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3f4      	bcc.n	8000778 <ILI9341_ClearDisplay+0x2a>
    }

}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ILI9341_Init>:
    0x80, // Display on
    0x00  // End of list
};

void ILI9341_Init(spi_handle_t *hspi)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  // assign correct spi
  Tft_hspi = hspi;
 80007a0:	4a22      	ldr	r2, [pc, #136]	; (800082c <ILI9341_Init+0x94>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <ILI9341_Init+0x98>)
 80007a8:	60fb      	str	r3, [r7, #12]
  ILI9341_CS_HIGH;
 80007aa:	2201      	movs	r2, #1
 80007ac:	210b      	movs	r1, #11
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <ILI9341_Init+0x9c>)
 80007b0:	f001 fa6a 	bl	8001c88 <md_gpio_write_pin>

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 80007b4:	2200      	movs	r2, #0
 80007b6:	210a      	movs	r1, #10
 80007b8:	481e      	ldr	r0, [pc, #120]	; (8000834 <ILI9341_Init+0x9c>)
 80007ba:	f001 fa65 	bl	8001c88 <md_gpio_write_pin>
  ILI9341_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f7ff fe6c 	bl	800049c <ILI9341_Delay>
  ILI9341_RST_HIGH;
 80007c4:	2201      	movs	r2, #1
 80007c6:	210a      	movs	r1, #10
 80007c8:	481a      	ldr	r0, [pc, #104]	; (8000834 <ILI9341_Init+0x9c>)
 80007ca:	f001 fa5d 	bl	8001c88 <md_gpio_write_pin>
  ILI9341_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f7ff fe64 	bl	800049c <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0)
 80007d4:	e01a      	b.n	800080c <ILI9341_Init+0x74>
    {
      // assign value form address to x (second value that is number of data to
      // be send)
      x = *(addr++);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	60fa      	str	r2, [r7, #12]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	72bb      	strb	r3, [r7, #10]

      // mask this value to maximum of 127
      // 0x7F	0111 1111
      // so if we send 0x80 as second argument then we just send command ->
      // without data
      numArgs = x & 0x7F;
 80007e0:	7abb      	ldrb	r3, [r7, #10]
 80007e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007e6:	727b      	strb	r3, [r7, #9]

      // send command then array of data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 80007e8:	7a7b      	ldrb	r3, [r7, #9]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	7afb      	ldrb	r3, [r7, #11]
 80007ee:	68f9      	ldr	r1, [r7, #12]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fea7 	bl	8000544 <ILI9341_SendCommandAndData>

      // move adress to next command
      addr += numArgs;
 80007f6:	7a7b      	ldrb	r3, [r7, #9]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]

      // if only command is sent then make a delay
      if (x & 0x80)
 80007fe:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da02      	bge.n	800080c <ILI9341_Init+0x74>
        {
          ILI9341_Delay(150);
 8000806:	2096      	movs	r0, #150	; 0x96
 8000808:	f7ff fe48 	bl	800049c <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	60fa      	str	r2, [r7, #12]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	72fb      	strb	r3, [r7, #11]
 8000816:	7afb      	ldrb	r3, [r7, #11]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1dc      	bne.n	80007d6 <ILI9341_Init+0x3e>
        }
    }

  ILI9341_SetRotation(ILI9341_ROTATION);
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff feb5 	bl	800058c <ILI9341_SetRotation>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000dc 	.word	0x200000dc
 8000830:	08003314 	.word	0x08003314
 8000834:	40010c00 	.word	0x40010c00

08000838 <example_can_recieve_data>:
        }
    }
}

void example_can_recieve_data(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09a      	sub	sp, #104	; 0x68
 800083c:	af02      	add	r7, sp, #8
  // configure systick
  md_systick_configure_ms();
 800083e:	f001 ffa5 	bl	800278c <md_systick_configure_ms>
  // configure rcc to get 32 Mhz on APB1 (CAN bus)
  example_rcc_configure_pll_32Mhz();
 8000842:	f000 f971 	bl	8000b28 <example_rcc_configure_pll_32Mhz>

  // configure gpio button input
  md_gpio_configure_exti(GPIOB, GPIO_PIN_11, GPIO_INPUT_FLOATING,
 8000846:	2328      	movs	r3, #40	; 0x28
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2201      	movs	r2, #1
 800084e:	210b      	movs	r1, #11
 8000850:	488e      	ldr	r0, [pc, #568]	; (8000a8c <example_can_recieve_data+0x254>)
 8000852:	f001 f937 	bl	8001ac4 <md_gpio_configure_exti>
                         GPIO_EXTI_FALLING, 40);

  // configure gpio led output
  md_gpio_configure_output(GPIOC, GPIO_PIN_13, GPIO_SPEED_10MHZ,
 8000856:	2300      	movs	r3, #0
 8000858:	2201      	movs	r2, #1
 800085a:	210d      	movs	r1, #13
 800085c:	488c      	ldr	r0, [pc, #560]	; (8000a90 <example_can_recieve_data+0x258>)
 800085e:	f001 f863 	bl	8001928 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // init low level - handler/clock/gpio
  md_can_init(&hcan1);
 8000862:	488c      	ldr	r0, [pc, #560]	; (8000a94 <example_can_recieve_data+0x25c>)
 8000864:	f000 fa4f 	bl	8000d06 <md_can_init>

  // can time quanta configuartion
  can_quanta_init_t time_quanta;
  time_quanta.prescaler = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
  time_quanta.quanta_ts1 = CAN_TIME_QUANTA13;
 800086c:	230c      	movs	r3, #12
 800086e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  time_quanta.quanta_ts2 = CAN_TIME_QUANTA2;
 8000872:	2301      	movs	r3, #1
 8000874:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  time_quanta.quanta_sjw = CAN_TIME_QUANTA1;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  // can basic configuration
  can_basic_init_t basic_init;
  basic_init.auto_bus_off = false;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  basic_init.debug_freeze = false;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  basic_init.time_triggered_comm = false;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  basic_init.auto_wake_up = true;
 8000890:	2301      	movs	r3, #1
 8000892:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  basic_init.auto_retransmit = false;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  basic_init.rx_fifo_lock = false;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  basic_init.tx_fifo_prio = false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

  // can configure filter
  can_filter_t can_filter;
  can_filter.assign_to_fifo1 = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  can_filter.filter_id0 = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  can_filter.filter_mask_or_id1 = 0xFFFF;
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
  can_filter.filter_number = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  can_filter.list_mode = false;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  can_filter.scale_32bit = false;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  // enter init mode
  md_can_change_op_mode(&hcan1, CAN_OPMODE_INIT, 1000);
 80008c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008cc:	2100      	movs	r1, #0
 80008ce:	4871      	ldr	r0, [pc, #452]	; (8000a94 <example_can_recieve_data+0x25c>)
 80008d0:	f000 fa27 	bl	8000d22 <md_can_change_op_mode>
  md_can_init_basic(&hcan1, &basic_init);
 80008d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008d8:	4619      	mov	r1, r3
 80008da:	486e      	ldr	r0, [pc, #440]	; (8000a94 <example_can_recieve_data+0x25c>)
 80008dc:	f000 fac9 	bl	8000e72 <md_can_init_basic>
  md_can_init_time_quanta(&hcan1, &time_quanta);
 80008e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008e4:	4619      	mov	r1, r3
 80008e6:	486b      	ldr	r0, [pc, #428]	; (8000a94 <example_can_recieve_data+0x25c>)
 80008e8:	f000 fa44 	bl	8000d74 <md_can_init_time_quanta>
  md_can_init_filter(&hcan1, &can_filter);
 80008ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008f0:	4619      	mov	r1, r3
 80008f2:	4868      	ldr	r0, [pc, #416]	; (8000a94 <example_can_recieve_data+0x25c>)
 80008f4:	f000 fc2e 	bl	8001154 <md_can_init_filter>
  //   exit init mode
  md_can_change_op_mode(&hcan1, CAN_OPMODE_NORMAL, 1000);
 80008f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fc:	2101      	movs	r1, #1
 80008fe:	4865      	ldr	r0, [pc, #404]	; (8000a94 <example_can_recieve_data+0x25c>)
 8000900:	f000 fa0f 	bl	8000d22 <md_can_change_op_mode>

  // init frame
  can_frame_t frame;

  // INIT SPI AND TFT
  md_spi_init(&hspi1);
 8000904:	4864      	ldr	r0, [pc, #400]	; (8000a98 <example_can_recieve_data+0x260>)
 8000906:	f001 fd92 	bl	800242e <md_spi_init>

  spi_config_t spi_config;
  spi_config.clock_1_when_idle = false;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  spi_config.clock_second_edge_capture = false;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  spi_config.data_format_16bit = false;
 8000916:	2300      	movs	r3, #0
 8000918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  spi_config.full_duplex = true;
 800091c:	2301      	movs	r3, #1
 800091e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  spi_config.lsb_first = false;
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  spi_config.master_mode = true;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 3020 	strb.w	r3, [r7, #32]
  spi_config.prescaler = SPI_PRESCALER_2; // 100kHz
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  spi_config.software_nss_management = true;
 8000934:	2301      	movs	r3, #1
 8000936:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  md_spi_init_basic(&hspi1, &spi_config);
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4619      	mov	r1, r3
 8000940:	4855      	ldr	r0, [pc, #340]	; (8000a98 <example_can_recieve_data+0x260>)
 8000942:	f001 fd7f 	bl	8002444 <md_spi_init_basic>

  // init gpio for tft
  //  DC
  md_gpio_configure_output(GPIOB, GPIO_PIN_1, GPIO_SPEED_10MHZ, GPIO_OUTPUT_PP);
 8000946:	2300      	movs	r3, #0
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	484f      	ldr	r0, [pc, #316]	; (8000a8c <example_can_recieve_data+0x254>)
 800094e:	f000 ffeb 	bl	8001928 <md_gpio_configure_output>
  // RESET
  md_gpio_configure_output(GPIOB, GPIO_PIN_10, GPIO_SPEED_10MHZ,
 8000952:	2300      	movs	r3, #0
 8000954:	2201      	movs	r2, #1
 8000956:	210a      	movs	r1, #10
 8000958:	484c      	ldr	r0, [pc, #304]	; (8000a8c <example_can_recieve_data+0x254>)
 800095a:	f000 ffe5 	bl	8001928 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  ILI9341_Init(&hspi1);
 800095e:	484e      	ldr	r0, [pc, #312]	; (8000a98 <example_can_recieve_data+0x260>)
 8000960:	f7ff ff1a 	bl	8000798 <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_BLACK);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fef2 	bl	800074e <ILI9341_ClearDisplay>

  GFX_SetFont(font_8x5);
 800096a:	484c      	ldr	r0, [pc, #304]	; (8000a9c <example_can_recieve_data+0x264>)
 800096c:	f7ff fc00 	bl	8000170 <GFX_SetFont>
  GFX_SetFontSize(2);
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fc0b 	bl	800018c <GFX_SetFontSize>
  GFX_DrawString(10, 10, "Can message recieved", ILI9341_YELLOW);
 8000976:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800097a:	4a49      	ldr	r2, [pc, #292]	; (8000aa0 <example_can_recieve_data+0x268>)
 800097c:	210a      	movs	r1, #10
 800097e:	200a      	movs	r0, #10
 8000980:	f7ff fc94 	bl	80002ac <GFX_DrawString>

  md_can_activate_irq(&hcan1, CAN_IRQ_GROUP_RX0, CAN_IER_FMPIE0, 20);
 8000984:	2314      	movs	r3, #20
 8000986:	2202      	movs	r2, #2
 8000988:	2101      	movs	r1, #1
 800098a:	4842      	ldr	r0, [pc, #264]	; (8000a94 <example_can_recieve_data+0x25c>)
 800098c:	f000 fcaa 	bl	80012e4 <md_can_activate_irq>
  md_can_activate_irq(&hcan1, CAN_IRQ_GROUP_RX1, CAN_IER_FMPIE1, 20);
 8000990:	2314      	movs	r3, #20
 8000992:	2210      	movs	r2, #16
 8000994:	2102      	movs	r1, #2
 8000996:	483f      	ldr	r0, [pc, #252]	; (8000a94 <example_can_recieve_data+0x25c>)
 8000998:	f000 fca4 	bl	80012e4 <md_can_activate_irq>


  uint32_t time_tick_led = md_systick_get_tick();
 800099c:	f001 ff0c 	bl	80027b8 <md_systick_get_tick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	61fb      	str	r3, [r7, #28]
  uint8_t message[16];
  uint16_t milivolts, microamps, lux;

  while (1)
    {
      example_heart_beat_no_delay(&time_tick_led, 500);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f897 	bl	8000ae0 <example_heart_beat_no_delay>



          md_can_read_fifo(&hcan1, &frame, data_buffer, 0);
 80009b2:	f107 0214 	add.w	r2, r7, #20
 80009b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009ba:	2300      	movs	r3, #0
 80009bc:	4835      	ldr	r0, [pc, #212]	; (8000a94 <example_can_recieve_data+0x25c>)
 80009be:	f000 faa3 	bl	8000f08 <md_can_read_fifo>
            lux = (data_buffer[0] | (data_buffer[1] << 8));
 80009c2:	7d3b      	ldrb	r3, [r7, #20]
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	7d7b      	ldrb	r3, [r7, #21]
 80009c8:	021b      	lsls	r3, r3, #8
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            microamps = (data_buffer[2] | (data_buffer[3] << 8));
 80009d4:	7dbb      	ldrb	r3, [r7, #22]
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	021b      	lsls	r3, r3, #8
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4313      	orrs	r3, r2
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            milivolts = (data_buffer[4] | (data_buffer[5] << 8));
 80009e6:	7e3b      	ldrb	r3, [r7, #24]
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	7e7b      	ldrb	r3, [r7, #25]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            sprintf((char *)message, "Lux : %d", lux);
 80009f8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <example_can_recieve_data+0x26c>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 f81b 	bl	8002a3c <siprintf>
            ILI9341_ClearArea(ILI9341_BLACK, 10, 10, 220, 20);
 8000a06:	2314      	movs	r3, #20
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	23dc      	movs	r3, #220	; 0xdc
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	210a      	movs	r1, #10
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fe6c 	bl	80006ee <ILI9341_ClearArea>
            GFX_DrawString(10, 10, (char*)message, ILI9341_YELLOW);
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f7ff fc44 	bl	80002ac <GFX_DrawString>
            sprintf((char *)message, "Microamps : %d", microamps);
 8000a24:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	491f      	ldr	r1, [pc, #124]	; (8000aa8 <example_can_recieve_data+0x270>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f805 	bl	8002a3c <siprintf>
            ILI9341_ClearArea(ILI9341_BLACK, 10, 50, 220, 20);
 8000a32:	2314      	movs	r3, #20
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	23dc      	movs	r3, #220	; 0xdc
 8000a38:	2232      	movs	r2, #50	; 0x32
 8000a3a:	210a      	movs	r1, #10
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fe56 	bl	80006ee <ILI9341_ClearArea>
            GFX_DrawString(10, 50, (char*)message, ILI9341_YELLOW);
 8000a42:	1d3a      	adds	r2, r7, #4
 8000a44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a48:	2132      	movs	r1, #50	; 0x32
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f7ff fc2e 	bl	80002ac <GFX_DrawString>
            sprintf((char *)message, "Milivolts : %d", milivolts);
 8000a50:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4915      	ldr	r1, [pc, #84]	; (8000aac <example_can_recieve_data+0x274>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 ffef 	bl	8002a3c <siprintf>
            ILI9341_ClearArea(ILI9341_BLACK, 10, 90, 220, 20);
 8000a5e:	2314      	movs	r3, #20
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	23dc      	movs	r3, #220	; 0xdc
 8000a64:	225a      	movs	r2, #90	; 0x5a
 8000a66:	210a      	movs	r1, #10
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fe40 	bl	80006ee <ILI9341_ClearArea>
            GFX_DrawString(10, 90, (char*)message, ILI9341_YELLOW);
 8000a6e:	1d3a      	adds	r2, r7, #4
 8000a70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a74:	215a      	movs	r1, #90	; 0x5a
 8000a76:	200a      	movs	r0, #10
 8000a78:	f7ff fc18 	bl	80002ac <GFX_DrawString>
            SET_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <example_can_recieve_data+0x278>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <example_can_recieve_data+0x278>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	6153      	str	r3, [r2, #20]
      example_heart_beat_no_delay(&time_tick_led, 500);
 8000a88:	e78c      	b.n	80009a4 <example_can_recieve_data+0x16c>
 8000a8a:	bf00      	nop
 8000a8c:	40010c00 	.word	0x40010c00
 8000a90:	40011000 	.word	0x40011000
 8000a94:	20000004 	.word	0x20000004
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	08003384 	.word	0x08003384
 8000aa0:	080032d0 	.word	0x080032d0
 8000aa4:	080032e8 	.word	0x080032e8
 8000aa8:	080032f4 	.word	0x080032f4
 8000aac:	08003304 	.word	0x08003304
 8000ab0:	40006400 	.word	0x40006400

08000ab4 <md_gpio_exti15_10_callback>:

    }
}

void md_gpio_exti15_10_callback(gpio_pin_number_t pin_number)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  send_can_msg = 1;
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <md_gpio_exti15_10_callback+0x1c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000e0 	.word	0x200000e0

08000ad4 <md_can_mailbox_empty_callback>:

void md_can_mailbox_empty_callback(void) {}
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <example_heart_beat_no_delay>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat_no_delay(uint32_t *tick_buffer, uint32_t freq)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  // init LED
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	210d      	movs	r1, #13
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <example_heart_beat_no_delay+0x44>)
 8000af2:	f000 ff19 	bl	8001928 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  if (md_systick_get_tick() - (*tick_buffer) > 500)
 8000af6:	f001 fe5f 	bl	80027b8 <md_systick_get_tick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b06:	d909      	bls.n	8000b1c <example_heart_beat_no_delay+0x3c>
    {
      md_gpio_toggle_pin(LED1_GPIO_PORT, LED1_GPIO_PIN);
 8000b08:	210d      	movs	r1, #13
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <example_heart_beat_no_delay+0x44>)
 8000b0c:	f001 f8df 	bl	8001cce <md_gpio_toggle_pin>
      *tick_buffer = md_systick_get_tick();
 8000b10:	f001 fe52 	bl	80027b8 <md_systick_get_tick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
    }

  return;
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
}
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40011000 	.word	0x40011000

08000b28 <example_rcc_configure_pll_32Mhz>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_rcc_configure_pll_32Mhz(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0

  rcc_clock_freqs_t frequencies = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  // configure frequencies - no prescaler on buses + pll on mul 4x
  md_rcc_configure_prescalers(RCC_AHB_PRESCALER_NODIV, RCC_APB_PRESCALER_NODIV,
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2000      	movs	r0, #0
 8000b44:	f001 fa62 	bl	800200c <md_rcc_configure_prescalers>
                              RCC_APB_PRESCALER_NODIV, RCC_ADC_PRESCALER_DIV6);
  md_rcc_configure_sysclk(RCC_SYSCLK_SOURCE_PLL, RCC_PLL_SOURCE_HSE,
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f001 f9d4 	bl	8001efc <md_rcc_configure_sysclk>
                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);
  md_rcc_get_frequencies(&frequencies);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fae2 	bl	8002120 <md_rcc_get_frequencies>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <md_usart_tc_callback+0x48>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d107      	bne.n	8000b86 <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <md_usart_tc_callback+0x4c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <md_usart_tc_callback+0x4c>)
 8000b7e:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <md_usart_tc_callback+0x50>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <md_usart_tc_callback+0x54>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d107      	bne.n	8000ba0 <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <md_usart_tc_callback+0x58>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <md_usart_tc_callback+0x58>)
 8000b98:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <md_usart_tc_callback+0x5c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	200000ec 	.word	0x200000ec
 8000bb4:	200000e9 	.word	0x200000e9
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	200000e8 	.word	0x200000e8

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4906      	ldr	r1, [pc, #24]	; (8000bf8 <__NVIC_EnableIRQ+0x34>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0c      	blt.n	8000c28 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_ClearPendingIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	3360      	adds	r3, #96	; 0x60
 8000c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <md_set_if_condition>:

#define __weak __attribute__((weak))

static inline void md_set_if_condition(bool condition,volatile uint32_t *reg,
                                     uint32_t bit)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
  if (condition == true)
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <md_set_if_condition+0x22>
    {
      // set
      *reg |= bit;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	601a      	str	r2, [r3, #0]
  else
    {
      // reset
      *reg &= ~(bit);
    }
}
 8000cac:	e006      	b.n	8000cbc <md_set_if_condition+0x30>
      *reg &= ~(bit);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <md_clear_if_condition>:

static inline void md_clear_if_condition(bool condition,volatile uint32_t *reg,
                                     uint32_t bit)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  if (condition == false)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	f083 0301 	eor.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <md_clear_if_condition+0x28>
    {
      // set
      *reg |= bit;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	601a      	str	r2, [r3, #0]
  else
    {
      // reset
      *reg &= ~(bit);
    }
}
 8000cec:	e006      	b.n	8000cfc <md_clear_if_condition+0x36>
      *reg &= ~(bit);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <md_can_init>:
 * Init handlers gpio and clock
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
void md_can_init(can_handle_t *p_hCANx)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  can_init_clock(p_hCANx);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fc2c 	bl	800156c <can_init_clock>
  can_init_gpio(p_hCANx);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fc55 	bl	80015c4 <can_init_gpio>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <md_can_change_op_mode>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - can_error_t - can error status
 */
can_error_t md_can_change_op_mode(can_handle_t *p_hCANx, can_op_mode_t op_mode,
                                  uint32_t timeout_ms)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	72fb      	strb	r3, [r7, #11]
  switch (op_mode)
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d012      	beq.n	8000d5c <md_can_change_op_mode+0x3a>
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	dc16      	bgt.n	8000d68 <md_can_change_op_mode+0x46>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <md_can_change_op_mode+0x22>
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d006      	beq.n	8000d50 <md_can_change_op_mode+0x2e>
 8000d42:	e011      	b.n	8000d68 <md_can_change_op_mode+0x46>
    {
    case (CAN_OPMODE_INIT):
      {
        return can_enter_init_mode(p_hCANx, timeout_ms);
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 fb26 	bl	8001398 <can_enter_init_mode>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	e00d      	b.n	8000d6c <md_can_change_op_mode+0x4a>
      }
    case (CAN_OPMODE_NORMAL):
      {
        return can_enter_normal_mode(p_hCANx, timeout_ms);
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f000 fb6e 	bl	8001434 <can_enter_normal_mode>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	e007      	b.n	8000d6c <md_can_change_op_mode+0x4a>
      }
    case (CAN_OPMODE_SLEEP):
      {
        return can_enter_sleep_mode(p_hCANx, timeout_ms);
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 fbb6 	bl	80014d0 <can_enter_sleep_mode>
 8000d64:	4603      	mov	r3, r0
 8000d66:	e001      	b.n	8000d6c <md_can_change_op_mode+0x4a>
      }
    default:
      return CAN_ERR_SWITCH_MODE;
 8000d68:	f06f 0361 	mvn.w	r3, #97	; 0x61
    }
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <md_can_init_time_quanta>:
 * quanta quanta_sjw - number of quanta for synchronization MAX 4 quanta
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_time_quanta(can_handle_t *p_hCANx,
                                    can_quanta_init_t *p_quanta_init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	795b      	ldrb	r3, [r3, #5]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <md_can_init_time_quanta+0x18>
    {
      return CAN_ERR_WRONG_MDOE;
 8000d86:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8000d8a:	e06d      	b.n	8000e68 <md_can_init_time_quanta+0xf4>
    }

  // check if values are not exceeded
  if (p_quanta_init->quanta_ts2 > CAN_TIME_QUANTA8 ||
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	795b      	ldrb	r3, [r3, #5]
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d803      	bhi.n	8000d9c <md_can_init_time_quanta+0x28>
      p_quanta_init->quanta_sjw > CAN_TIME_QUANTA4)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	799b      	ldrb	r3, [r3, #6]
  if (p_quanta_init->quanta_ts2 > CAN_TIME_QUANTA8 ||
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d905      	bls.n	8000da8 <md_can_init_time_quanta+0x34>
    {
      p_hCANx->can_error = CAN_ERR_INIT_QUANTA;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	22a0      	movs	r2, #160	; 0xa0
 8000da0:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_QUANTA;
 8000da2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8000da6:	e05f      	b.n	8000e68 <md_can_init_time_quanta+0xf4>
    }

  if (p_quanta_init->prescaler > 511 || p_quanta_init->prescaler < 1)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db0:	d203      	bcs.n	8000dba <md_can_init_time_quanta+0x46>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <md_can_init_time_quanta+0x52>
    {
      p_hCANx->can_error = CAN_ERR_INIT_BAUD;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	22a1      	movs	r2, #161	; 0xa1
 8000dbe:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_BAUD;
 8000dc0:	f06f 035e 	mvn.w	r3, #94	; 0x5e
 8000dc4:	e050      	b.n	8000e68 <md_can_init_time_quanta+0xf4>
    }

  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_BRP_Msk);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dd4:	f023 0303 	bic.w	r3, r3, #3
 8000dd8:	61d3      	str	r3, [r2, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_TS1_Msk);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000de8:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_TS2_Msk);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000df8:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_SJW_Msk);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e08:	61da      	str	r2, [r3, #28]

  // init prescaler and quantas
  p_hCANx->p_CANx->BTR |= ((p_quanta_init->prescaler - 1) << CAN_BTR_BRP_Pos);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69d9      	ldr	r1, [r3, #28]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (p_quanta_init->quanta_ts1 << CAN_BTR_TS1_Pos);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69da      	ldr	r2, [r3, #28]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	791b      	ldrb	r3, [r3, #4]
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (p_quanta_init->quanta_ts2 << CAN_BTR_TS2_Pos);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	69da      	ldr	r2, [r3, #28]
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	051b      	lsls	r3, r3, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (p_quanta_init->quanta_sjw << CAN_BTR_SJW_Pos);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	061b      	lsls	r3, r3, #24
 8000e56:	4619      	mov	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	61da      	str	r2, [r3, #28]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <md_can_init_basic>:
 * @param[*p_basic_init] - pointer to can basic struct@can_basic_init
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_basic(can_handle_t *p_hCANx,
                              can_basic_init_t *p_basic_init)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <md_can_init_basic+0x18>
    {
      return CAN_ERR_WRONG_MDOE;
 8000e84:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8000e88:	e039      	b.n	8000efe <md_can_init_basic+0x8c>
    }

  // set or reset all the configuration flags
  md_set_if_condition(p_basic_init->debug_freeze, &(p_hCANx->p_CANx->MCR),
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	7818      	ldrb	r0, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fef8 	bl	8000c8c <md_set_if_condition>
                      CAN_MCR_DBF);
  md_set_if_condition(p_basic_init->time_triggered_comm, &(p_hCANx->p_CANx->MCR),
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	7858      	ldrb	r0, [r3, #1]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fef0 	bl	8000c8c <md_set_if_condition>
                      CAN_MCR_TTCM);
  md_set_if_condition(p_basic_init->auto_bus_off, &(p_hCANx->p_CANx->MCR),
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	7898      	ldrb	r0, [r3, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fee8 	bl	8000c8c <md_set_if_condition>
                      CAN_MCR_ABOM);
  md_set_if_condition(p_basic_init->auto_wake_up, &(p_hCANx->p_CANx->MCR),
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	78d8      	ldrb	r0, [r3, #3]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fee0 	bl	8000c8c <md_set_if_condition>
                      CAN_MCR_AWUM);
  md_set_if_condition(p_basic_init->rx_fifo_lock, &(p_hCANx->p_CANx->MCR),
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	7958      	ldrb	r0, [r3, #5]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fed8 	bl	8000c8c <md_set_if_condition>
                      CAN_MCR_RFLM);
  md_set_if_condition(p_basic_init->tx_fifo_prio, &(p_hCANx->p_CANx->MCR),
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	7998      	ldrb	r0, [r3, #6]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fed0 	bl	8000c8c <md_set_if_condition>
                      CAN_MCR_TXFP);
  md_clear_if_condition(p_basic_init->auto_retransmit, &(p_hCANx->p_CANx->MCR),
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	7918      	ldrb	r0, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fee5 	bl	8000cc6 <md_clear_if_condition>
                        CAN_MCR_NART);

  return CAN_ERR_NOERR;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <md_can_read_fifo>:
 * @param[fifo_number] - 0 or 1
 * @return - can_error_t - can error status
 */
can_error_t md_can_read_fifo(can_handle_t *p_hCANx, can_frame_t *p_frame_buffer,
                             uint8_t *p_data_buffer, uint8_t fifo_number)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	70fb      	strb	r3, [r7, #3]
  // assign pointer to frame struct
  p_frame_buffer->p_data_buffer = p_data_buffer;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	60da      	str	r2, [r3, #12]

  if (fifo_number == 0)
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 8081 	bne.w	8001026 <md_can_read_fifo+0x11e>
    {
      // check if fifo is not empty
      if (!(p_hCANx->p_CANx->RF0R & CAN_RF0R_FMP0))
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <md_can_read_fifo+0x36>
        {
          p_hCANx->can_error = CAN_ERR_FIFO_EMPTY;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	22a5      	movs	r2, #165	; 0xa5
 8000f36:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_FIFO_EMPTY;
 8000f38:	f06f 035a 	mvn.w	r3, #90	; 0x5a
 8000f3c:	e102      	b.n	8001144 <md_can_read_fifo+0x23c>
        }

      // read from fifo - frame info
      SET_BIT(p_hCANx->p_CANx->RF0R, CAN_RF0R_RFOM0);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0220 	orr.w	r2, r2, #32
 8000f4c:	60da      	str	r2, [r3, #12]
      p_frame_buffer->remote =
          (p_hCANx->p_CANx->sFIFOMailBox[0].RIR & CAN_RI0R_RTR);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	b2da      	uxtb	r2, r3
      p_frame_buffer->remote =
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	725a      	strb	r2, [r3, #9]
      p_frame_buffer->data_lenght =
          (p_hCANx->p_CANx->sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000f70:	f003 020f 	and.w	r2, r3, #15
      p_frame_buffer->data_lenght =
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	605a      	str	r2, [r3, #4]

      if (p_hCANx->p_CANx->sFIFOMailBox[0].RIR & CAN_RI0R_IDE)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00a      	beq.n	8000f9e <md_can_read_fifo+0x96>
        {
          p_frame_buffer->id_extended = 1;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	721a      	strb	r2, [r3, #8]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[0].RIR >> CAN_RI0R_EXID_Pos);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000f96:	08da      	lsrs	r2, r3, #3
          p_frame_buffer->id =
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e009      	b.n	8000fb2 <md_can_read_fifo+0xaa>
        }
      else
        {
          p_frame_buffer->id_extended = 0;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	721a      	strb	r2, [r3, #8]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[0].RIR >> CAN_RI0R_STID_Pos);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fac:	0d5a      	lsrs	r2, r3, #21
          p_frame_buffer->id =
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	601a      	str	r2, [r3, #0]
        }

      // read form fifo - data info
      for (uint8_t i = 0; i < 8; i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75fb      	strb	r3, [r7, #23]
 8000fb6:	e024      	b.n	8001002 <md_can_read_fifo+0xfa>
        {
          if (i < 4)
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d80e      	bhi.n	8000fdc <md_can_read_fifo+0xd4>
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[0].RDLR >> (i * 8));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e00f      	b.n	8000ffc <md_can_read_fifo+0xf4>
            }
          else
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[0].RDHR >> ((i % 4) * 8));
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = 0; i < 8; i++)
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	3301      	adds	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	2b07      	cmp	r3, #7
 8001006:	d9d7      	bls.n	8000fb8 <md_can_read_fifo+0xb0>
            }
        }

      // if using irq mode , activate irq for next message
      if (p_hCANx->msg_pending_fifo0 == 1)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8095 	beq.w	800113c <md_can_read_fifo+0x234>
        {
          SET_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <md_can_read_fifo+0x248>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a4e      	ldr	r2, [pc, #312]	; (8001150 <md_can_read_fifo+0x248>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6153      	str	r3, [r2, #20]
          p_hCANx->msg_pending_fifo0 = 0;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	719a      	strb	r2, [r3, #6]
 8001024:	e08a      	b.n	800113c <md_can_read_fifo+0x234>
        }
    }
  else if (fifo_number == 1)
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	2b01      	cmp	r3, #1
 800102a:	f040 8087 	bne.w	800113c <md_can_read_fifo+0x234>
    {
      // check if fifo is not empty
      if (!(p_hCANx->p_CANx->RF1R & CAN_RF1R_FMP1))
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d105      	bne.n	8001048 <md_can_read_fifo+0x140>
        {
          p_hCANx->can_error = CAN_ERR_FIFO_EMPTY;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	22a5      	movs	r2, #165	; 0xa5
 8001040:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_FIFO_EMPTY;
 8001042:	f06f 035a 	mvn.w	r3, #90	; 0x5a
 8001046:	e07d      	b.n	8001144 <md_can_read_fifo+0x23c>
        }

      // read from fifo
      SET_BIT(p_hCANx->p_CANx->RF1R, CAN_RF1R_RFOM1);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0220 	orr.w	r2, r2, #32
 8001056:	611a      	str	r2, [r3, #16]

      // read from fifo - frame info
      SET_BIT(p_hCANx->p_CANx->RF1R, CAN_RF1R_RFOM1);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0220 	orr.w	r2, r2, #32
 8001066:	611a      	str	r2, [r3, #16]
      p_frame_buffer->remote =
          (p_hCANx->p_CANx->sFIFOMailBox[1].RIR & CAN_RI1R_RTR);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2da      	uxtb	r2, r3
      p_frame_buffer->remote =
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	725a      	strb	r2, [r3, #9]
      p_frame_buffer->data_lenght =
          (p_hCANx->p_CANx->sFIFOMailBox[1].RDTR & CAN_RDT1R_DLC);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800108a:	f003 020f 	and.w	r2, r3, #15
      p_frame_buffer->data_lenght =
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	605a      	str	r2, [r3, #4]

      if (p_hCANx->p_CANx->sFIFOMailBox[1].RIR & CAN_RI1R_IDE)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00a      	beq.n	80010b8 <md_can_read_fifo+0x1b0>
        {
          p_frame_buffer->id_extended = 1;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2201      	movs	r2, #1
 80010a6:	721a      	strb	r2, [r3, #8]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[1].RIR >> CAN_RI1R_EXID_Pos);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80010b0:	08da      	lsrs	r2, r3, #3
          p_frame_buffer->id =
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e009      	b.n	80010cc <md_can_read_fifo+0x1c4>
        }
      else
        {
          p_frame_buffer->id_extended = 0;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2200      	movs	r2, #0
 80010bc:	721a      	strb	r2, [r3, #8]
          p_frame_buffer->id =
              (p_hCANx->p_CANx->sFIFOMailBox[1].RIR >> CAN_RI1R_STID_Pos);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80010c6:	0d5a      	lsrs	r2, r3, #21
          p_frame_buffer->id =
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	601a      	str	r2, [r3, #0]
        }

      // read form fifo - data info
      for (uint8_t i = 0; i < 8; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	75bb      	strb	r3, [r7, #22]
 80010d0:	e024      	b.n	800111c <md_can_read_fifo+0x214>
        {
          if (i < 4)
 80010d2:	7dbb      	ldrb	r3, [r7, #22]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d80e      	bhi.n	80010f6 <md_can_read_fifo+0x1ee>
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[1].RDLR >> (i * 8));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80010e0:	7dbb      	ldrb	r3, [r7, #22]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	4413      	add	r3, r2
 80010f0:	b2ca      	uxtb	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e00f      	b.n	8001116 <md_can_read_fifo+0x20e>
            }
          else
            {
              p_frame_buffer->p_data_buffer[i] =
                  (p_hCANx->p_CANx->sFIFOMailBox[1].RDHR >> ((i % 4) * 8));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80010fe:	7dbb      	ldrb	r3, [r7, #22]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	fa22 f103 	lsr.w	r1, r2, r3
              p_frame_buffer->p_data_buffer[i] =
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	7dbb      	ldrb	r3, [r7, #22]
 8001110:	4413      	add	r3, r2
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = 0; i < 8; i++)
 8001116:	7dbb      	ldrb	r3, [r7, #22]
 8001118:	3301      	adds	r3, #1
 800111a:	75bb      	strb	r3, [r7, #22]
 800111c:	7dbb      	ldrb	r3, [r7, #22]
 800111e:	2b07      	cmp	r3, #7
 8001120:	d9d7      	bls.n	80010d2 <md_can_read_fifo+0x1ca>
            }
        }

      // if using irq mode , activate irq for next message
      if (p_hCANx->msg_pending_fifo1 == 1)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	79db      	ldrb	r3, [r3, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <md_can_read_fifo+0x234>
        {
          SET_BIT(CAN1->IER, CAN_IER_FMPIE1);
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <md_can_read_fifo+0x248>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <md_can_read_fifo+0x248>)
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	6153      	str	r3, [r2, #20]
          p_hCANx->msg_pending_fifo1 = 1;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	71da      	strb	r2, [r3, #7]
        }
    }
  p_hCANx->can_error = CAN_ERR_NOERR;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40006400 	.word	0x40006400

08001154 <md_can_init_filter>:
 * @param[*p_hCANx] - @can_handler
 * @param[filter] - filter struct
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_filter(can_handle_t *p_hCANx, can_filter_t *p_filter)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]

  if (p_filter->filter_number > 13)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b0d      	cmp	r3, #13
 8001164:	d905      	bls.n	8001172 <md_can_init_filter+0x1e>
    {
      p_hCANx->can_error = CAN_ERR_FILTER_NO_TOO_HIGH;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	22a4      	movs	r2, #164	; 0xa4
 800116a:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_FILTER_NO_TOO_HIGH;
 800116c:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8001170:	e0b2      	b.n	80012d8 <md_can_init_filter+0x184>
    }

  // start init filter mode
  SET_BIT(p_hCANx->p_CANx->FMR, CAN_FMR_FINIT);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  // deactivate filter for configuration
  CLEAR_BIT(p_hCANx->p_CANx->FA1R, (0x01 << p_filter->filter_number));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4619      	mov	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	400a      	ands	r2, r1
 80011a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // assign filter to fifo
  if (p_filter->assign_to_fifo1 == true)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	799b      	ldrb	r3, [r3, #6]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00f      	beq.n	80011ce <md_can_init_filter+0x7a>
    {
      SET_BIT(p_hCANx->p_CANx->FFA1R, (0x01 << p_filter->filter_number));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011cc:	e00f      	b.n	80011ee <md_can_init_filter+0x9a>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->FFA1R, (0x01 << p_filter->filter_number));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

  // select scale 16 bit (for standard) 32 bit (for extended id)
  if (p_filter->scale_32bit == true)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00f      	beq.n	8001216 <md_can_init_filter+0xc2>
    {
      SET_BIT(p_hCANx->p_CANx->FS1R, (0x01 << p_filter->filter_number));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	4619      	mov	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001214:	e00f      	b.n	8001236 <md_can_init_filter+0xe2>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->FS1R, (0x01 << p_filter->filter_number));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	400a      	ands	r2, r1
 8001232:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    }

  // select mode
  if (p_filter->list_mode == true)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	791b      	ldrb	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00f      	beq.n	800125e <md_can_init_filter+0x10a>
    {
      SET_BIT(p_hCANx->p_CANx->FS1R, (0x01 << p_filter->filter_number));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2101      	movs	r1, #1
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4619      	mov	r1, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800125c:	e00f      	b.n	800127e <md_can_init_filter+0x12a>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->FS1R, (0x01 << p_filter->filter_number));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    }

  // fill value registers
  p_hCANx->p_CANx->sFilterRegister[p_filter->filter_number].FR1 =
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	6812      	ldr	r2, [r2, #0]
      p_filter->filter_id0;
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	6889      	ldr	r1, [r1, #8]
  p_hCANx->p_CANx->sFilterRegister[p_filter->filter_number].FR1 =
 800128a:	3248      	adds	r2, #72	; 0x48
 800128c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  p_hCANx->p_CANx->sFilterRegister[p_filter->filter_number].FR2 =
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
      p_filter->filter_mask_or_id1;
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	68d2      	ldr	r2, [r2, #12]
  p_hCANx->p_CANx->sFilterRegister[p_filter->filter_number].FR2 =
 800129c:	3348      	adds	r3, #72	; 0x48
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	440b      	add	r3, r1
 80012a2:	605a      	str	r2, [r3, #4]

  // activate filter
  SET_BIT(p_hCANx->p_CANx->FA1R, (0x01 << p_filter->filter_number));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // stop filter init mode
  CLEAR_BIT(p_hCANx->p_CANx->FMR, CAN_FMR_FINIT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  return CAN_ERR_NOERR;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
	...

080012e4 <md_can_activate_irq>:
 * @param[irq_prio] - priority to certain irq
 * @return - can_error_t - can error status
 */
void md_can_activate_irq(can_handle_t *p_hCANx, can_irq_group_t irq_group,
                         uint32_t irq_flags, uint8_t irq_prio)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	461a      	mov	r2, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	72fb      	strb	r3, [r7, #11]
 80012f4:	4613      	mov	r3, r2
 80012f6:	72bb      	strb	r3, [r7, #10]
  // choose nvic group to activate + filter flags
  switch (irq_group)
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d83e      	bhi.n	800137c <md_can_activate_irq+0x98>
 80012fe:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <md_can_activate_irq+0x20>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001315 	.word	0x08001315
 8001308:	0800132f 	.word	0x0800132f
 800130c:	08001349 	.word	0x08001349
 8001310:	08001363 	.word	0x08001363
    {
    case (CAN_IRQ_GROUP_TX):
      irq_flags &= 0x00000001;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800131c:	2013      	movs	r0, #19
 800131e:	f7ff fc51 	bl	8000bc4 <__NVIC_EnableIRQ>
      NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, irq_prio);
 8001322:	7abb      	ldrb	r3, [r7, #10]
 8001324:	4619      	mov	r1, r3
 8001326:	2013      	movs	r0, #19
 8001328:	f7ff fc86 	bl	8000c38 <__NVIC_SetPriority>
      break;
 800132c:	e026      	b.n	800137c <md_can_activate_irq+0x98>

    case (CAN_IRQ_GROUP_RX0):
      irq_flags &= 0x0000000E;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f003 030e 	and.w	r3, r3, #14
 8001334:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001336:	2014      	movs	r0, #20
 8001338:	f7ff fc44 	bl	8000bc4 <__NVIC_EnableIRQ>
      NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, irq_prio);
 800133c:	7abb      	ldrb	r3, [r7, #10]
 800133e:	4619      	mov	r1, r3
 8001340:	2014      	movs	r0, #20
 8001342:	f7ff fc79 	bl	8000c38 <__NVIC_SetPriority>
      break;
 8001346:	e019      	b.n	800137c <md_can_activate_irq+0x98>

    case (CAN_IRQ_GROUP_RX1):
      irq_flags &= 0x00000070;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800134e:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001350:	2015      	movs	r0, #21
 8001352:	f7ff fc37 	bl	8000bc4 <__NVIC_EnableIRQ>
      NVIC_SetPriority(CAN1_RX1_IRQn, irq_prio);
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	4619      	mov	r1, r3
 800135a:	2015      	movs	r0, #21
 800135c:	f7ff fc6c 	bl	8000c38 <__NVIC_SetPriority>
      break;
 8001360:	e00c      	b.n	800137c <md_can_activate_irq+0x98>

    case (CAN_IRQ_GROUP_SCE):
      irq_flags &= 0x00038F00;
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <md_can_activate_irq+0xb0>)
 8001366:	4013      	ands	r3, r2
 8001368:	607b      	str	r3, [r7, #4]
      NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800136a:	2016      	movs	r0, #22
 800136c:	f7ff fc2a 	bl	8000bc4 <__NVIC_EnableIRQ>
      NVIC_SetPriority(CAN1_SCE_IRQn, irq_prio);
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	4619      	mov	r1, r3
 8001374:	2016      	movs	r0, #22
 8001376:	f7ff fc5f 	bl	8000c38 <__NVIC_SetPriority>
      break;
 800137a:	bf00      	nop
    }

  // activate flags in IER register
  p_hCANx->p_CANx->IER |= irq_flags;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6959      	ldr	r1, [r3, #20]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	430a      	orrs	r2, r1
 800138a:	615a      	str	r2, [r3, #20]

  return;
 800138c:	bf00      	nop
}
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	00038f00 	.word	0x00038f00

08001398 <can_enter_init_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_init_mode(can_handle_t *p_hCANx,
                                       uint32_t timeout_ms)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0202 	bic.w	r2, r2, #2
 80013c4:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80013c6:	e00d      	b.n	80013e4 <can_enter_init_mode+0x4c>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80013c8:	f001 f9f6 	bl	80027b8 <md_systick_get_tick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d205      	bcs.n	80013e4 <can_enter_init_mode+0x4c>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	229c      	movs	r2, #156	; 0x9c
 80013dc:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 80013de:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80013e2:	e023      	b.n	800142c <can_enter_init_mode+0x94>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ea      	beq.n	80013c8 <can_enter_init_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80013f2:	e00d      	b.n	8001410 <can_enter_init_mode+0x78>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80013f4:	f001 f9e0 	bl	80027b8 <md_systick_get_tick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d205      	bcs.n	8001410 <can_enter_init_mode+0x78>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	229d      	movs	r2, #157	; 0x9d
 8001408:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 800140a:	f06f 0362 	mvn.w	r3, #98	; 0x62
 800140e:	e00d      	b.n	800142c <can_enter_init_mode+0x94>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ea      	bne.n	80013f4 <can_enter_init_mode+0x5c>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_INIT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <can_enter_normal_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_normal_mode(can_handle_t *p_hCANx,
                                         uint32_t timeout_ms)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0202 	bic.w	r2, r2, #2
 8001460:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8001462:	e00d      	b.n	8001480 <can_enter_normal_mode+0x4c>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001464:	f001 f9a8 	bl	80027b8 <md_systick_get_tick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d205      	bcs.n	8001480 <can_enter_normal_mode+0x4c>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	229c      	movs	r2, #156	; 0x9c
 8001478:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 800147a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800147e:	e023      	b.n	80014c8 <can_enter_normal_mode+0x94>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ea      	bne.n	8001464 <can_enter_normal_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 800148e:	e00d      	b.n	80014ac <can_enter_normal_mode+0x78>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001490:	f001 f992 	bl	80027b8 <md_systick_get_tick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d205      	bcs.n	80014ac <can_enter_normal_mode+0x78>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	229d      	movs	r2, #157	; 0x9d
 80014a4:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 80014a6:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80014aa:	e00d      	b.n	80014c8 <can_enter_normal_mode+0x94>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ea      	bne.n	8001490 <can_enter_normal_mode+0x5c>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_NORMAL;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <can_enter_sleep_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_sleep_mode(can_handle_t *p_hCANx,
                                        uint32_t timeout_ms)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0202 	orr.w	r2, r2, #2
 80014fc:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 80014fe:	e00d      	b.n	800151c <can_enter_sleep_mode+0x4c>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001500:	f001 f95a 	bl	80027b8 <md_systick_get_tick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d205      	bcs.n	800151c <can_enter_sleep_mode+0x4c>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	229c      	movs	r2, #156	; 0x9c
 8001514:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 8001516:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800151a:	e023      	b.n	8001564 <can_enter_sleep_mode+0x94>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ea      	bne.n	8001500 <can_enter_sleep_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 800152a:	e00d      	b.n	8001548 <can_enter_sleep_mode+0x78>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 800152c:	f001 f944 	bl	80027b8 <md_systick_get_tick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d205      	bcs.n	8001548 <can_enter_sleep_mode+0x78>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	229d      	movs	r2, #157	; 0x9d
 8001540:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8001542:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8001546:	e00d      	b.n	8001564 <can_enter_sleep_mode+0x94>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ea      	beq.n	800152c <can_enter_sleep_mode+0x5c>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_SLEEP;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2202      	movs	r2, #2
 800155a:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <can_init_clock>:
 * Starts clock for CAN and resets the peripheral
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
static void can_init_clock(can_handle_t *p_hCANx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <can_init_clock+0x50>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d117      	bne.n	80015ae <can_init_clock+0x42>
    {
      if (RCC->APB1ENR & RCC_APB1ENR_CAN1EN)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <can_init_clock+0x54>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d113      	bne.n	80015b2 <can_init_clock+0x46>
        return;

      RCC_CLOCK_ENABLE_CAN();
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <can_init_clock+0x54>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <can_init_clock+0x54>)
 8001590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001594:	61d3      	str	r3, [r2, #28]
      SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <can_init_clock+0x54>)
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <can_init_clock+0x54>)
 800159c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a0:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <can_init_clock+0x54>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <can_init_clock+0x54>)
 80015a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80015ac:	6113      	str	r3, [r2, #16]
    }
  return;
 80015ae:	bf00      	nop
 80015b0:	e000      	b.n	80015b4 <can_init_clock+0x48>
        return;
 80015b2:	bf00      	nop
}
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40006400 	.word	0x40006400
 80015c0:	40021000 	.word	0x40021000

080015c4 <can_init_gpio>:
 * Init gpio pins for can bus
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
static void can_init_gpio(can_handle_t *p_hCANx)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <can_init_gpio+0x34>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10b      	bne.n	80015ee <can_init_gpio+0x2a>
    {
      // CAN TX PA12, REMAP : PB8
      md_gpio_configure_output(GPIOA, GPIO_PIN_12, GPIO_SPEED_50MHZ,
 80015d6:	2302      	movs	r3, #2
 80015d8:	2203      	movs	r2, #3
 80015da:	210c      	movs	r1, #12
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <can_init_gpio+0x38>)
 80015de:	f000 f9a3 	bl	8001928 <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      // CAN RX PA11, REMAP : PB9
      md_gpio_configure_input(GPIOA, GPIO_PIN_11, GPIO_INPUT_FLOATING);
 80015e2:	2201      	movs	r2, #1
 80015e4:	210b      	movs	r1, #11
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <can_init_gpio+0x38>)
 80015e8:	f000 f9f9 	bl	80019de <md_gpio_configure_input>
    }
  return;
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
}
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40006400 	.word	0x40006400
 80015fc:	40010800 	.word	0x40010800

08001600 <can_main_rx0_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx0_callback(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if (CAN1->RF0R & CAN_RF0R_FULL0)
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <can_main_rx0_callback+0x24>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <can_main_rx0_callback+0x1c>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <can_main_rx0_callback+0x24>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <can_main_rx0_callback+0x24>)
 8001616:	f023 0302 	bic.w	r3, r3, #2
 800161a:	6153      	str	r3, [r2, #20]
    }
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40006400 	.word	0x40006400

08001628 <can_main_rx1_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx1_callback(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if (CAN1->RF1R & CAN_RF1R_FULL1)
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <can_main_rx1_callback+0x24>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <can_main_rx1_callback+0x1c>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE1);
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <can_main_rx1_callback+0x24>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4a03      	ldr	r2, [pc, #12]	; (800164c <can_main_rx1_callback+0x24>)
 800163e:	f023 0310 	bic.w	r3, r3, #16
 8001642:	6153      	str	r3, [r2, #20]
    }
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40006400 	.word	0x40006400

08001650 <can_main_sce_callback>:

/*
 * this callback is called on error/status change
 * @return - void
 */
static void can_main_sce_callback(void) {}
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <USB_HP_CAN_TX_IRQHandler>:

// Vector table handlers for can

void USB_HP_CAN_TX_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  // clear only 1 request complete bit - so if 3 mailboxes become empty
  // there will be 3 interrupts
  if (CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_RQCP0))
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <USB_HP_CAN_TX_IRQHandler+0x64>)
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <USB_HP_CAN_TX_IRQHandler+0x1e>
    {
      CAN1->TSR |= CAN_TSR_RQCP0;
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6093      	str	r3, [r2, #8]
 8001678:	e018      	b.n	80016ac <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME1 | CAN_TSR_RQCP1))
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <USB_HP_CAN_TX_IRQHandler+0x68>)
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <USB_HP_CAN_TX_IRQHandler+0x38>
    {
      CAN1->TSR |= CAN_TSR_RQCP1;
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6093      	str	r3, [r2, #8]
 8001692:	e00b      	b.n	80016ac <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME2 | CAN_TSR_RQCP2))
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <USB_HP_CAN_TX_IRQHandler+0x6c>)
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <USB_HP_CAN_TX_IRQHandler+0x50>
    {
      CAN1->TSR |= CAN_TSR_RQCP2;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <USB_HP_CAN_TX_IRQHandler+0x60>)
 80016a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016aa:	6093      	str	r3, [r2, #8]
    }

  // clear nvic pending flag
  NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 80016ac:	2013      	movs	r0, #19
 80016ae:	f7ff faa5 	bl	8000bfc <__NVIC_ClearPendingIRQ>

  md_can_mailbox_empty_callback();
 80016b2:	f7ff fa0f 	bl	8000ad4 <md_can_mailbox_empty_callback>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40006400 	.word	0x40006400
 80016c0:	04000001 	.word	0x04000001
 80016c4:	08000100 	.word	0x08000100
 80016c8:	10010000 	.word	0x10010000

080016cc <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 80016d0:	2014      	movs	r0, #20
 80016d2:	f7ff fa93 	bl	8000bfc <__NVIC_ClearPendingIRQ>
  can_main_rx0_callback();
 80016d6:	f7ff ff93 	bl	8001600 <can_main_rx0_callback>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 80016e2:	2015      	movs	r0, #21
 80016e4:	f7ff fa8a 	bl	8000bfc <__NVIC_ClearPendingIRQ>
  can_main_rx1_callback();
 80016e8:	f7ff ff9e 	bl	8001628 <can_main_rx1_callback>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(CAN1_SCE_IRQn);
 80016f4:	2016      	movs	r0, #22
 80016f6:	f7ff fa81 	bl	8000bfc <__NVIC_ClearPendingIRQ>
  can_main_sce_callback();
 80016fa:	f7ff ffa9 	bl	8001650 <can_main_sce_callback>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <__NVIC_EnableIRQ>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4906      	ldr	r1, [pc, #24]	; (8001738 <__NVIC_EnableIRQ+0x34>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_ClearPendingIRQ>:
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0c      	blt.n	8001768 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <__NVIC_ClearPendingIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	3360      	adds	r3, #96	; 0x60
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <md_gpio_init_clock+0x108>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d118      	bne.n	800180e <md_gpio_init_clock+0x42>
    {
      if (RCC->APB2ENR & RCC_APB2ENR_IOPAEN)
 80017dc:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d168      	bne.n	80018ba <md_gpio_init_clock+0xee>
        return;

      RCC_CLOCK_ENABLE_IOPA();
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a34      	ldr	r2, [pc, #208]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001806:	f023 0304 	bic.w	r3, r3, #4
 800180a:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 800180c:	e05b      	b.n	80018c6 <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOB)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a32      	ldr	r2, [pc, #200]	; (80018dc <md_gpio_init_clock+0x110>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d118      	bne.n	8001848 <md_gpio_init_clock+0x7c>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPBEN)
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d14d      	bne.n	80018be <md_gpio_init_clock+0xf2>
      RCC_CLOCK_ENABLE_IOPB();
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a2c      	ldr	r2, [pc, #176]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001840:	f023 0308 	bic.w	r3, r3, #8
 8001844:	60d3      	str	r3, [r2, #12]
  return;
 8001846:	e03e      	b.n	80018c6 <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOC)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <md_gpio_init_clock+0x114>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d118      	bne.n	8001882 <md_gpio_init_clock+0xb6>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPCEN)
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d132      	bne.n	80018c2 <md_gpio_init_clock+0xf6>
      RCC_CLOCK_ENABLE_IOPC();
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800187a:	f023 0310 	bic.w	r3, r3, #16
 800187e:	60d3      	str	r3, [r2, #12]
  return;
 8001880:	e021      	b.n	80018c6 <md_gpio_init_clock+0xfa>
  else if (p_GPIOx)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01e      	beq.n	80018c6 <md_gpio_init_clock+0xfa>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPDEN)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11a      	bne.n	80018ca <md_gpio_init_clock+0xfe>
      RCC_CLOCK_ENABLE_IOPD();
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <md_gpio_init_clock+0x10c>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <md_gpio_init_clock+0x10c>)
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80018a6:	f043 0320 	orr.w	r3, r3, #32
 80018aa:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <md_gpio_init_clock+0x10c>)
 80018b2:	f023 0320 	bic.w	r3, r3, #32
 80018b6:	60d3      	str	r3, [r2, #12]
  return;
 80018b8:	e005      	b.n	80018c6 <md_gpio_init_clock+0xfa>
        return;
 80018ba:	bf00      	nop
 80018bc:	e006      	b.n	80018cc <md_gpio_init_clock+0x100>
        return;
 80018be:	bf00      	nop
 80018c0:	e004      	b.n	80018cc <md_gpio_init_clock+0x100>
        return;
 80018c2:	bf00      	nop
 80018c4:	e002      	b.n	80018cc <md_gpio_init_clock+0x100>
  return;
 80018c6:	bf00      	nop
 80018c8:	e000      	b.n	80018cc <md_gpio_init_clock+0x100>
        return;
 80018ca:	bf00      	nop
}
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010c00 	.word	0x40010c00
 80018e0:	40011000 	.word	0x40011000

080018e4 <md_gpio_init_af_clock>:
 * Starts clock for AFIO and resets the peripheral
 * @param[void]
 * @return - void
 */
void md_gpio_init_af_clock(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  if (RCC->APB2ENR & RCC_APB2ENR_AFIOEN)
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <md_gpio_init_af_clock+0x40>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d112      	bne.n	800191a <md_gpio_init_af_clock+0x36>
    return;

  RCC_CLOCK_ENABLE_AFIO();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <md_gpio_init_af_clock+0x40>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <md_gpio_init_af_clock+0x40>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_AFIORST);
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <md_gpio_init_af_clock+0x40>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <md_gpio_init_af_clock+0x40>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_AFIORST);
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <md_gpio_init_af_clock+0x40>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <md_gpio_init_af_clock+0x40>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	60d3      	str	r3, [r2, #12]
  return;
 8001918:	e000      	b.n	800191c <md_gpio_init_af_clock+0x38>
    return;
 800191a:	bf00      	nop
}
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	460b      	mov	r3, r1
 800193c:	70bb      	strb	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	707b      	strb	r3, [r7, #1]
  md_gpio_init_clock(p_GPIOx);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff42 	bl	80017cc <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b07      	cmp	r3, #7
 800194c:	d820      	bhi.n	8001990 <md_gpio_configure_output+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	210f      	movs	r1, #15
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	78b9      	ldrb	r1, [r7, #2]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	7879      	ldrb	r1, [r7, #1]
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	3202      	adds	r2, #2
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 800198e:	e023      	b.n	80019d8 <md_gpio_configure_output+0xb0>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	3a08      	subs	r2, #8
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	210f      	movs	r1, #15
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	43d2      	mvns	r2, r2
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	78b9      	ldrb	r1, [r7, #2]
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	3a08      	subs	r2, #8
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	7879      	ldrb	r1, [r7, #1]
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	3a08      	subs	r2, #8
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	3202      	adds	r2, #2
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	605a      	str	r2, [r3, #4]
  return;
 80019d6:	bf00      	nop
}
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <md_gpio_configure_input>:
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
 80019ea:	4613      	mov	r3, r2
 80019ec:	70bb      	strb	r3, [r7, #2]
  md_gpio_init_clock(p_GPIOx);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff feec 	bl	80017cc <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	d825      	bhi.n	8001a46 <md_gpio_configure_input+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	210f      	movs	r1, #15
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	601a      	str	r2, [r3, #0]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8001a10:	78bb      	ldrb	r3, [r7, #2]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d90b      	bls.n	8001a2e <md_gpio_configure_input+0x50>
        {
          p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	3202      	adds	r2, #2
 8001a20:	2102      	movs	r1, #2
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e033      	b.n	8001a96 <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	78b9      	ldrb	r1, [r7, #2]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	3202      	adds	r2, #2
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e027      	b.n	8001a96 <md_gpio_configure_input+0xb8>
        }
    }
  else
    {
      // clear config and mode bits
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	3a08      	subs	r2, #8
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	210f      	movs	r1, #15
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	43d2      	mvns	r2, r2
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	605a      	str	r2, [r3, #4]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8001a5e:	78bb      	ldrb	r3, [r7, #2]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d90c      	bls.n	8001a7e <md_gpio_configure_input+0xa0>
        {
          p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	3a08      	subs	r2, #8
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	3202      	adds	r2, #2
 8001a70:	2102      	movs	r1, #2
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	e00b      	b.n	8001a96 <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	78b9      	ldrb	r1, [r7, #2]
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	3a08      	subs	r2, #8
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	3202      	adds	r2, #2
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]
        }
    }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP)
 8001a96:	78bb      	ldrb	r3, [r7, #2]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d107      	bne.n	8001aac <md_gpio_configure_input+0xce>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]
  else
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8001aaa:	e007      	b.n	8001abc <md_gpio_configure_input+0xde>
      p_GPIOx->BRR = (0x01 << pin_number);
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	615a      	str	r2, [r3, #20]
  return;
 8001aba:	bf00      	nop
}
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <md_gpio_configure_exti>:
 * @return - void
 */
void md_gpio_configure_exti(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                            gpio_input_config input_config,
                            gpio_exti_trigger trigger, uint8_t irq_prio)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	70fb      	strb	r3, [r7, #3]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	70bb      	strb	r3, [r7, #2]
 8001ada:	4613      	mov	r3, r2
 8001adc:	707b      	strb	r3, [r7, #1]

  md_gpio_init_af_clock();
 8001ade:	f7ff ff01 	bl	80018e4 <md_gpio_init_af_clock>
  md_gpio_configure_input(p_GPIOx, pin_number, input_config);
 8001ae2:	78ba      	ldrb	r2, [r7, #2]
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff78 	bl	80019de <md_gpio_configure_input>

  uint8_t code = GPIO_BASEADDR_TO_CODE(p_GPIOx);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a5f      	ldr	r2, [pc, #380]	; (8001c70 <md_gpio_configure_exti+0x1ac>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <md_gpio_configure_exti+0x5a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a5e      	ldr	r2, [pc, #376]	; (8001c74 <md_gpio_configure_exti+0x1b0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <md_gpio_configure_exti+0x56>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a5d      	ldr	r2, [pc, #372]	; (8001c78 <md_gpio_configure_exti+0x1b4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <md_gpio_configure_exti+0x52>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a5c      	ldr	r2, [pc, #368]	; (8001c7c <md_gpio_configure_exti+0x1b8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <md_gpio_configure_exti+0x4e>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e006      	b.n	8001b20 <md_gpio_configure_exti+0x5c>
 8001b12:	2300      	movs	r3, #0
 8001b14:	e004      	b.n	8001b20 <md_gpio_configure_exti+0x5c>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <md_gpio_configure_exti+0x5c>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <md_gpio_configure_exti+0x5c>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]

  AFIO->EXTICR[pin_number / 4] &= ~(0x0F << (pin_number % 4) * 4);
 8001b22:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <md_gpio_configure_exti+0x1bc>)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	b2d8      	uxtb	r0, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	43d2      	mvns	r2, r2
 8001b42:	494f      	ldr	r1, [pc, #316]	; (8001c80 <md_gpio_configure_exti+0x1bc>)
 8001b44:	401a      	ands	r2, r3
 8001b46:	1c83      	adds	r3, r0, #2
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[pin_number / 4] |= code << (pin_number % 4) * 4;
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	; (8001c80 <md_gpio_configure_exti+0x1bc>)
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4603      	mov	r3, r0
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	7bf9      	ldrb	r1, [r7, #15]
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4945      	ldr	r1, [pc, #276]	; (8001c80 <md_gpio_configure_exti+0x1bc>)
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	1c83      	adds	r3, r0, #2
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // mask irq in exti
  EXTI->IMR |= (0x01 << pin_number);
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <md_gpio_configure_exti+0x1c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4611      	mov	r1, r2
 8001b82:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <md_gpio_configure_exti+0x1c0>)
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6013      	str	r3, [r2, #0]

  if (trigger == GPIO_EXTI_RISING || trigger == GPIO_EXTI_RISINGFALLING)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <md_gpio_configure_exti+0xd0>
 8001b8e:	787b      	ldrb	r3, [r7, #1]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d109      	bne.n	8001ba8 <md_gpio_configure_exti+0xe4>
    {
      EXTI->RTSR |= (0x01 << pin_number);
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <md_gpio_configure_exti+0x1c0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <md_gpio_configure_exti+0x1c0>)
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6093      	str	r3, [r2, #8]
    }

  if (trigger == GPIO_EXTI_FALLING || trigger == GPIO_EXTI_RISINGFALLING)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d002      	beq.n	8001bb4 <md_gpio_configure_exti+0xf0>
 8001bae:	787b      	ldrb	r3, [r7, #1]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d109      	bne.n	8001bc8 <md_gpio_configure_exti+0x104>
    {
      EXTI->FTSR |= (0x01 << pin_number);
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <md_gpio_configure_exti+0x1c0>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <md_gpio_configure_exti+0x1c0>)
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	60d3      	str	r3, [r2, #12]
    }

  if (pin_number == GPIO_PIN_0)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d108      	bne.n	8001be0 <md_gpio_configure_exti+0x11c>
    {
      NVIC_EnableIRQ(EXTI0_IRQn);
 8001bce:	2006      	movs	r0, #6
 8001bd0:	f7ff fd98 	bl	8001704 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI0_IRQn, irq_prio);
 8001bd4:	7e3b      	ldrb	r3, [r7, #24]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2006      	movs	r0, #6
 8001bda:	f7ff fdcd 	bl	8001778 <__NVIC_SetPriority>
    {
      NVIC_SetPriority(EXTI15_10_IRQn, irq_prio);
      NVIC_EnableIRQ(EXTI15_10_IRQn);
    }

  return;
 8001bde:	e044      	b.n	8001c6a <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_1)
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <md_gpio_configure_exti+0x134>
      NVIC_EnableIRQ(EXTI1_IRQn);
 8001be6:	2007      	movs	r0, #7
 8001be8:	f7ff fd8c 	bl	8001704 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI1_IRQn, irq_prio);
 8001bec:	7e3b      	ldrb	r3, [r7, #24]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2007      	movs	r0, #7
 8001bf2:	f7ff fdc1 	bl	8001778 <__NVIC_SetPriority>
  return;
 8001bf6:	e038      	b.n	8001c6a <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_2)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d108      	bne.n	8001c10 <md_gpio_configure_exti+0x14c>
      NVIC_EnableIRQ(EXTI2_IRQn);
 8001bfe:	2008      	movs	r0, #8
 8001c00:	f7ff fd80 	bl	8001704 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI2_IRQn, irq_prio);
 8001c04:	7e3b      	ldrb	r3, [r7, #24]
 8001c06:	4619      	mov	r1, r3
 8001c08:	2008      	movs	r0, #8
 8001c0a:	f7ff fdb5 	bl	8001778 <__NVIC_SetPriority>
  return;
 8001c0e:	e02c      	b.n	8001c6a <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_3)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d108      	bne.n	8001c28 <md_gpio_configure_exti+0x164>
      NVIC_EnableIRQ(EXTI3_IRQn);
 8001c16:	2009      	movs	r0, #9
 8001c18:	f7ff fd74 	bl	8001704 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI3_IRQn, irq_prio);
 8001c1c:	7e3b      	ldrb	r3, [r7, #24]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	2009      	movs	r0, #9
 8001c22:	f7ff fda9 	bl	8001778 <__NVIC_SetPriority>
  return;
 8001c26:	e020      	b.n	8001c6a <md_gpio_configure_exti+0x1a6>
  else if (pin_number == GPIO_PIN_4)
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d108      	bne.n	8001c40 <md_gpio_configure_exti+0x17c>
      NVIC_EnableIRQ(EXTI4_IRQn);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f7ff fd68 	bl	8001704 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI4_IRQn, irq_prio);
 8001c34:	7e3b      	ldrb	r3, [r7, #24]
 8001c36:	4619      	mov	r1, r3
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f7ff fd9d 	bl	8001778 <__NVIC_SetPriority>
  return;
 8001c3e:	e014      	b.n	8001c6a <md_gpio_configure_exti+0x1a6>
  else if (pin_number < GPIO_PIN_10)
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d808      	bhi.n	8001c58 <md_gpio_configure_exti+0x194>
      NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c46:	2017      	movs	r0, #23
 8001c48:	f7ff fd5c 	bl	8001704 <__NVIC_EnableIRQ>
      NVIC_SetPriority(EXTI9_5_IRQn, irq_prio);
 8001c4c:	7e3b      	ldrb	r3, [r7, #24]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	2017      	movs	r0, #23
 8001c52:	f7ff fd91 	bl	8001778 <__NVIC_SetPriority>
  return;
 8001c56:	e008      	b.n	8001c6a <md_gpio_configure_exti+0x1a6>
      NVIC_SetPriority(EXTI15_10_IRQn, irq_prio);
 8001c58:	7e3b      	ldrb	r3, [r7, #24]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2028      	movs	r0, #40	; 0x28
 8001c5e:	f7ff fd8b 	bl	8001778 <__NVIC_SetPriority>
      NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c62:	2028      	movs	r0, #40	; 0x28
 8001c64:	f7ff fd4e 	bl	8001704 <__NVIC_EnableIRQ>
  return;
 8001c68:	bf00      	nop
}
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40010800 	.word	0x40010800
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40011400 	.word	0x40011400
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40010400 	.word	0x40010400

08001c88 <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
 8001c94:	4613      	mov	r3, r2
 8001c96:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8001c98:	78bb      	ldrb	r3, [r7, #2]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8001cac:	e00a      	b.n	8001cc4 <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8001cae:	78bb      	ldrb	r3, [r7, #2]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	615a      	str	r2, [r3, #20]
  return;
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
}
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <md_gpio_toggle_pin>:
 * @param[*p_GPIOx] - gpiox base address
 * @param[pin_number] - pin number enum @gpio_pin_number
 * @return - void
 */
void md_gpio_toggle_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
  p_GPIOx->ODR ^= (0x01 << pin_number);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	405a      	eors	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
  return;
 8001cec:	bf00      	nop
}
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <md_gpio_exti4_callback>:
/*
 * callback for exti 4 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti4_callback(void) {}
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <md_gpio_exti3_callback>:
/*
 * callback for exti 3 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti3_callback(void) {}
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <md_gpio_exti2_callback>:
/*
 * callback for exti 2 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti2_callback(void) {}
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <md_gpio_exti1_callback>:
/*
 * callback for exti 1 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti1_callback(void) {}
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <md_gpio_exti0_callback>:
/*
 * callback for exti 0 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti0_callback(void) {}
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
	...

08001d34 <gpio_exti15_10_get_pin>:
/*
 * find first exti pending number from registers 15-10/9-5
 * @return - pin number;
 */
static uint8_t gpio_exti15_10_get_pin(IRQn_Type exti_irq)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  uint32_t temp = EXTI->PR;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <gpio_exti15_10_get_pin+0x90>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	60fb      	str	r3, [r7, #12]

  if (exti_irq == EXTI9_5_IRQn)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b17      	cmp	r3, #23
 8001d4a:	d118      	bne.n	8001d7e <gpio_exti15_10_get_pin+0x4a>
    {
      temp >>= 5;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	72fb      	strb	r3, [r7, #11]
 8001d56:	e00e      	b.n	8001d76 <gpio_exti15_10_get_pin+0x42>
        {
          if (temp & 0x01)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <gpio_exti15_10_get_pin+0x36>
            return (i + 5);
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	3305      	adds	r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	e026      	b.n	8001db8 <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	3301      	adds	r3, #1
 8001d74:	72fb      	strb	r3, [r7, #11]
 8001d76:	7afb      	ldrb	r3, [r7, #11]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d9ed      	bls.n	8001d58 <gpio_exti15_10_get_pin+0x24>
 8001d7c:	e01b      	b.n	8001db6 <gpio_exti15_10_get_pin+0x82>
        }
    }
  else if (exti_irq == EXTI15_10_IRQn)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b28      	cmp	r3, #40	; 0x28
 8001d84:	d117      	bne.n	8001db6 <gpio_exti15_10_get_pin+0x82>
    {
      temp >>= 10;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0a9b      	lsrs	r3, r3, #10
 8001d8a:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	72bb      	strb	r3, [r7, #10]
 8001d90:	e00e      	b.n	8001db0 <gpio_exti15_10_get_pin+0x7c>
        {
          if (temp & 0x01)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <gpio_exti15_10_get_pin+0x70>
            return (i + 10);
 8001d9c:	7abb      	ldrb	r3, [r7, #10]
 8001d9e:	330a      	adds	r3, #10
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e009      	b.n	8001db8 <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8001daa:	7abb      	ldrb	r3, [r7, #10]
 8001dac:	3301      	adds	r3, #1
 8001dae:	72bb      	strb	r3, [r7, #10]
 8001db0:	7abb      	ldrb	r3, [r7, #10]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9ed      	bls.n	8001d92 <gpio_exti15_10_get_pin+0x5e>
        }
    }

  return 0;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <EXTI15_10_IRQHandler>:

// Vector table handlers for exti

void EXTI15_10_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI15_10_IRQn);
 8001dce:	2028      	movs	r0, #40	; 0x28
 8001dd0:	f7ff ffb0 	bl	8001d34 <gpio_exti15_10_get_pin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <EXTI15_10_IRQHandler+0x3c>)
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	79fa      	ldrb	r2, [r7, #7]
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4611      	mov	r1, r2
 8001de6:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <EXTI15_10_IRQHandler+0x3c>)
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001dec:	2028      	movs	r0, #40	; 0x28
 8001dee:	f7ff fca5 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fe5d 	bl	8000ab4 <md_gpio_exti15_10_callback>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40010400 	.word	0x40010400

08001e08 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI9_5_IRQn);
 8001e0e:	2017      	movs	r0, #23
 8001e10:	f7ff ff90 	bl	8001d34 <gpio_exti15_10_get_pin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <EXTI9_5_IRQHandler+0x3c>)
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4611      	mov	r1, r2
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <EXTI9_5_IRQHandler+0x3c>)
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8001e2c:	2017      	movs	r0, #23
 8001e2e:	f7ff fc85 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fe3d 	bl	8000ab4 <md_gpio_exti15_10_callback>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40010400 	.word	0x40010400

08001e48 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 4);
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <EXTI4_IRQHandler+0x20>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <EXTI4_IRQHandler+0x20>)
 8001e52:	f043 0310 	orr.w	r3, r3, #16
 8001e56:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8001e58:	200a      	movs	r0, #10
 8001e5a:	f7ff fc6f 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti4_callback();
 8001e5e:	f7ff ff4a 	bl	8001cf6 <md_gpio_exti4_callback>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40010400 	.word	0x40010400

08001e6c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 3);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <EXTI3_IRQHandler+0x20>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <EXTI3_IRQHandler+0x20>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8001e7c:	2009      	movs	r0, #9
 8001e7e:	f7ff fc5d 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti3_callback();
 8001e82:	f7ff ff3e 	bl	8001d02 <md_gpio_exti3_callback>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40010400 	.word	0x40010400

08001e90 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 2);
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <EXTI2_IRQHandler+0x20>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <EXTI2_IRQHandler+0x20>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8001ea0:	2008      	movs	r0, #8
 8001ea2:	f7ff fc4b 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti2_callback();
 8001ea6:	f7ff ff32 	bl	8001d0e <md_gpio_exti2_callback>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 1);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <EXTI1_IRQHandler+0x20>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <EXTI1_IRQHandler+0x20>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001ec4:	2007      	movs	r0, #7
 8001ec6:	f7ff fc39 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti1_callback();
 8001eca:	f7ff ff26 	bl	8001d1a <md_gpio_exti1_callback>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 0);
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <EXTI0_IRQHandler+0x20>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <EXTI0_IRQHandler+0x20>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001ee8:	2006      	movs	r0, #6
 8001eea:	f7ff fc27 	bl	800173c <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti0_callback();
 8001eee:	f7ff ff1a 	bl	8001d26 <md_gpio_exti0_callback>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40010400 	.word	0x40010400

08001efc <md_rcc_configure_sysclk>:
 * @return - void
 */
void md_rcc_configure_sysclk(rcc_sysclk_source_t sysclk_source,
                             rcc_pll_source_t pll_source,
                             rcc_pll1_mul_t pll1_mul, rcc_hse_div_t hse_div)
{
 8001efc:	b490      	push	{r4, r7}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4604      	mov	r4, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71bb      	strb	r3, [r7, #6]
 8001f12:	460b      	mov	r3, r1
 8001f14:	717b      	strb	r3, [r7, #5]
 8001f16:	4613      	mov	r3, r2
 8001f18:	713b      	strb	r3, [r7, #4]
  // enable HSI
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSI ||
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <md_rcc_configure_sysclk+0x2a>
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <md_rcc_configure_sysclk+0x44>
      pll_source == RCC_PLL_SOURCE_HSI)
    {
      SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a37      	ldr	r2, [pc, #220]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6013      	str	r3, [r2, #0]
      // wait until HSI is ready
      while (!(RCC->CR & RCC_CR_HSIRDY))
 8001f32:	bf00      	nop
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f9      	beq.n	8001f34 <md_rcc_configure_sysclk+0x38>
        ;
    }

  // enable HSE
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSE ||
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d002      	beq.n	8001f4c <md_rcc_configure_sysclk+0x50>
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10c      	bne.n	8001f66 <md_rcc_configure_sysclk+0x6a>
      pll_source == RCC_PLL_SOURCE_HSE)
    {
      SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
      // wait until HSE is ready
      while (!(RCC->CR & RCC_CR_HSERDY))
 8001f58:	bf00      	nop
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f9      	beq.n	8001f5a <md_rcc_configure_sysclk+0x5e>
        ;
    }

  // configure PLL
  if (sysclk_source == RCC_SYSCLK_SOURCE_PLL)
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d139      	bne.n	8001fe0 <md_rcc_configure_sysclk+0xe4>
    {
      // choose PLL source and multiplier
      RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a25      	ldr	r2, [pc, #148]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (pll_source << RCC_CFGR_PLLSRC_Pos);
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	79ba      	ldrb	r2, [r7, #6]
 8001f7e:	0412      	lsls	r2, r2, #16
 8001f80:	4611      	mov	r1, r2
 8001f82:	4a21      	ldr	r2, [pc, #132]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6053      	str	r3, [r2, #4]

      RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f8e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001f92:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (pll1_mul << RCC_CFGR_PLLMULL_Pos);
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	797a      	ldrb	r2, [r7, #5]
 8001f9a:	0492      	lsls	r2, r2, #18
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6053      	str	r3, [r2, #4]

      // if source is HSE choose prediv
      if (pll_source == RCC_PLL_SOURCE_HSE)
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10d      	bne.n	8001fc6 <md_rcc_configure_sysclk+0xca>
        {
          RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a16      	ldr	r2, [pc, #88]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fb4:	6053      	str	r3, [r2, #4]
          RCC->CFGR |= (hse_div << RCC_CFGR_PLLXTPRE_Pos);
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	793a      	ldrb	r2, [r7, #4]
 8001fbc:	0452      	lsls	r2, r2, #17
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4a11      	ldr	r2, [pc, #68]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6053      	str	r3, [r2, #4]
        }

      // enable PLL
      SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]
      // wait until PLL is ready
      while (!(RCC->CR & RCC_CR_PLLRDY))
 8001fd2:	bf00      	nop
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f9      	beq.n	8001fd4 <md_rcc_configure_sysclk+0xd8>
        ;
    }

  // change sysclk source
  RCC->CFGR |= (sysclk_source << RCC_CFGR_SW_Pos);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

  // wait until sys clock is switched
  while (!(RCC->CFGR & (sysclk_source << 2U)))
 8001fec:	bf00      	nop
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <md_rcc_configure_sysclk+0x10c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	79fa      	ldrb	r2, [r7, #7]
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f8      	beq.n	8001fee <md_rcc_configure_sysclk+0xf2>
    ;

  return;
 8001ffc:	bf00      	nop
}
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bc90      	pop	{r4, r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <md_rcc_configure_prescalers>:
 */
void md_rcc_configure_prescalers(rcc_ahb_prescaler_t ahb_prescaler,
                                 rcc_apb_prescaler_t apb1_prescaler,
                                 rcc_apb_prescaler_t apb2_prescaler,
                                 rcc_adc_prescaler_t adc_prescaler)
{
 800200c:	b490      	push	{r4, r7}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4623      	mov	r3, r4
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	4603      	mov	r3, r0
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	460b      	mov	r3, r1
 8002024:	717b      	strb	r3, [r7, #5]
 8002026:	4613      	mov	r3, r2
 8002028:	713b      	strb	r3, [r7, #4]
  // configure ahb prescaler
  RCC->CFGR |= (ahb_prescaler << RCC_CFGR_HPRE_Pos);
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	4611      	mov	r1, r2
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 8002036:	430b      	orrs	r3, r1
 8002038:	6053      	str	r3, [r2, #4]

  // configure apb1/apb2 prescalers
  RCC->CFGR |= (apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	79ba      	ldrb	r2, [r7, #6]
 8002040:	0212      	lsls	r2, r2, #8
 8002042:	4611      	mov	r1, r2
 8002044:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 8002046:	430b      	orrs	r3, r1
 8002048:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	797a      	ldrb	r2, [r7, #5]
 8002050:	02d2      	lsls	r2, r2, #11
 8002052:	4611      	mov	r1, r2
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 8002056:	430b      	orrs	r3, r1
 8002058:	6053      	str	r3, [r2, #4]

  // configure adc prescaler
  RCC->CFGR |= (adc_prescaler << RCC_CFGR_ADCPRE_Pos);
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	793a      	ldrb	r2, [r7, #4]
 8002060:	0392      	lsls	r2, r2, #14
 8002062:	4611      	mov	r1, r2
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <md_rcc_configure_prescalers+0x68>)
 8002066:	430b      	orrs	r3, r1
 8002068:	6053      	str	r3, [r2, #4]

  return;
 800206a:	bf00      	nop
}
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bc90      	pop	{r4, r7}
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000

08002078 <md_rcc_get_sysclk>:
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <md_rcc_get_sysclk+0x34>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d00a      	beq.n	800209e <md_rcc_get_sysclk+0x26>
 8002088:	2b08      	cmp	r3, #8
 800208a:	d80c      	bhi.n	80020a6 <md_rcc_get_sysclk+0x2e>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <md_rcc_get_sysclk+0x1e>
 8002090:	2b04      	cmp	r3, #4
 8002092:	d002      	beq.n	800209a <md_rcc_get_sysclk+0x22>
 8002094:	e007      	b.n	80020a6 <md_rcc_get_sysclk+0x2e>
    {
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <md_rcc_get_sysclk+0x38>)
 8002098:	e006      	b.n	80020a8 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <md_rcc_get_sysclk+0x38>)
 800209c:	e004      	b.n	80020a8 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 800209e:	f000 f945 	bl	800232c <rcc_calculate_pll_sysclk>
 80020a2:	4603      	mov	r3, r0
 80020a4:	e000      	b.n	80020a8 <md_rcc_get_sysclk+0x30>
      break;
    }

  return 0;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200

080020b4 <md_rcc_get_hclk>:
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 80020ba:	f7ff ffdd 	bl	8002078 <md_rcc_get_sysclk>
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t ahb_prescaler = rcc_get_ahb_prescaler();
 80020c0:	f000 f852 	bl	8002168 <rcc_get_ahb_prescaler>
 80020c4:	6038      	str	r0, [r7, #0]
  return sysclk / ahb_prescaler;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <md_rcc_get_pclk>:
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint32_t pclk_x)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  uint32_t hclk = md_rcc_get_hclk();
 80020de:	f7ff ffe9 	bl	80020b4 <md_rcc_get_hclk>
 80020e2:	60f8      	str	r0, [r7, #12]
  uint32_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f897 	bl	8002218 <rcc_get_apb_prescaler>
 80020ea:	60b8      	str	r0, [r7, #8]
  return hclk / apb_prescaler;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  uint32_t pclk2 = md_rcc_get_pclk(2);
 8002102:	2002      	movs	r0, #2
 8002104:	f7ff ffe7 	bl	80020d6 <md_rcc_get_pclk>
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t adc_prescaler = rcc_get_adc_prescaler();
 800210a:	f000 f94b 	bl	80023a4 <rcc_get_adc_prescaler>
 800210e:	6038      	str	r0, [r7, #0]
  return pclk2 / adc_prescaler;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <md_rcc_get_frequencies>:
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 8002128:	f7ff ffa6 	bl	8002078 <md_rcc_get_sysclk>
 800212c:	4602      	mov	r2, r0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8002132:	f7ff ffbf 	bl	80020b4 <md_rcc_get_hclk>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff ffca 	bl	80020d6 <md_rcc_get_pclk>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 8002148:	2002      	movs	r0, #2
 800214a:	f7ff ffc4 	bl	80020d6 <md_rcc_get_pclk>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 8002154:	f7ff ffd2 	bl	80020fc <md_rcc_get_adcclk>
 8002158:	4602      	mov	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]

  return;
 800215e:	bf00      	nop
}
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <rcc_get_ahb_prescaler>:
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint32_t rcc_get_ahb_prescaler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
  uint32_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 8002172:	4b28      	ldr	r3, [pc, #160]	; (8002214 <rcc_get_ahb_prescaler+0xac>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d840      	bhi.n	8002206 <rcc_get_ahb_prescaler+0x9e>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <rcc_get_ahb_prescaler+0x24>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	080021cd 	.word	0x080021cd
 8002190:	08002207 	.word	0x08002207
 8002194:	08002207 	.word	0x08002207
 8002198:	08002207 	.word	0x08002207
 800219c:	08002207 	.word	0x08002207
 80021a0:	08002207 	.word	0x08002207
 80021a4:	08002207 	.word	0x08002207
 80021a8:	08002207 	.word	0x08002207
 80021ac:	080021d3 	.word	0x080021d3
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	080021df 	.word	0x080021df
 80021b8:	080021e5 	.word	0x080021e5
 80021bc:	080021eb 	.word	0x080021eb
 80021c0:	080021f1 	.word	0x080021f1
 80021c4:	080021f7 	.word	0x080021f7
 80021c8:	080021ff 	.word	0x080021ff

  // convert bit code to prescaler value
  switch (bitvalue)
    {
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 80021cc:	2301      	movs	r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
      break;
 80021d0:	e019      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 80021d2:	2302      	movs	r3, #2
 80021d4:	607b      	str	r3, [r7, #4]
      break;
 80021d6:	e016      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 80021d8:	2304      	movs	r3, #4
 80021da:	607b      	str	r3, [r7, #4]
      break;
 80021dc:	e013      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 80021de:	2308      	movs	r3, #8
 80021e0:	607b      	str	r3, [r7, #4]
      break;
 80021e2:	e010      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 80021e4:	2310      	movs	r3, #16
 80021e6:	607b      	str	r3, [r7, #4]
      break;
 80021e8:	e00d      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	607b      	str	r3, [r7, #4]
      break;
 80021ee:	e00a      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	607b      	str	r3, [r7, #4]
      break;
 80021f4:	e007      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 80021f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fa:	607b      	str	r3, [r7, #4]
      break;
 80021fc:	e003      	b.n	8002206 <rcc_get_ahb_prescaler+0x9e>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 80021fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002202:	607b      	str	r3, [r7, #4]
      break;
 8002204:	bf00      	nop
    }

  return ahb_prescaler;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <rcc_get_apb_prescaler>:
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint32_t rcc_get_apb_prescaler(uint32_t pclk)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t apb_prescaler = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  uint32_t bitvalue = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]

  // get bit value from register
  switch (pclk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d003      	beq.n	8002236 <rcc_get_apb_prescaler+0x1e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d007      	beq.n	8002244 <rcc_get_apb_prescaler+0x2c>
 8002234:	e00d      	b.n	8002252 <rcc_get_apb_prescaler+0x3a>
    {
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <rcc_get_apb_prescaler+0x94>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	60bb      	str	r3, [r7, #8]
      break;
 8002242:	e006      	b.n	8002252 <rcc_get_apb_prescaler+0x3a>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <rcc_get_apb_prescaler+0x94>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0adb      	lsrs	r3, r3, #11
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60bb      	str	r3, [r7, #8]
      break;
 8002250:	bf00      	nop
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b07      	cmp	r3, #7
 8002256:	d822      	bhi.n	800229e <rcc_get_apb_prescaler+0x86>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <rcc_get_apb_prescaler+0x48>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002281 	.word	0x08002281
 8002264:	0800229f 	.word	0x0800229f
 8002268:	0800229f 	.word	0x0800229f
 800226c:	0800229f 	.word	0x0800229f
 8002270:	08002287 	.word	0x08002287
 8002274:	0800228d 	.word	0x0800228d
 8002278:	08002293 	.word	0x08002293
 800227c:	08002299 	.word	0x08002299

  // convert bit code to prescaler value
  switch (bitvalue)
    {
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 8002280:	2301      	movs	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
      break;
 8002284:	e00b      	b.n	800229e <rcc_get_apb_prescaler+0x86>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 8002286:	2302      	movs	r3, #2
 8002288:	60fb      	str	r3, [r7, #12]
      break;
 800228a:	e008      	b.n	800229e <rcc_get_apb_prescaler+0x86>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 800228c:	2304      	movs	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
      break;
 8002290:	e005      	b.n	800229e <rcc_get_apb_prescaler+0x86>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 8002292:	2308      	movs	r3, #8
 8002294:	60fb      	str	r3, [r7, #12]
      break;
 8002296:	e002      	b.n	800229e <rcc_get_apb_prescaler+0x86>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 8002298:	2310      	movs	r3, #16
 800229a:	60fb      	str	r3, [r7, #12]
      break;
 800229c:	bf00      	nop
    }

  return apb_prescaler;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <rcc_get_pll_multiplier>:
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_get_pll_multiplier(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
  uint32_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <rcc_get_pll_multiplier+0x78>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0c9b      	lsrs	r3, r3, #18
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3b02      	subs	r3, #2
 80022c6:	2b0b      	cmp	r3, #11
 80022c8:	d828      	bhi.n	800231c <rcc_get_pll_multiplier+0x6c>
 80022ca:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <rcc_get_pll_multiplier+0x20>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	08002301 	.word	0x08002301
 80022d4:	08002305 	.word	0x08002305
 80022d8:	08002309 	.word	0x08002309
 80022dc:	0800230d 	.word	0x0800230d
 80022e0:	08002311 	.word	0x08002311
 80022e4:	08002315 	.word	0x08002315
 80022e8:	0800231d 	.word	0x0800231d
 80022ec:	0800231d 	.word	0x0800231d
 80022f0:	0800231d 	.word	0x0800231d
 80022f4:	0800231d 	.word	0x0800231d
 80022f8:	0800231d 	.word	0x0800231d
 80022fc:	08002319 	.word	0x08002319

  switch (bitvalue)
    {
    case (RCC_PLL1_MUL_X4):
      return 4;
 8002300:	2304      	movs	r3, #4
 8002302:	e00c      	b.n	800231e <rcc_get_pll_multiplier+0x6e>

    case (RCC_PLL1_MUL_X5):
      return 5;
 8002304:	2305      	movs	r3, #5
 8002306:	e00a      	b.n	800231e <rcc_get_pll_multiplier+0x6e>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8002308:	2306      	movs	r3, #6
 800230a:	e008      	b.n	800231e <rcc_get_pll_multiplier+0x6e>

    case (RCC_PLL1_MUL_X7):
      return 7;
 800230c:	2307      	movs	r3, #7
 800230e:	e006      	b.n	800231e <rcc_get_pll_multiplier+0x6e>

    case (RCC_PLL1_MUL_X8):
      return 8;
 8002310:	2308      	movs	r3, #8
 8002312:	e004      	b.n	800231e <rcc_get_pll_multiplier+0x6e>

    case (RCC_PLL1_MUL_X9):
      return 9;
 8002314:	2309      	movs	r3, #9
 8002316:	e002      	b.n	800231e <rcc_get_pll_multiplier+0x6e>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8002318:	230d      	movs	r3, #13
 800231a:	e000      	b.n	800231e <rcc_get_pll_multiplier+0x6e>
    }

  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000

0800232c <rcc_calculate_pll_sysclk>:
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
  uint32_t pll_multiplier = rcc_get_pll_multiplier();
 8002332:	f7ff ffbd 	bl	80022b0 <rcc_get_pll_multiplier>
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t hse_divider = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclk_value = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE)
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <rcc_calculate_pll_sysclk+0x6c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <rcc_calculate_pll_sysclk+0x24>
    {
      hse_divider = 2;
 800234c:	2302      	movs	r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
    }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC)
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <rcc_calculate_pll_sysclk+0x6c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <rcc_calculate_pll_sysclk+0x38>
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d006      	beq.n	8002370 <rcc_calculate_pll_sysclk+0x44>
 8002362:	e00e      	b.n	8002382 <rcc_calculate_pll_sysclk+0x56>
    {
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <rcc_calculate_pll_sysclk+0x70>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	60bb      	str	r3, [r7, #8]
      break;
 800236e:	e008      	b.n	8002382 <rcc_calculate_pll_sysclk+0x56>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 8002370:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <rcc_calculate_pll_sysclk+0x74>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	60bb      	str	r3, [r7, #8]
      break;
 8002380:	bf00      	nop
    }

  // if multiplier is 6,5
  if (pll_multiplier == 13)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0d      	cmp	r3, #13
 8002386:	d102      	bne.n	800238e <rcc_calculate_pll_sysclk+0x62>
    {
      sysclk_value = sysclk_value / 2;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
    }

  return sysclk_value;
 800238e:	68bb      	ldr	r3, [r7, #8]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	003d0900 	.word	0x003d0900
 80023a0:	007a1200 	.word	0x007a1200

080023a4 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint32_t rcc_get_adc_prescaler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
  uint32_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <rcc_get_adc_prescaler+0x4c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0b9b      	lsrs	r3, r3, #14
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d813      	bhi.n	80023e4 <rcc_get_adc_prescaler+0x40>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <rcc_get_adc_prescaler+0x20>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023e1 	.word	0x080023e1

  switch (bitvalue)
    {
    case (RCC_ADC_PRESCALER_DIV2):
      return 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	e006      	b.n	80023e6 <rcc_get_adc_prescaler+0x42>

    case (RCC_ADC_PRESCALER_DIV4):
      return 4;
 80023d8:	2304      	movs	r3, #4
 80023da:	e004      	b.n	80023e6 <rcc_get_adc_prescaler+0x42>

    case (RCC_ADC_PRESCALER_DIV6):
      return 6;
 80023dc:	2306      	movs	r3, #6
 80023de:	e002      	b.n	80023e6 <rcc_get_adc_prescaler+0x42>

    case (RCC_ADC_PRESCALER_DIV8):
      return 8;
 80023e0:	2308      	movs	r3, #8
 80023e2:	e000      	b.n	80023e6 <rcc_get_adc_prescaler+0x42>
    }

  return 0;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40021000 	.word	0x40021000

080023f4 <md_set_if_condition>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	73fb      	strb	r3, [r7, #15]
  if (condition == true)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <md_set_if_condition+0x22>
      *reg |= bit;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	431a      	orrs	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	e006      	b.n	8002424 <md_set_if_condition+0x30>
      *reg &= ~(bit);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <md_spi_init>:
/*
 * Init handlers gpio and clock
 * @param[*p_hSPIx] - can struct handler @spi_handler
 * @return - void
 */
void md_spi_init(spi_handle_t *p_hSPIx) { spi_init_clock(p_hSPIx); }
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8e6 	bl	8002608 <spi_init_clock>
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <md_spi_init_basic>:
 * @param[*p_hSPIx] - spix base address @spi_handler
 * @param[*p_spi_config] - pointer to basic configuration struct @spi_config
 * @return - void
 */
void md_spi_init_basic(spi_handle_t *p_hSPIx, spi_config_t *p_spi_config)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  // init pins
  spi_init_gpio(p_hSPIx, p_spi_config);
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8fd 	bl	8002650 <spi_init_gpio>

  // clock phase
  md_set_if_condition(p_spi_config->clock_second_edge_capture,
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7998      	ldrb	r0, [r3, #6]
                      &(p_hSPIx->p_SPIx->CR1), SPI_CR1_CPHA);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
  md_set_if_condition(p_spi_config->clock_second_edge_capture,
 800245e:	2201      	movs	r2, #1
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff ffc7 	bl	80023f4 <md_set_if_condition>

  // clock polarity
  md_set_if_condition(p_spi_config->clock_second_edge_capture,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7998      	ldrb	r0, [r3, #6]
                      &(p_hSPIx->p_SPIx->CR1), SPI_CR1_CPOL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
  md_set_if_condition(p_spi_config->clock_second_edge_capture,
 800246e:	2202      	movs	r2, #2
 8002470:	4619      	mov	r1, r3
 8002472:	f7ff ffbf 	bl	80023f4 <md_set_if_condition>

  // data format
  md_set_if_condition(p_spi_config->data_format_16bit, &(p_hSPIx->p_SPIx->CR1),
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	78d8      	ldrb	r0, [r3, #3]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002482:	4619      	mov	r1, r3
 8002484:	f7ff ffb6 	bl	80023f4 <md_set_if_condition>
                      SPI_CR1_DFF);

  // full duplex
  if (p_spi_config->full_duplex == true)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <md_spi_init_basic+0x6c>
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_RXONLY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_BIDIMODE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]
    {
      //!!! ADD SIMPELX !!!
    }

  // lsb/msb first
  md_set_if_condition(p_spi_config->lsb_first, &(p_hSPIx->p_SPIx->CR1),
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	7918      	ldrb	r0, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7ff ff9a 	bl	80023f4 <md_set_if_condition>
                      SPI_CR1_LSBFIRST);

  // nss manangement
  if (p_spi_config->software_nss_management)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	789b      	ldrb	r3, [r3, #2]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <md_spi_init_basic+0xa6>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSI);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e007      	b.n	80024fa <md_spi_init_basic+0xb6>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]
    }

  // master mode
  md_set_if_condition(p_spi_config->master_mode, &(p_hSPIx->p_SPIx->CR1),
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	7818      	ldrb	r0, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2204      	movs	r2, #4
 8002504:	4619      	mov	r1, r3
 8002506:	f7ff ff75 	bl	80023f4 <md_set_if_condition>
                      SPI_CR1_MSTR);

  // prescaler
  p_hSPIx->p_SPIx->CR1 &= ~(SPI_CR1_BR_Msk);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002518:	601a      	str	r2, [r3, #0]
  p_hSPIx->p_SPIx->CR1 |= (p_spi_config->prescaler << SPI_CR1_BR_Pos);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	79db      	ldrb	r3, [r3, #7]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4619      	mov	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253e:	601a      	str	r2, [r3, #0]

  return;
 8002540:	bf00      	nop
}
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <md_spi_tx_polling>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - void
 */
spi_error_t md_spi_tx_polling(spi_handle_t *p_hSPIx, uint8_t *p_data_buffer,
                              uint32_t data_lenght, uint32_t timeout_ms)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  uint32_t time_tick = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  uint32_t data_counter = data_lenght;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	617b      	str	r3, [r7, #20]

  // enable SPI
  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256c:	601a      	str	r2, [r3, #0]

  // check if other transfer is not ongoing
  if (p_hSPIx->spi_tx_status != SPI_TX_IDLE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	7c5b      	ldrb	r3, [r3, #17]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <md_spi_tx_polling+0x3a>
    {
      p_hSPIx->spi_error = SPI_ERR_TX_COLLISION;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	229c      	movs	r2, #156	; 0x9c
 800257a:	741a      	strb	r2, [r3, #16]
      return SPI_ERR_TX_COLLISION;
 800257c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002580:	e03d      	b.n	80025fe <md_spi_tx_polling+0xb6>
    }

  // change status of tx line
  p_hSPIx->spi_tx_status = SPI_TX_POLLING;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	745a      	strb	r2, [r3, #17]

  while (data_counter > 0)
 8002588:	e027      	b.n	80025da <md_spi_tx_polling+0x92>
    {
      // waint until transmit buffer is empty
      time_tick = md_systick_get_tick();
 800258a:	f000 f915 	bl	80027b8 <md_systick_get_tick>
 800258e:	6138      	str	r0, [r7, #16]
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 8002590:	e010      	b.n	80025b4 <md_spi_tx_polling+0x6c>
        {
          if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8002592:	f000 f911 	bl	80027b8 <md_systick_get_tick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d208      	bcs.n	80025b4 <md_spi_tx_polling+0x6c>
            {
              p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	229d      	movs	r2, #157	; 0x9d
 80025a6:	741a      	strb	r2, [r3, #16]
              p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	745a      	strb	r2, [r3, #17]
              return SPI_ERR_TIMEOUT_TXE;
 80025ae:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80025b2:	e024      	b.n	80025fe <md_spi_tx_polling+0xb6>
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0e7      	beq.n	8002592 <md_spi_tx_polling+0x4a>
            }
        }

      // put data in data register
      p_hSPIx->p_SPIx->DR = p_data_buffer[data_lenght - data_counter];
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	4413      	add	r3, r2
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60da      	str	r2, [r3, #12]
      data_counter--;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while (data_counter > 0)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1d4      	bne.n	800258a <md_spi_tx_polling+0x42>
    }

  // wait for last byte transmission
  while (p_hSPIx->p_SPIx->SR & SPI_SR_BSY)
 80025e0:	bf00      	nop
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f8      	bne.n	80025e2 <md_spi_tx_polling+0x9a>
    ;

  p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	229d      	movs	r2, #157	; 0x9d
 80025f4:	741a      	strb	r2, [r3, #16]
  p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	745a      	strb	r2, [r3, #17]
  return SPI_ERR_NOERR;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <spi_init_clock>:
 * Starts clock for SPI and resets the peripheral
 * @param[*p_hSPIx] - spix base address
 * @return - void
 */
static void spi_init_clock(spi_handle_t *p_hSPIx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if (RCC->APB2ENR & RCC_APB2ENR_SPI1EN)
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <spi_init_clock+0x44>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d112      	bne.n	8002642 <spi_init_clock+0x3a>
    return;

  RCC_CLOCK_ENABLE_SPI1();
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <spi_init_clock+0x44>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <spi_init_clock+0x44>)
 8002622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002626:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <spi_init_clock+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <spi_init_clock+0x44>)
 800262e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002632:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <spi_init_clock+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <spi_init_clock+0x44>)
 800263a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263e:	60d3      	str	r3, [r2, #12]

  return;
 8002640:	e000      	b.n	8002644 <spi_init_clock+0x3c>
    return;
 8002642:	bf00      	nop
}
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000

08002650 <spi_init_gpio>:
 * @param[*p_hSPIx] - spix base address @spi_handler
 * @param[*p_spi_config] - pointer to spi configuration structure @spi_handler
 * @return - void
 */
static void spi_init_gpio(spi_handle_t *p_hSPIx, spi_config_t *p_spi_config)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  // master mode
  if (p_spi_config->master_mode == true)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d022      	beq.n	80026a8 <spi_init_gpio+0x58>
    {
      // SCK - PA5
      md_gpio_configure_output(GPIOA, GPIO_PIN_5, GPIO_SPEED_10MHZ,
 8002662:	2302      	movs	r3, #2
 8002664:	2201      	movs	r2, #1
 8002666:	2105      	movs	r1, #5
 8002668:	4821      	ldr	r0, [pc, #132]	; (80026f0 <spi_init_gpio+0xa0>)
 800266a:	f7ff f95d 	bl	8001928 <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (p_spi_config->full_duplex == true)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <spi_init_gpio+0x30>
        {
          // MISO - PA6 // REMAP PB4
          md_gpio_configure_input(GPIOA, GPIO_PIN_6, GPIO_INPUT_PULLUP);
 8002676:	2202      	movs	r2, #2
 8002678:	2106      	movs	r1, #6
 800267a:	481d      	ldr	r0, [pc, #116]	; (80026f0 <spi_init_gpio+0xa0>)
 800267c:	f7ff f9af 	bl	80019de <md_gpio_configure_input>
        }

      // MOSI PA7 // REMAP PB5
      md_gpio_configure_output(GPIOA, GPIO_PIN_7, GPIO_SPEED_10MHZ,
 8002680:	2302      	movs	r3, #2
 8002682:	2201      	movs	r2, #1
 8002684:	2107      	movs	r1, #7
 8002686:	481a      	ldr	r0, [pc, #104]	; (80026f0 <spi_init_gpio+0xa0>)
 8002688:	f7ff f94e 	bl	8001928 <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (p_spi_config->software_nss_management == false)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d026      	beq.n	80026e8 <spi_init_gpio+0x98>
        {
          // NSS - PA4
          md_gpio_configure_output(GPIOA, GPIO_PIN_4, GPIO_SPEED_50MHZ,
 800269a:	2302      	movs	r3, #2
 800269c:	2203      	movs	r2, #3
 800269e:	2104      	movs	r1, #4
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <spi_init_gpio+0xa0>)
 80026a2:	f7ff f941 	bl	8001928 <md_gpio_configure_output>
        {
          // NSS - PA4
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
        }
    }
}
 80026a6:	e01f      	b.n	80026e8 <spi_init_gpio+0x98>
      md_gpio_configure_input(GPIOA, GPIO_PIN_5, GPIO_INPUT_FLOATING);
 80026a8:	2201      	movs	r2, #1
 80026aa:	2105      	movs	r1, #5
 80026ac:	4810      	ldr	r0, [pc, #64]	; (80026f0 <spi_init_gpio+0xa0>)
 80026ae:	f7ff f996 	bl	80019de <md_gpio_configure_input>
      if (p_spi_config->full_duplex == true)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <spi_init_gpio+0x74>
          md_gpio_configure_input(GPIOA, GPIO_PIN_7, GPIO_INPUT_PULLUP);
 80026ba:	2202      	movs	r2, #2
 80026bc:	2107      	movs	r1, #7
 80026be:	480c      	ldr	r0, [pc, #48]	; (80026f0 <spi_init_gpio+0xa0>)
 80026c0:	f7ff f98d 	bl	80019de <md_gpio_configure_input>
      md_gpio_configure_output(GPIOA, GPIO_PIN_6, GPIO_SPEED_10MHZ,
 80026c4:	2302      	movs	r3, #2
 80026c6:	2201      	movs	r2, #1
 80026c8:	2106      	movs	r1, #6
 80026ca:	4809      	ldr	r0, [pc, #36]	; (80026f0 <spi_init_gpio+0xa0>)
 80026cc:	f7ff f92c 	bl	8001928 <md_gpio_configure_output>
      if (p_spi_config->software_nss_management == false)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	789b      	ldrb	r3, [r3, #2]
 80026d4:	f083 0301 	eor.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <spi_init_gpio+0x98>
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
 80026de:	2202      	movs	r2, #2
 80026e0:	2104      	movs	r1, #4
 80026e2:	4803      	ldr	r0, [pc, #12]	; (80026f0 <spi_init_gpio+0xa0>)
 80026e4:	f7ff f97b 	bl	80019de <md_gpio_configure_input>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40010800 	.word	0x40010800

080026f4 <__NVIC_SetPriority>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ffc2 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fcc3 	bl	8002120 <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <md_systick_configure_ms+0x28>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ffcf 	bl	8002748 <SysTick_Config>

  return;
 80027aa:	bf00      	nop
}
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	10624dd3 	.word	0x10624dd3

080027b8 <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4b02      	ldr	r3, [pc, #8]	; (80027c8 <md_systick_get_tick+0x10>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	200000c8 	.word	0x200000c8

080027cc <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 80027d4:	f7ff fff0 	bl	80027b8 <md_systick_get_tick>
 80027d8:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 80027da:	bf00      	nop
 80027dc:	f7ff ffec 	bl	80027b8 <md_systick_get_tick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <md_systick_delay+0x10>
    ;
  return;
 80027ec:	bf00      	nop
}
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <SysTick_Handler+0x18>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a03      	ldr	r2, [pc, #12]	; (800280c <SysTick_Handler+0x18>)
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	200000c8 	.word	0x200000c8

08002810 <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d20e      	bcs.n	8002854 <usart_txe_callback+0x32>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	4413      	add	r3, r2
 8002840:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	609a      	str	r2, [r3, #8]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 8002852:	e00b      	b.n	800286c <usart_txe_callback+0x4a>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002862:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	745a      	strb	r2, [r3, #17]
  return;
 800286a:	bf00      	nop
}
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7c5b      	ldrb	r3, [r3, #17]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d105      	bne.n	800289e <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffbc 	bl	8002810 <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffc2 	bl	8002822 <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d019      	beq.n	80028e0 <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10a      	bne.n	80028ce <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fe f953 	bl	8000b64 <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028cc:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	60da      	str	r2, [r3, #12]
    }

  return;
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
}
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <USART1_IRQHandler+0x10>)
 80028ee:	f7ff ffc1 	bl	8002874 <usart_main_callback>
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000020 	.word	0x20000020

080028fc <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <USART2_IRQHandler+0x10>)
 8002902:	f7ff ffb7 	bl	8002874 <usart_main_callback>
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000034 	.word	0x20000034

08002910 <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
//  example_usart_send_irq_2usarts();

  /* CAN EXAMPLES */
//  example_can_init();
//  example_can_send_data();
  example_can_recieve_data();
 8002914:	f7fd ff90 	bl	8000838 <example_can_recieve_data>
//  example_spi_transfer_tft();

  /* ADC EXAMPLES */
//  example_adc_init();

  for (;;)
 8002918:	e7fe      	b.n	8002918 <main+0x8>
	...

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f000 f84c 	bl	80029e8 <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20002800 	.word	0x20002800
 800297c:	00000400 	.word	0x00000400
 8002980:	200000cc 	.word	0x200000cc
 8002984:	20000100 	.word	0x20000100

08002988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002994:	480d      	ldr	r0, [pc, #52]	; (80029cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002996:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002998:	f7ff fff6 	bl	8002988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <LoopForever+0xe>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <LoopForever+0x16>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029c2:	f000 f817 	bl	80029f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029c6:	f7ff ffa3 	bl	8002910 <main>

080029ca <LoopForever>:

LoopForever:
    b LoopForever
 80029ca:	e7fe      	b.n	80029ca <LoopForever>
  ldr   r0, =_estack
 80029cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80029d8:	0800359c 	.word	0x0800359c
  ldr r2, =_sbss
 80029dc:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80029e0:	20000100 	.word	0x20000100

080029e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC1_2_IRQHandler>
	...

080029e8 <__errno>:
 80029e8:	4b01      	ldr	r3, [pc, #4]	; (80029f0 <__errno+0x8>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000048 	.word	0x20000048

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2600      	movs	r6, #0
 80029f8:	4d0c      	ldr	r5, [pc, #48]	; (8002a2c <__libc_init_array+0x38>)
 80029fa:	4c0d      	ldr	r4, [pc, #52]	; (8002a30 <__libc_init_array+0x3c>)
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	f000 fc54 	bl	80032b0 <_init>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	4d0a      	ldr	r5, [pc, #40]	; (8002a34 <__libc_init_array+0x40>)
 8002a0c:	4c0a      	ldr	r4, [pc, #40]	; (8002a38 <__libc_init_array+0x44>)
 8002a0e:	1b64      	subs	r4, r4, r5
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08003594 	.word	0x08003594
 8002a30:	08003594 	.word	0x08003594
 8002a34:	08003594 	.word	0x08003594
 8002a38:	08003598 	.word	0x08003598

08002a3c <siprintf>:
 8002a3c:	b40e      	push	{r1, r2, r3}
 8002a3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a42:	b500      	push	{lr}
 8002a44:	b09c      	sub	sp, #112	; 0x70
 8002a46:	ab1d      	add	r3, sp, #116	; 0x74
 8002a48:	9002      	str	r0, [sp, #8]
 8002a4a:	9006      	str	r0, [sp, #24]
 8002a4c:	9107      	str	r1, [sp, #28]
 8002a4e:	9104      	str	r1, [sp, #16]
 8002a50:	4808      	ldr	r0, [pc, #32]	; (8002a74 <siprintf+0x38>)
 8002a52:	4909      	ldr	r1, [pc, #36]	; (8002a78 <siprintf+0x3c>)
 8002a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a58:	9105      	str	r1, [sp, #20]
 8002a5a:	6800      	ldr	r0, [r0, #0]
 8002a5c:	a902      	add	r1, sp, #8
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	f000 f868 	bl	8002b34 <_svfiprintf_r>
 8002a64:	2200      	movs	r2, #0
 8002a66:	9b02      	ldr	r3, [sp, #8]
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	b01c      	add	sp, #112	; 0x70
 8002a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a70:	b003      	add	sp, #12
 8002a72:	4770      	bx	lr
 8002a74:	20000048 	.word	0x20000048
 8002a78:	ffff0208 	.word	0xffff0208

08002a7c <__ssputs_r>:
 8002a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a80:	688e      	ldr	r6, [r1, #8]
 8002a82:	4682      	mov	sl, r0
 8002a84:	429e      	cmp	r6, r3
 8002a86:	460c      	mov	r4, r1
 8002a88:	4690      	mov	r8, r2
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	d838      	bhi.n	8002b00 <__ssputs_r+0x84>
 8002a8e:	898a      	ldrh	r2, [r1, #12]
 8002a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a94:	d032      	beq.n	8002afc <__ssputs_r+0x80>
 8002a96:	6825      	ldr	r5, [r4, #0]
 8002a98:	6909      	ldr	r1, [r1, #16]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	eba5 0901 	sub.w	r9, r5, r1
 8002aa0:	6965      	ldr	r5, [r4, #20]
 8002aa2:	444b      	add	r3, r9
 8002aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002aac:	106d      	asrs	r5, r5, #1
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	bf38      	it	cc
 8002ab2:	461d      	movcc	r5, r3
 8002ab4:	0553      	lsls	r3, r2, #21
 8002ab6:	d531      	bpl.n	8002b1c <__ssputs_r+0xa0>
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f000 fb53 	bl	8003164 <_malloc_r>
 8002abe:	4606      	mov	r6, r0
 8002ac0:	b950      	cbnz	r0, 8002ad8 <__ssputs_r+0x5c>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f8ca 3000 	str.w	r3, [sl]
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad2:	81a3      	strh	r3, [r4, #12]
 8002ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad8:	464a      	mov	r2, r9
 8002ada:	6921      	ldr	r1, [r4, #16]
 8002adc:	f000 face 	bl	800307c <memcpy>
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	6126      	str	r6, [r4, #16]
 8002aee:	444e      	add	r6, r9
 8002af0:	6026      	str	r6, [r4, #0]
 8002af2:	463e      	mov	r6, r7
 8002af4:	6165      	str	r5, [r4, #20]
 8002af6:	eba5 0509 	sub.w	r5, r5, r9
 8002afa:	60a5      	str	r5, [r4, #8]
 8002afc:	42be      	cmp	r6, r7
 8002afe:	d900      	bls.n	8002b02 <__ssputs_r+0x86>
 8002b00:	463e      	mov	r6, r7
 8002b02:	4632      	mov	r2, r6
 8002b04:	4641      	mov	r1, r8
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	f000 fac6 	bl	8003098 <memmove>
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	1b9b      	subs	r3, r3, r6
 8002b12:	4432      	add	r2, r6
 8002b14:	2000      	movs	r0, #0
 8002b16:	60a3      	str	r3, [r4, #8]
 8002b18:	6022      	str	r2, [r4, #0]
 8002b1a:	e7db      	b.n	8002ad4 <__ssputs_r+0x58>
 8002b1c:	462a      	mov	r2, r5
 8002b1e:	f000 fb7b 	bl	8003218 <_realloc_r>
 8002b22:	4606      	mov	r6, r0
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d1e1      	bne.n	8002aec <__ssputs_r+0x70>
 8002b28:	4650      	mov	r0, sl
 8002b2a:	6921      	ldr	r1, [r4, #16]
 8002b2c:	f000 face 	bl	80030cc <_free_r>
 8002b30:	e7c7      	b.n	8002ac2 <__ssputs_r+0x46>
	...

08002b34 <_svfiprintf_r>:
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	4698      	mov	r8, r3
 8002b3a:	898b      	ldrh	r3, [r1, #12]
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	460d      	mov	r5, r1
 8002b42:	4614      	mov	r4, r2
 8002b44:	b09d      	sub	sp, #116	; 0x74
 8002b46:	d50e      	bpl.n	8002b66 <_svfiprintf_r+0x32>
 8002b48:	690b      	ldr	r3, [r1, #16]
 8002b4a:	b963      	cbnz	r3, 8002b66 <_svfiprintf_r+0x32>
 8002b4c:	2140      	movs	r1, #64	; 0x40
 8002b4e:	f000 fb09 	bl	8003164 <_malloc_r>
 8002b52:	6028      	str	r0, [r5, #0]
 8002b54:	6128      	str	r0, [r5, #16]
 8002b56:	b920      	cbnz	r0, 8002b62 <_svfiprintf_r+0x2e>
 8002b58:	230c      	movs	r3, #12
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	e0d1      	b.n	8002d06 <_svfiprintf_r+0x1d2>
 8002b62:	2340      	movs	r3, #64	; 0x40
 8002b64:	616b      	str	r3, [r5, #20]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9309      	str	r3, [sp, #36]	; 0x24
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b70:	2330      	movs	r3, #48	; 0x30
 8002b72:	f04f 0901 	mov.w	r9, #1
 8002b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d20 <_svfiprintf_r+0x1ec>
 8002b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b82:	4623      	mov	r3, r4
 8002b84:	469a      	mov	sl, r3
 8002b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b8a:	b10a      	cbz	r2, 8002b90 <_svfiprintf_r+0x5c>
 8002b8c:	2a25      	cmp	r2, #37	; 0x25
 8002b8e:	d1f9      	bne.n	8002b84 <_svfiprintf_r+0x50>
 8002b90:	ebba 0b04 	subs.w	fp, sl, r4
 8002b94:	d00b      	beq.n	8002bae <_svfiprintf_r+0x7a>
 8002b96:	465b      	mov	r3, fp
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	f7ff ff6d 	bl	8002a7c <__ssputs_r>
 8002ba2:	3001      	adds	r0, #1
 8002ba4:	f000 80aa 	beq.w	8002cfc <_svfiprintf_r+0x1c8>
 8002ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002baa:	445a      	add	r2, fp
 8002bac:	9209      	str	r2, [sp, #36]	; 0x24
 8002bae:	f89a 3000 	ldrb.w	r3, [sl]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a2 	beq.w	8002cfc <_svfiprintf_r+0x1c8>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bc2:	f10a 0a01 	add.w	sl, sl, #1
 8002bc6:	9304      	str	r3, [sp, #16]
 8002bc8:	9307      	str	r3, [sp, #28]
 8002bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bce:	931a      	str	r3, [sp, #104]	; 0x68
 8002bd0:	4654      	mov	r4, sl
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd8:	4851      	ldr	r0, [pc, #324]	; (8002d20 <_svfiprintf_r+0x1ec>)
 8002bda:	f000 fa41 	bl	8003060 <memchr>
 8002bde:	9a04      	ldr	r2, [sp, #16]
 8002be0:	b9d8      	cbnz	r0, 8002c1a <_svfiprintf_r+0xe6>
 8002be2:	06d0      	lsls	r0, r2, #27
 8002be4:	bf44      	itt	mi
 8002be6:	2320      	movmi	r3, #32
 8002be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bec:	0711      	lsls	r1, r2, #28
 8002bee:	bf44      	itt	mi
 8002bf0:	232b      	movmi	r3, #43	; 0x2b
 8002bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfc:	d015      	beq.n	8002c2a <_svfiprintf_r+0xf6>
 8002bfe:	4654      	mov	r4, sl
 8002c00:	2000      	movs	r0, #0
 8002c02:	f04f 0c0a 	mov.w	ip, #10
 8002c06:	9a07      	ldr	r2, [sp, #28]
 8002c08:	4621      	mov	r1, r4
 8002c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c0e:	3b30      	subs	r3, #48	; 0x30
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	d94e      	bls.n	8002cb2 <_svfiprintf_r+0x17e>
 8002c14:	b1b0      	cbz	r0, 8002c44 <_svfiprintf_r+0x110>
 8002c16:	9207      	str	r2, [sp, #28]
 8002c18:	e014      	b.n	8002c44 <_svfiprintf_r+0x110>
 8002c1a:	eba0 0308 	sub.w	r3, r0, r8
 8002c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8002c22:	4313      	orrs	r3, r2
 8002c24:	46a2      	mov	sl, r4
 8002c26:	9304      	str	r3, [sp, #16]
 8002c28:	e7d2      	b.n	8002bd0 <_svfiprintf_r+0x9c>
 8002c2a:	9b03      	ldr	r3, [sp, #12]
 8002c2c:	1d19      	adds	r1, r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	9103      	str	r1, [sp, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfbb      	ittet	lt
 8002c36:	425b      	neglt	r3, r3
 8002c38:	f042 0202 	orrlt.w	r2, r2, #2
 8002c3c:	9307      	strge	r3, [sp, #28]
 8002c3e:	9307      	strlt	r3, [sp, #28]
 8002c40:	bfb8      	it	lt
 8002c42:	9204      	strlt	r2, [sp, #16]
 8002c44:	7823      	ldrb	r3, [r4, #0]
 8002c46:	2b2e      	cmp	r3, #46	; 0x2e
 8002c48:	d10c      	bne.n	8002c64 <_svfiprintf_r+0x130>
 8002c4a:	7863      	ldrb	r3, [r4, #1]
 8002c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4e:	d135      	bne.n	8002cbc <_svfiprintf_r+0x188>
 8002c50:	9b03      	ldr	r3, [sp, #12]
 8002c52:	3402      	adds	r4, #2
 8002c54:	1d1a      	adds	r2, r3, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	9203      	str	r2, [sp, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bfb8      	it	lt
 8002c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c62:	9305      	str	r3, [sp, #20]
 8002c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d30 <_svfiprintf_r+0x1fc>
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4650      	mov	r0, sl
 8002c6c:	7821      	ldrb	r1, [r4, #0]
 8002c6e:	f000 f9f7 	bl	8003060 <memchr>
 8002c72:	b140      	cbz	r0, 8002c86 <_svfiprintf_r+0x152>
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	eba0 000a 	sub.w	r0, r0, sl
 8002c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c7e:	9b04      	ldr	r3, [sp, #16]
 8002c80:	3401      	adds	r4, #1
 8002c82:	4303      	orrs	r3, r0
 8002c84:	9304      	str	r3, [sp, #16]
 8002c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c8a:	2206      	movs	r2, #6
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <_svfiprintf_r+0x1f0>)
 8002c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c92:	f000 f9e5 	bl	8003060 <memchr>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d038      	beq.n	8002d0c <_svfiprintf_r+0x1d8>
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <_svfiprintf_r+0x1f4>)
 8002c9c:	bb1b      	cbnz	r3, 8002ce6 <_svfiprintf_r+0x1b2>
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	3307      	adds	r3, #7
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	9303      	str	r3, [sp, #12]
 8002caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cac:	4433      	add	r3, r6
 8002cae:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb0:	e767      	b.n	8002b82 <_svfiprintf_r+0x4e>
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cba:	e7a5      	b.n	8002c08 <_svfiprintf_r+0xd4>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f04f 0c0a 	mov.w	ip, #10
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	3401      	adds	r4, #1
 8002cc6:	9305      	str	r3, [sp, #20]
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cce:	3a30      	subs	r2, #48	; 0x30
 8002cd0:	2a09      	cmp	r2, #9
 8002cd2:	d903      	bls.n	8002cdc <_svfiprintf_r+0x1a8>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0c5      	beq.n	8002c64 <_svfiprintf_r+0x130>
 8002cd8:	9105      	str	r1, [sp, #20]
 8002cda:	e7c3      	b.n	8002c64 <_svfiprintf_r+0x130>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	2301      	movs	r3, #1
 8002ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ce4:	e7f0      	b.n	8002cc8 <_svfiprintf_r+0x194>
 8002ce6:	ab03      	add	r3, sp, #12
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	462a      	mov	r2, r5
 8002cec:	4638      	mov	r0, r7
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <_svfiprintf_r+0x1f8>)
 8002cf0:	a904      	add	r1, sp, #16
 8002cf2:	f3af 8000 	nop.w
 8002cf6:	1c42      	adds	r2, r0, #1
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	d1d6      	bne.n	8002caa <_svfiprintf_r+0x176>
 8002cfc:	89ab      	ldrh	r3, [r5, #12]
 8002cfe:	065b      	lsls	r3, r3, #25
 8002d00:	f53f af2c 	bmi.w	8002b5c <_svfiprintf_r+0x28>
 8002d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d06:	b01d      	add	sp, #116	; 0x74
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0c:	ab03      	add	r3, sp, #12
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	462a      	mov	r2, r5
 8002d12:	4638      	mov	r0, r7
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <_svfiprintf_r+0x1f8>)
 8002d16:	a904      	add	r1, sp, #16
 8002d18:	f000 f87c 	bl	8002e14 <_printf_i>
 8002d1c:	e7eb      	b.n	8002cf6 <_svfiprintf_r+0x1c2>
 8002d1e:	bf00      	nop
 8002d20:	08003561 	.word	0x08003561
 8002d24:	0800356b 	.word	0x0800356b
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	08002a7d 	.word	0x08002a7d
 8002d30:	08003567 	.word	0x08003567

08002d34 <_printf_common>:
 8002d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	4616      	mov	r6, r2
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	688a      	ldr	r2, [r1, #8]
 8002d3e:	690b      	ldr	r3, [r1, #16]
 8002d40:	4607      	mov	r7, r0
 8002d42:	4293      	cmp	r3, r2
 8002d44:	bfb8      	it	lt
 8002d46:	4613      	movlt	r3, r2
 8002d48:	6033      	str	r3, [r6, #0]
 8002d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d4e:	460c      	mov	r4, r1
 8002d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d54:	b10a      	cbz	r2, 8002d5a <_printf_common+0x26>
 8002d56:	3301      	adds	r3, #1
 8002d58:	6033      	str	r3, [r6, #0]
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	0699      	lsls	r1, r3, #26
 8002d5e:	bf42      	ittt	mi
 8002d60:	6833      	ldrmi	r3, [r6, #0]
 8002d62:	3302      	addmi	r3, #2
 8002d64:	6033      	strmi	r3, [r6, #0]
 8002d66:	6825      	ldr	r5, [r4, #0]
 8002d68:	f015 0506 	ands.w	r5, r5, #6
 8002d6c:	d106      	bne.n	8002d7c <_printf_common+0x48>
 8002d6e:	f104 0a19 	add.w	sl, r4, #25
 8002d72:	68e3      	ldr	r3, [r4, #12]
 8002d74:	6832      	ldr	r2, [r6, #0]
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	42ab      	cmp	r3, r5
 8002d7a:	dc28      	bgt.n	8002dce <_printf_common+0x9a>
 8002d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d80:	1e13      	subs	r3, r2, #0
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	bf18      	it	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	0692      	lsls	r2, r2, #26
 8002d8a:	d42d      	bmi.n	8002de8 <_printf_common+0xb4>
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	4638      	mov	r0, r7
 8002d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d94:	47c0      	blx	r8
 8002d96:	3001      	adds	r0, #1
 8002d98:	d020      	beq.n	8002ddc <_printf_common+0xa8>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	68e5      	ldr	r5, [r4, #12]
 8002d9e:	f003 0306 	and.w	r3, r3, #6
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf18      	it	ne
 8002da6:	2500      	movne	r5, #0
 8002da8:	6832      	ldr	r2, [r6, #0]
 8002daa:	f04f 0600 	mov.w	r6, #0
 8002dae:	68a3      	ldr	r3, [r4, #8]
 8002db0:	bf08      	it	eq
 8002db2:	1aad      	subeq	r5, r5, r2
 8002db4:	6922      	ldr	r2, [r4, #16]
 8002db6:	bf08      	it	eq
 8002db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bfc4      	itt	gt
 8002dc0:	1a9b      	subgt	r3, r3, r2
 8002dc2:	18ed      	addgt	r5, r5, r3
 8002dc4:	341a      	adds	r4, #26
 8002dc6:	42b5      	cmp	r5, r6
 8002dc8:	d11a      	bne.n	8002e00 <_printf_common+0xcc>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e008      	b.n	8002de0 <_printf_common+0xac>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	4652      	mov	r2, sl
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	4638      	mov	r0, r7
 8002dd6:	47c0      	blx	r8
 8002dd8:	3001      	adds	r0, #1
 8002dda:	d103      	bne.n	8002de4 <_printf_common+0xb0>
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de4:	3501      	adds	r5, #1
 8002de6:	e7c4      	b.n	8002d72 <_printf_common+0x3e>
 8002de8:	2030      	movs	r0, #48	; 0x30
 8002dea:	18e1      	adds	r1, r4, r3
 8002dec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002df6:	4422      	add	r2, r4
 8002df8:	3302      	adds	r3, #2
 8002dfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dfe:	e7c5      	b.n	8002d8c <_printf_common+0x58>
 8002e00:	2301      	movs	r3, #1
 8002e02:	4622      	mov	r2, r4
 8002e04:	4649      	mov	r1, r9
 8002e06:	4638      	mov	r0, r7
 8002e08:	47c0      	blx	r8
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d0e6      	beq.n	8002ddc <_printf_common+0xa8>
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7d9      	b.n	8002dc6 <_printf_common+0x92>
	...

08002e14 <_printf_i>:
 8002e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e18:	460c      	mov	r4, r1
 8002e1a:	7e27      	ldrb	r7, [r4, #24]
 8002e1c:	4691      	mov	r9, r2
 8002e1e:	2f78      	cmp	r7, #120	; 0x78
 8002e20:	4680      	mov	r8, r0
 8002e22:	469a      	mov	sl, r3
 8002e24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e2a:	d807      	bhi.n	8002e3c <_printf_i+0x28>
 8002e2c:	2f62      	cmp	r7, #98	; 0x62
 8002e2e:	d80a      	bhi.n	8002e46 <_printf_i+0x32>
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	f000 80d9 	beq.w	8002fe8 <_printf_i+0x1d4>
 8002e36:	2f58      	cmp	r7, #88	; 0x58
 8002e38:	f000 80a4 	beq.w	8002f84 <_printf_i+0x170>
 8002e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e44:	e03a      	b.n	8002ebc <_printf_i+0xa8>
 8002e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e4a:	2b15      	cmp	r3, #21
 8002e4c:	d8f6      	bhi.n	8002e3c <_printf_i+0x28>
 8002e4e:	a001      	add	r0, pc, #4	; (adr r0, 8002e54 <_printf_i+0x40>)
 8002e50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e54:	08002ead 	.word	0x08002ead
 8002e58:	08002ec1 	.word	0x08002ec1
 8002e5c:	08002e3d 	.word	0x08002e3d
 8002e60:	08002e3d 	.word	0x08002e3d
 8002e64:	08002e3d 	.word	0x08002e3d
 8002e68:	08002e3d 	.word	0x08002e3d
 8002e6c:	08002ec1 	.word	0x08002ec1
 8002e70:	08002e3d 	.word	0x08002e3d
 8002e74:	08002e3d 	.word	0x08002e3d
 8002e78:	08002e3d 	.word	0x08002e3d
 8002e7c:	08002e3d 	.word	0x08002e3d
 8002e80:	08002fcf 	.word	0x08002fcf
 8002e84:	08002ef1 	.word	0x08002ef1
 8002e88:	08002fb1 	.word	0x08002fb1
 8002e8c:	08002e3d 	.word	0x08002e3d
 8002e90:	08002e3d 	.word	0x08002e3d
 8002e94:	08002ff1 	.word	0x08002ff1
 8002e98:	08002e3d 	.word	0x08002e3d
 8002e9c:	08002ef1 	.word	0x08002ef1
 8002ea0:	08002e3d 	.word	0x08002e3d
 8002ea4:	08002e3d 	.word	0x08002e3d
 8002ea8:	08002fb9 	.word	0x08002fb9
 8002eac:	680b      	ldr	r3, [r1, #0]
 8002eae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002eb2:	1d1a      	adds	r2, r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	600a      	str	r2, [r1, #0]
 8002eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0a4      	b.n	800300a <_printf_i+0x1f6>
 8002ec0:	6825      	ldr	r5, [r4, #0]
 8002ec2:	6808      	ldr	r0, [r1, #0]
 8002ec4:	062e      	lsls	r6, r5, #24
 8002ec6:	f100 0304 	add.w	r3, r0, #4
 8002eca:	d50a      	bpl.n	8002ee2 <_printf_i+0xce>
 8002ecc:	6805      	ldr	r5, [r0, #0]
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	da03      	bge.n	8002edc <_printf_i+0xc8>
 8002ed4:	232d      	movs	r3, #45	; 0x2d
 8002ed6:	426d      	negs	r5, r5
 8002ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002edc:	230a      	movs	r3, #10
 8002ede:	485e      	ldr	r0, [pc, #376]	; (8003058 <_printf_i+0x244>)
 8002ee0:	e019      	b.n	8002f16 <_printf_i+0x102>
 8002ee2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ee6:	6805      	ldr	r5, [r0, #0]
 8002ee8:	600b      	str	r3, [r1, #0]
 8002eea:	bf18      	it	ne
 8002eec:	b22d      	sxthne	r5, r5
 8002eee:	e7ef      	b.n	8002ed0 <_printf_i+0xbc>
 8002ef0:	680b      	ldr	r3, [r1, #0]
 8002ef2:	6825      	ldr	r5, [r4, #0]
 8002ef4:	1d18      	adds	r0, r3, #4
 8002ef6:	6008      	str	r0, [r1, #0]
 8002ef8:	0628      	lsls	r0, r5, #24
 8002efa:	d501      	bpl.n	8002f00 <_printf_i+0xec>
 8002efc:	681d      	ldr	r5, [r3, #0]
 8002efe:	e002      	b.n	8002f06 <_printf_i+0xf2>
 8002f00:	0669      	lsls	r1, r5, #25
 8002f02:	d5fb      	bpl.n	8002efc <_printf_i+0xe8>
 8002f04:	881d      	ldrh	r5, [r3, #0]
 8002f06:	2f6f      	cmp	r7, #111	; 0x6f
 8002f08:	bf0c      	ite	eq
 8002f0a:	2308      	moveq	r3, #8
 8002f0c:	230a      	movne	r3, #10
 8002f0e:	4852      	ldr	r0, [pc, #328]	; (8003058 <_printf_i+0x244>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f16:	6866      	ldr	r6, [r4, #4]
 8002f18:	2e00      	cmp	r6, #0
 8002f1a:	bfa8      	it	ge
 8002f1c:	6821      	ldrge	r1, [r4, #0]
 8002f1e:	60a6      	str	r6, [r4, #8]
 8002f20:	bfa4      	itt	ge
 8002f22:	f021 0104 	bicge.w	r1, r1, #4
 8002f26:	6021      	strge	r1, [r4, #0]
 8002f28:	b90d      	cbnz	r5, 8002f2e <_printf_i+0x11a>
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	d04d      	beq.n	8002fca <_printf_i+0x1b6>
 8002f2e:	4616      	mov	r6, r2
 8002f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f34:	fb03 5711 	mls	r7, r3, r1, r5
 8002f38:	5dc7      	ldrb	r7, [r0, r7]
 8002f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f3e:	462f      	mov	r7, r5
 8002f40:	42bb      	cmp	r3, r7
 8002f42:	460d      	mov	r5, r1
 8002f44:	d9f4      	bls.n	8002f30 <_printf_i+0x11c>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d10b      	bne.n	8002f62 <_printf_i+0x14e>
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	07df      	lsls	r7, r3, #31
 8002f4e:	d508      	bpl.n	8002f62 <_printf_i+0x14e>
 8002f50:	6923      	ldr	r3, [r4, #16]
 8002f52:	6861      	ldr	r1, [r4, #4]
 8002f54:	4299      	cmp	r1, r3
 8002f56:	bfde      	ittt	le
 8002f58:	2330      	movle	r3, #48	; 0x30
 8002f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f62:	1b92      	subs	r2, r2, r6
 8002f64:	6122      	str	r2, [r4, #16]
 8002f66:	464b      	mov	r3, r9
 8002f68:	4621      	mov	r1, r4
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	f8cd a000 	str.w	sl, [sp]
 8002f70:	aa03      	add	r2, sp, #12
 8002f72:	f7ff fedf 	bl	8002d34 <_printf_common>
 8002f76:	3001      	adds	r0, #1
 8002f78:	d14c      	bne.n	8003014 <_printf_i+0x200>
 8002f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7e:	b004      	add	sp, #16
 8002f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f84:	4834      	ldr	r0, [pc, #208]	; (8003058 <_printf_i+0x244>)
 8002f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f8a:	680e      	ldr	r6, [r1, #0]
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f92:	061f      	lsls	r7, r3, #24
 8002f94:	600e      	str	r6, [r1, #0]
 8002f96:	d514      	bpl.n	8002fc2 <_printf_i+0x1ae>
 8002f98:	07d9      	lsls	r1, r3, #31
 8002f9a:	bf44      	itt	mi
 8002f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8002fa0:	6023      	strmi	r3, [r4, #0]
 8002fa2:	b91d      	cbnz	r5, 8002fac <_printf_i+0x198>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	f023 0320 	bic.w	r3, r3, #32
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	2310      	movs	r3, #16
 8002fae:	e7af      	b.n	8002f10 <_printf_i+0xfc>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	6023      	str	r3, [r4, #0]
 8002fb8:	2378      	movs	r3, #120	; 0x78
 8002fba:	4828      	ldr	r0, [pc, #160]	; (800305c <_printf_i+0x248>)
 8002fbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fc0:	e7e3      	b.n	8002f8a <_printf_i+0x176>
 8002fc2:	065e      	lsls	r6, r3, #25
 8002fc4:	bf48      	it	mi
 8002fc6:	b2ad      	uxthmi	r5, r5
 8002fc8:	e7e6      	b.n	8002f98 <_printf_i+0x184>
 8002fca:	4616      	mov	r6, r2
 8002fcc:	e7bb      	b.n	8002f46 <_printf_i+0x132>
 8002fce:	680b      	ldr	r3, [r1, #0]
 8002fd0:	6826      	ldr	r6, [r4, #0]
 8002fd2:	1d1d      	adds	r5, r3, #4
 8002fd4:	6960      	ldr	r0, [r4, #20]
 8002fd6:	600d      	str	r5, [r1, #0]
 8002fd8:	0635      	lsls	r5, r6, #24
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	d501      	bpl.n	8002fe2 <_printf_i+0x1ce>
 8002fde:	6018      	str	r0, [r3, #0]
 8002fe0:	e002      	b.n	8002fe8 <_printf_i+0x1d4>
 8002fe2:	0671      	lsls	r1, r6, #25
 8002fe4:	d5fb      	bpl.n	8002fde <_printf_i+0x1ca>
 8002fe6:	8018      	strh	r0, [r3, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	4616      	mov	r6, r2
 8002fec:	6123      	str	r3, [r4, #16]
 8002fee:	e7ba      	b.n	8002f66 <_printf_i+0x152>
 8002ff0:	680b      	ldr	r3, [r1, #0]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	600a      	str	r2, [r1, #0]
 8002ff6:	681e      	ldr	r6, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	6862      	ldr	r2, [r4, #4]
 8002ffe:	f000 f82f 	bl	8003060 <memchr>
 8003002:	b108      	cbz	r0, 8003008 <_printf_i+0x1f4>
 8003004:	1b80      	subs	r0, r0, r6
 8003006:	6060      	str	r0, [r4, #4]
 8003008:	6863      	ldr	r3, [r4, #4]
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	2300      	movs	r3, #0
 800300e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003012:	e7a8      	b.n	8002f66 <_printf_i+0x152>
 8003014:	4632      	mov	r2, r6
 8003016:	4649      	mov	r1, r9
 8003018:	4640      	mov	r0, r8
 800301a:	6923      	ldr	r3, [r4, #16]
 800301c:	47d0      	blx	sl
 800301e:	3001      	adds	r0, #1
 8003020:	d0ab      	beq.n	8002f7a <_printf_i+0x166>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	079b      	lsls	r3, r3, #30
 8003026:	d413      	bmi.n	8003050 <_printf_i+0x23c>
 8003028:	68e0      	ldr	r0, [r4, #12]
 800302a:	9b03      	ldr	r3, [sp, #12]
 800302c:	4298      	cmp	r0, r3
 800302e:	bfb8      	it	lt
 8003030:	4618      	movlt	r0, r3
 8003032:	e7a4      	b.n	8002f7e <_printf_i+0x16a>
 8003034:	2301      	movs	r3, #1
 8003036:	4632      	mov	r2, r6
 8003038:	4649      	mov	r1, r9
 800303a:	4640      	mov	r0, r8
 800303c:	47d0      	blx	sl
 800303e:	3001      	adds	r0, #1
 8003040:	d09b      	beq.n	8002f7a <_printf_i+0x166>
 8003042:	3501      	adds	r5, #1
 8003044:	68e3      	ldr	r3, [r4, #12]
 8003046:	9903      	ldr	r1, [sp, #12]
 8003048:	1a5b      	subs	r3, r3, r1
 800304a:	42ab      	cmp	r3, r5
 800304c:	dcf2      	bgt.n	8003034 <_printf_i+0x220>
 800304e:	e7eb      	b.n	8003028 <_printf_i+0x214>
 8003050:	2500      	movs	r5, #0
 8003052:	f104 0619 	add.w	r6, r4, #25
 8003056:	e7f5      	b.n	8003044 <_printf_i+0x230>
 8003058:	08003572 	.word	0x08003572
 800305c:	08003583 	.word	0x08003583

08003060 <memchr>:
 8003060:	4603      	mov	r3, r0
 8003062:	b510      	push	{r4, lr}
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	4402      	add	r2, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	4618      	mov	r0, r3
 800306c:	d101      	bne.n	8003072 <memchr+0x12>
 800306e:	2000      	movs	r0, #0
 8003070:	e003      	b.n	800307a <memchr+0x1a>
 8003072:	7804      	ldrb	r4, [r0, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	428c      	cmp	r4, r1
 8003078:	d1f6      	bne.n	8003068 <memchr+0x8>
 800307a:	bd10      	pop	{r4, pc}

0800307c <memcpy>:
 800307c:	440a      	add	r2, r1
 800307e:	4291      	cmp	r1, r2
 8003080:	f100 33ff 	add.w	r3, r0, #4294967295
 8003084:	d100      	bne.n	8003088 <memcpy+0xc>
 8003086:	4770      	bx	lr
 8003088:	b510      	push	{r4, lr}
 800308a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800308e:	4291      	cmp	r1, r2
 8003090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003094:	d1f9      	bne.n	800308a <memcpy+0xe>
 8003096:	bd10      	pop	{r4, pc}

08003098 <memmove>:
 8003098:	4288      	cmp	r0, r1
 800309a:	b510      	push	{r4, lr}
 800309c:	eb01 0402 	add.w	r4, r1, r2
 80030a0:	d902      	bls.n	80030a8 <memmove+0x10>
 80030a2:	4284      	cmp	r4, r0
 80030a4:	4623      	mov	r3, r4
 80030a6:	d807      	bhi.n	80030b8 <memmove+0x20>
 80030a8:	1e43      	subs	r3, r0, #1
 80030aa:	42a1      	cmp	r1, r4
 80030ac:	d008      	beq.n	80030c0 <memmove+0x28>
 80030ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030b6:	e7f8      	b.n	80030aa <memmove+0x12>
 80030b8:	4601      	mov	r1, r0
 80030ba:	4402      	add	r2, r0
 80030bc:	428a      	cmp	r2, r1
 80030be:	d100      	bne.n	80030c2 <memmove+0x2a>
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030ca:	e7f7      	b.n	80030bc <memmove+0x24>

080030cc <_free_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d043      	beq.n	800315c <_free_r+0x90>
 80030d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d8:	1f0c      	subs	r4, r1, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bfb8      	it	lt
 80030de:	18e4      	addlt	r4, r4, r3
 80030e0:	f000 f8d0 	bl	8003284 <__malloc_lock>
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <_free_r+0x94>)
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	4610      	mov	r0, r2
 80030ea:	b933      	cbnz	r3, 80030fa <_free_r+0x2e>
 80030ec:	6063      	str	r3, [r4, #4]
 80030ee:	6014      	str	r4, [r2, #0]
 80030f0:	4628      	mov	r0, r5
 80030f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f6:	f000 b8cb 	b.w	8003290 <__malloc_unlock>
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	d90a      	bls.n	8003114 <_free_r+0x48>
 80030fe:	6821      	ldr	r1, [r4, #0]
 8003100:	1862      	adds	r2, r4, r1
 8003102:	4293      	cmp	r3, r2
 8003104:	bf01      	itttt	eq
 8003106:	681a      	ldreq	r2, [r3, #0]
 8003108:	685b      	ldreq	r3, [r3, #4]
 800310a:	1852      	addeq	r2, r2, r1
 800310c:	6022      	streq	r2, [r4, #0]
 800310e:	6063      	str	r3, [r4, #4]
 8003110:	6004      	str	r4, [r0, #0]
 8003112:	e7ed      	b.n	80030f0 <_free_r+0x24>
 8003114:	461a      	mov	r2, r3
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b10b      	cbz	r3, 800311e <_free_r+0x52>
 800311a:	42a3      	cmp	r3, r4
 800311c:	d9fa      	bls.n	8003114 <_free_r+0x48>
 800311e:	6811      	ldr	r1, [r2, #0]
 8003120:	1850      	adds	r0, r2, r1
 8003122:	42a0      	cmp	r0, r4
 8003124:	d10b      	bne.n	800313e <_free_r+0x72>
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	4401      	add	r1, r0
 800312a:	1850      	adds	r0, r2, r1
 800312c:	4283      	cmp	r3, r0
 800312e:	6011      	str	r1, [r2, #0]
 8003130:	d1de      	bne.n	80030f0 <_free_r+0x24>
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4401      	add	r1, r0
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	6053      	str	r3, [r2, #4]
 800313c:	e7d8      	b.n	80030f0 <_free_r+0x24>
 800313e:	d902      	bls.n	8003146 <_free_r+0x7a>
 8003140:	230c      	movs	r3, #12
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	e7d4      	b.n	80030f0 <_free_r+0x24>
 8003146:	6820      	ldr	r0, [r4, #0]
 8003148:	1821      	adds	r1, r4, r0
 800314a:	428b      	cmp	r3, r1
 800314c:	bf01      	itttt	eq
 800314e:	6819      	ldreq	r1, [r3, #0]
 8003150:	685b      	ldreq	r3, [r3, #4]
 8003152:	1809      	addeq	r1, r1, r0
 8003154:	6021      	streq	r1, [r4, #0]
 8003156:	6063      	str	r3, [r4, #4]
 8003158:	6054      	str	r4, [r2, #4]
 800315a:	e7c9      	b.n	80030f0 <_free_r+0x24>
 800315c:	bd38      	pop	{r3, r4, r5, pc}
 800315e:	bf00      	nop
 8003160:	200000d0 	.word	0x200000d0

08003164 <_malloc_r>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	1ccd      	adds	r5, r1, #3
 8003168:	f025 0503 	bic.w	r5, r5, #3
 800316c:	3508      	adds	r5, #8
 800316e:	2d0c      	cmp	r5, #12
 8003170:	bf38      	it	cc
 8003172:	250c      	movcc	r5, #12
 8003174:	2d00      	cmp	r5, #0
 8003176:	4606      	mov	r6, r0
 8003178:	db01      	blt.n	800317e <_malloc_r+0x1a>
 800317a:	42a9      	cmp	r1, r5
 800317c:	d903      	bls.n	8003186 <_malloc_r+0x22>
 800317e:	230c      	movs	r3, #12
 8003180:	6033      	str	r3, [r6, #0]
 8003182:	2000      	movs	r0, #0
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003186:	f000 f87d 	bl	8003284 <__malloc_lock>
 800318a:	4921      	ldr	r1, [pc, #132]	; (8003210 <_malloc_r+0xac>)
 800318c:	680a      	ldr	r2, [r1, #0]
 800318e:	4614      	mov	r4, r2
 8003190:	b99c      	cbnz	r4, 80031ba <_malloc_r+0x56>
 8003192:	4f20      	ldr	r7, [pc, #128]	; (8003214 <_malloc_r+0xb0>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b923      	cbnz	r3, 80031a2 <_malloc_r+0x3e>
 8003198:	4621      	mov	r1, r4
 800319a:	4630      	mov	r0, r6
 800319c:	f000 f862 	bl	8003264 <_sbrk_r>
 80031a0:	6038      	str	r0, [r7, #0]
 80031a2:	4629      	mov	r1, r5
 80031a4:	4630      	mov	r0, r6
 80031a6:	f000 f85d 	bl	8003264 <_sbrk_r>
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	d123      	bne.n	80031f6 <_malloc_r+0x92>
 80031ae:	230c      	movs	r3, #12
 80031b0:	4630      	mov	r0, r6
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	f000 f86c 	bl	8003290 <__malloc_unlock>
 80031b8:	e7e3      	b.n	8003182 <_malloc_r+0x1e>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	1b5b      	subs	r3, r3, r5
 80031be:	d417      	bmi.n	80031f0 <_malloc_r+0x8c>
 80031c0:	2b0b      	cmp	r3, #11
 80031c2:	d903      	bls.n	80031cc <_malloc_r+0x68>
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	441c      	add	r4, r3
 80031c8:	6025      	str	r5, [r4, #0]
 80031ca:	e004      	b.n	80031d6 <_malloc_r+0x72>
 80031cc:	6863      	ldr	r3, [r4, #4]
 80031ce:	42a2      	cmp	r2, r4
 80031d0:	bf0c      	ite	eq
 80031d2:	600b      	streq	r3, [r1, #0]
 80031d4:	6053      	strne	r3, [r2, #4]
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f85a 	bl	8003290 <__malloc_unlock>
 80031dc:	f104 000b 	add.w	r0, r4, #11
 80031e0:	1d23      	adds	r3, r4, #4
 80031e2:	f020 0007 	bic.w	r0, r0, #7
 80031e6:	1ac2      	subs	r2, r0, r3
 80031e8:	d0cc      	beq.n	8003184 <_malloc_r+0x20>
 80031ea:	1a1b      	subs	r3, r3, r0
 80031ec:	50a3      	str	r3, [r4, r2]
 80031ee:	e7c9      	b.n	8003184 <_malloc_r+0x20>
 80031f0:	4622      	mov	r2, r4
 80031f2:	6864      	ldr	r4, [r4, #4]
 80031f4:	e7cc      	b.n	8003190 <_malloc_r+0x2c>
 80031f6:	1cc4      	adds	r4, r0, #3
 80031f8:	f024 0403 	bic.w	r4, r4, #3
 80031fc:	42a0      	cmp	r0, r4
 80031fe:	d0e3      	beq.n	80031c8 <_malloc_r+0x64>
 8003200:	1a21      	subs	r1, r4, r0
 8003202:	4630      	mov	r0, r6
 8003204:	f000 f82e 	bl	8003264 <_sbrk_r>
 8003208:	3001      	adds	r0, #1
 800320a:	d1dd      	bne.n	80031c8 <_malloc_r+0x64>
 800320c:	e7cf      	b.n	80031ae <_malloc_r+0x4a>
 800320e:	bf00      	nop
 8003210:	200000d0 	.word	0x200000d0
 8003214:	200000d4 	.word	0x200000d4

08003218 <_realloc_r>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	4607      	mov	r7, r0
 800321c:	4614      	mov	r4, r2
 800321e:	460e      	mov	r6, r1
 8003220:	b921      	cbnz	r1, 800322c <_realloc_r+0x14>
 8003222:	4611      	mov	r1, r2
 8003224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003228:	f7ff bf9c 	b.w	8003164 <_malloc_r>
 800322c:	b922      	cbnz	r2, 8003238 <_realloc_r+0x20>
 800322e:	f7ff ff4d 	bl	80030cc <_free_r>
 8003232:	4625      	mov	r5, r4
 8003234:	4628      	mov	r0, r5
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003238:	f000 f830 	bl	800329c <_malloc_usable_size_r>
 800323c:	42a0      	cmp	r0, r4
 800323e:	d20f      	bcs.n	8003260 <_realloc_r+0x48>
 8003240:	4621      	mov	r1, r4
 8003242:	4638      	mov	r0, r7
 8003244:	f7ff ff8e 	bl	8003164 <_malloc_r>
 8003248:	4605      	mov	r5, r0
 800324a:	2800      	cmp	r0, #0
 800324c:	d0f2      	beq.n	8003234 <_realloc_r+0x1c>
 800324e:	4631      	mov	r1, r6
 8003250:	4622      	mov	r2, r4
 8003252:	f7ff ff13 	bl	800307c <memcpy>
 8003256:	4631      	mov	r1, r6
 8003258:	4638      	mov	r0, r7
 800325a:	f7ff ff37 	bl	80030cc <_free_r>
 800325e:	e7e9      	b.n	8003234 <_realloc_r+0x1c>
 8003260:	4635      	mov	r5, r6
 8003262:	e7e7      	b.n	8003234 <_realloc_r+0x1c>

08003264 <_sbrk_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	2300      	movs	r3, #0
 8003268:	4d05      	ldr	r5, [pc, #20]	; (8003280 <_sbrk_r+0x1c>)
 800326a:	4604      	mov	r4, r0
 800326c:	4608      	mov	r0, r1
 800326e:	602b      	str	r3, [r5, #0]
 8003270:	f7ff fb54 	bl	800291c <_sbrk>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d102      	bne.n	800327e <_sbrk_r+0x1a>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	b103      	cbz	r3, 800327e <_sbrk_r+0x1a>
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	bd38      	pop	{r3, r4, r5, pc}
 8003280:	200000f0 	.word	0x200000f0

08003284 <__malloc_lock>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__malloc_lock+0x8>)
 8003286:	f000 b811 	b.w	80032ac <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	200000f8 	.word	0x200000f8

08003290 <__malloc_unlock>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__malloc_unlock+0x8>)
 8003292:	f000 b80c 	b.w	80032ae <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	200000f8 	.word	0x200000f8

0800329c <_malloc_usable_size_r>:
 800329c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a0:	1f18      	subs	r0, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bfbc      	itt	lt
 80032a6:	580b      	ldrlt	r3, [r1, r0]
 80032a8:	18c0      	addlt	r0, r0, r3
 80032aa:	4770      	bx	lr

080032ac <__retarget_lock_acquire_recursive>:
 80032ac:	4770      	bx	lr

080032ae <__retarget_lock_release_recursive>:
 80032ae:	4770      	bx	lr

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
