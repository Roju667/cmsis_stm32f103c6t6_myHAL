
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800162c  08001634  00011634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800162c  0800162c  00011634  2**0
                  CONTENTS
  4 .ARM          00000000  0800162c  0800162c  00011634  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800162c  08001634  00011634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08001634  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001634  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011634  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f9e  00000000  00000000  0001165d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187d  00000000  00000000  000185fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e8  00000000  00000000  00019e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  0001a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001193  00000000  00000000  0001a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bec  00000000  00000000  0001b903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059845  00000000  00000000  000214ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007ad34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010ac  00000000  00000000  0007ad88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001614 	.word	0x08001614

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001614 	.word	0x08001614

08000170 <example_adc_init>:

#include "rcc_example.h"
#include "gpio_example.h"

void example_adc_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

	example_rcc_configure_adc_clock_8Mhz();
 8000176:	f000 f861 	bl	800023c <example_rcc_configure_adc_clock_8Mhz>

	md_systick_configure_ms();
 800017a:	f001 f92d 	bl	80013d8 <md_systick_configure_ms>

	uint16_t adc_value;

	adc_config_t adc_config;
	adc_config.cont_mode_en = true;
 800017e:	2301      	movs	r3, #1
 8000180:	717b      	strb	r3, [r7, #5]
	adc_config.data_alignment_left = false;
 8000182:	2300      	movs	r3, #0
 8000184:	727b      	strb	r3, [r7, #9]
	adc_config.scan_mode_en = false;
 8000186:	2300      	movs	r3, #0
 8000188:	713b      	strb	r3, [r7, #4]
	adc_config.dma_en = false;
 800018a:	2300      	movs	r3, #0
 800018c:	72bb      	strb	r3, [r7, #10]
	adc_config.ext_trig_inj = ADC_TRIG_IN_NO_TRIGGER;
 800018e:	2308      	movs	r3, #8
 8000190:	723b      	strb	r3, [r7, #8]
	adc_config.ext_trig_reg = ADC_TRIG_REG_NO_TRIGGER;
 8000192:	2308      	movs	r3, #8
 8000194:	71fb      	strb	r3, [r7, #7]
	adc_config.number_of_conv = 1;
 8000196:	2301      	movs	r3, #1
 8000198:	71bb      	strb	r3, [r7, #6]

	adc_channel_config_t channel_config;
	channel_config.channel_number = 1;
 800019a:	2301      	movs	r3, #1
 800019c:	703b      	strb	r3, [r7, #0]
	channel_config.sample_time = ADC_SAMPLE_TIME_2395;
 800019e:	2307      	movs	r3, #7
 80001a0:	70bb      	strb	r3, [r7, #2]
	channel_config.sequence_place = 0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	707b      	strb	r3, [r7, #1]

	md_adc_init(&hadc1, adc_config);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80001ac:	4807      	ldr	r0, [pc, #28]	; (80001cc <example_adc_init+0x5c>)
 80001ae:	f000 f8b0 	bl	8000312 <md_adc_init>
	md_adc_init_channel(&hadc1, channel_config);
 80001b2:	6839      	ldr	r1, [r7, #0]
 80001b4:	4805      	ldr	r0, [pc, #20]	; (80001cc <example_adc_init+0x5c>)
 80001b6:	f000 f957 	bl	8000468 <md_adc_init_channel>



	while(1)
	{
		example_heart_beat();
 80001ba:	f000 f81f 	bl	80001fc <example_heart_beat>
		adc_value = md_adc_single_conversion_polling(&hadc1);
 80001be:	4803      	ldr	r0, [pc, #12]	; (80001cc <example_adc_init+0x5c>)
 80001c0:	f000 fa5a 	bl	8000678 <md_adc_single_conversion_polling>
 80001c4:	4603      	mov	r3, r0
 80001c6:	81fb      	strh	r3, [r7, #14]
		example_heart_beat();
 80001c8:	e7f7      	b.n	80001ba <example_adc_init+0x4a>
 80001ca:	bf00      	nop
 80001cc:	20000030 	.word	0x20000030

080001d0 <md_gpio_exti15_10_callback>:
        }
    }
}

void md_gpio_exti15_10_callback(gpio_pin_number_t pin_number)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  send_can_msg = 1;
 80001da:	4b04      	ldr	r3, [pc, #16]	; (80001ec <md_gpio_exti15_10_callback+0x1c>)
 80001dc:	2201      	movs	r2, #1
 80001de:	701a      	strb	r2, [r3, #0]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	20000020 	.word	0x20000020

080001f0 <md_can_mailbox_empty_callback>:

void md_can_mailbox_empty_callback(void) {}
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <example_heart_beat>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  // init LED
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 8000200:	2300      	movs	r3, #0
 8000202:	2201      	movs	r2, #1
 8000204:	210d      	movs	r1, #13
 8000206:	480c      	ldr	r0, [pc, #48]	; (8000238 <example_heart_beat+0x3c>)
 8000208:	f000 fc28 	bl	8000a5c <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // configure systick as 1ms
  md_systick_configure_ms();
 800020c:	f001 f8e4 	bl	80013d8 <md_systick_configure_ms>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	210d      	movs	r1, #13
 8000214:	4808      	ldr	r0, [pc, #32]	; (8000238 <example_heart_beat+0x3c>)
 8000216:	f000 fcee 	bl	8000bf6 <md_gpio_write_pin>

  md_systick_delay(1000);
 800021a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021e:	f001 f8fb 	bl	8001418 <md_systick_delay>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	210d      	movs	r1, #13
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <example_heart_beat+0x3c>)
 8000228:	f000 fce5 	bl	8000bf6 <md_gpio_write_pin>

  md_systick_delay(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000230:	f001 f8f2 	bl	8001418 <md_systick_delay>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000

0800023c <example_rcc_configure_adc_clock_8Mhz>:
                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);
  md_rcc_get_frequencies(&frequencies);
}

void example_rcc_configure_adc_clock_8Mhz(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t frequencies = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]

  // configure frequencies - no prescaler on buses + pll on mul 4x
  md_rcc_configure_prescalers(RCC_AHB_PRESCALER_NODIV, RCC_APB_PRESCALER_NODIV,
 8000250:	2301      	movs	r3, #1
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	2000      	movs	r0, #0
 8000258:	f000 fe7a 	bl	8000f50 <md_rcc_configure_prescalers>
                              RCC_APB_PRESCALER_NODIV, RCC_ADC_PRESCALER_DIV4);
  md_rcc_configure_sysclk(RCC_SYSCLK_SOURCE_PLL, RCC_PLL_SOURCE_HSE,
 800025c:	2300      	movs	r3, #0
 800025e:	2202      	movs	r2, #2
 8000260:	2101      	movs	r1, #1
 8000262:	2002      	movs	r0, #2
 8000264:	f000 fdec 	bl	8000e40 <md_rcc_configure_sysclk>
                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);
  md_rcc_get_frequencies(&frequencies);
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f000 feff 	bl	800106e <md_rcc_get_frequencies>
}
 8000270:	bf00      	nop
 8000272:	3718      	adds	r7, #24
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <md_usart_tc_callback+0x48>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d107      	bne.n	800029a <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <md_usart_tc_callback+0x4c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3301      	adds	r3, #1
 8000290:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <md_usart_tc_callback+0x4c>)
 8000292:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <md_usart_tc_callback+0x50>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <md_usart_tc_callback+0x54>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d107      	bne.n	80002b4 <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <md_usart_tc_callback+0x58>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <md_usart_tc_callback+0x58>)
 80002ac:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <md_usart_tc_callback+0x5c>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
    }
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40013800 	.word	0x40013800
 80002c4:	2000002c 	.word	0x2000002c
 80002c8:	20000029 	.word	0x20000029
 80002cc:	40004400 	.word	0x40004400
 80002d0:	20000024 	.word	0x20000024
 80002d4:	20000028 	.word	0x20000028

080002d8 <md_set_if_condition>:

#define __weak __attribute__((weak))

static inline void md_set_if_condition(bool condition,volatile uint32_t *reg,
                                     uint32_t bit)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	73fb      	strb	r3, [r7, #15]
  if (condition == true)
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d006      	beq.n	80002fa <md_set_if_condition+0x22>
    {
      // set
      *reg |= bit;
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	431a      	orrs	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
  else
    {
      // reset
      *reg &= ~(bit);
    }
}
 80002f8:	e006      	b.n	8000308 <md_set_if_condition+0x30>
      *reg &= ~(bit);
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	43db      	mvns	r3, r3
 8000302:	401a      	ands	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <md_adc_init>:
 * @param[*p_hADCx] - can struct handler @adc_handler
 * @param[adc_config] - @adc_config
 * @return - void
 */
void md_adc_init(adc_handle_t *p_hADCx, adc_config_t adc_config)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	b084      	sub	sp, #16
 8000316:	af00      	add	r7, sp, #0
 8000318:	60f8      	str	r0, [r7, #12]
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	e883 0006 	stmia.w	r3, {r1, r2}
	// init handler and clock
	adc_init_handlers();
 8000320:	f000 f9d0 	bl	80006c4 <adc_init_handlers>
	adc_init_clock(p_hADCx);
 8000324:	68f8      	ldr	r0, [r7, #12]
 8000326:	f000 f9db 	bl	80006e0 <adc_init_clock>

	// scan mode
	md_set_if_condition(adc_config.scan_mode_en, &(p_hADCx->p_ADCx->CR1), ADC_CR1_SCAN);
 800032a:	7938      	ldrb	r0, [r7, #4]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3304      	adds	r3, #4
 8000332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000336:	4619      	mov	r1, r3
 8000338:	f7ff ffce 	bl	80002d8 <md_set_if_condition>
	// continious
	md_set_if_condition(adc_config.cont_mode_en, &(p_hADCx->p_ADCx->CR2), ADC_CR2_CONT);
 800033c:	7978      	ldrb	r0, [r7, #5]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3308      	adds	r3, #8
 8000344:	2202      	movs	r2, #2
 8000346:	4619      	mov	r1, r3
 8000348:	f7ff ffc6 	bl	80002d8 <md_set_if_condition>
	// data allignment
	md_set_if_condition(adc_config.data_alignment_left, &(p_hADCx->p_ADCx->CR2), ADC_CR2_ALIGN);
 800034c:	7a78      	ldrb	r0, [r7, #9]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3308      	adds	r3, #8
 8000354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000358:	4619      	mov	r1, r3
 800035a:	f7ff ffbd 	bl	80002d8 <md_set_if_condition>
	// dma
	md_set_if_condition(adc_config.dma_en, &(p_hADCx->p_ADCx->CR2), ADC_CR2_DMA);
 800035e:	7ab8      	ldrb	r0, [r7, #10]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3308      	adds	r3, #8
 8000366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800036a:	4619      	mov	r1, r3
 800036c:	f7ff ffb4 	bl	80002d8 <md_set_if_condition>

	// trigger mode reg
	if(adc_config.ext_trig_reg < ADC_TRIG_REG_NO_TRIGGER)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b07      	cmp	r3, #7
 8000374:	d819      	bhi.n	80003aa <md_adc_init+0x98>
	{
		SET_BIT(p_hADCx->p_ADCx->CR2,ADC_CR2_EXTTRIG);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000384:	609a      	str	r2, [r3, #8]
		p_hADCx->p_ADCx->CR2 &= ~(ADC_CR2_EXTSEL);
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8000394:	609a      	str	r2, [r3, #8]
		p_hADCx->p_ADCx->CR2 |= (adc_config.ext_trig_reg << ADC_CR2_EXTSEL_Pos);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	045b      	lsls	r3, r3, #17
 80003a0:	4619      	mov	r1, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	430a      	orrs	r2, r1
 80003a8:	609a      	str	r2, [r3, #8]
	}

	// trigger mode inj
	if(adc_config.ext_trig_inj < ADC_TRIG_IN_NO_TRIGGER)
 80003aa:	7a3b      	ldrb	r3, [r7, #8]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d819      	bhi.n	80003e4 <md_adc_init+0xd2>
	{
		SET_BIT(p_hADCx->p_ADCx->CR2,ADC_CR2_JEXTTRIG);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003be:	609a      	str	r2, [r3, #8]
		p_hADCx->p_ADCx->CR2 &= ~(ADC_CR2_JEXTSEL);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80003ce:	609a      	str	r2, [r3, #8]
		p_hADCx->p_ADCx->CR2 |= (adc_config.ext_trig_inj << ADC_CR2_JEXTSEL_Pos);
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	689a      	ldr	r2, [r3, #8]
 80003d6:	7a3b      	ldrb	r3, [r7, #8]
 80003d8:	031b      	lsls	r3, r3, #12
 80003da:	4619      	mov	r1, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	609a      	str	r2, [r3, #8]
	}

	// number of conversions
	p_hADCx->p_ADCx->SQR1 &= ~(ADC_SQR1_L);
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
	p_hADCx->p_ADCx->SQR1 |= ((adc_config.number_of_conv - 1) << ADC_SQR1_L_Pos);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003fa:	79bb      	ldrb	r3, [r7, #6]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	051b      	lsls	r3, r3, #20
 8000400:	4619      	mov	r1, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	430a      	orrs	r2, r1
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c

	//start adc
	SET_BIT(p_hADCx->p_ADCx->CR2,ADC_CR2_ADON);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f042 0201 	orr.w	r2, r2, #1
 8000418:	609a      	str	r2, [r3, #8]
	md_systick_delay(1);
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fffc 	bl	8001418 <md_systick_delay>
	// calibration
	SET_BIT(p_hADCx->p_ADCx->CR2,ADC_CR2_RSTCAL);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	689a      	ldr	r2, [r3, #8]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f042 0208 	orr.w	r2, r2, #8
 800042e:	609a      	str	r2, [r3, #8]

	// wait until register init is finished
	while(p_hADCx->p_ADCx->CR2 & ADC_CR2_RSTCAL);
 8000430:	bf00      	nop
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f8      	bne.n	8000432 <md_adc_init+0x120>

	// enable calibration
	SET_BIT(p_hADCx->p_ADCx->CR2,ADC_CR2_CAL);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f042 0204 	orr.w	r2, r2, #4
 800044e:	609a      	str	r2, [r3, #8]

	// wait until calibration is finished
	while(p_hADCx->p_ADCx->CR2 & ADC_CR2_CAL);
 8000450:	bf00      	nop
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1f8      	bne.n	8000452 <md_adc_init+0x140>

	return;
 8000460:	bf00      	nop
}
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <md_adc_init_channel>:
 * @param[*p_hADCx] - adcx base address
 * @param[config] - configure channel
 * @return - void
 */
void md_adc_init_channel(adc_handle_t *p_hADCx, adc_channel_config_t config)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	adc_init_gpio(p_hADCx, config.channel_number);
 8000472:	783b      	ldrb	r3, [r7, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f956 	bl	8000728 <adc_init_gpio>

	//sample time
	if(config.channel_number > 10)
 800047c:	783b      	ldrb	r3, [r7, #0]
 800047e:	2b0a      	cmp	r3, #10
 8000480:	d935      	bls.n	80004ee <md_adc_init_channel+0x86>
	{
		p_hADCx->p_ADCx->SMPR1 &= ~(ADC_SMPR1_SMP10 << ((config.channel_number % 10)  * 3));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68d8      	ldr	r0, [r3, #12]
 8000488:	783a      	ldrb	r2, [r7, #0]
 800048a:	4b78      	ldr	r3, [pc, #480]	; (800066c <md_adc_init_channel+0x204>)
 800048c:	fba3 1302 	umull	r1, r3, r3, r2
 8000490:	08d9      	lsrs	r1, r3, #3
 8000492:	460b      	mov	r3, r1
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	440b      	add	r3, r1
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	4613      	mov	r3, r2
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	4413      	add	r3, r2
 80004a6:	2207      	movs	r2, #7
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	43da      	mvns	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4002      	ands	r2, r0
 80004b4:	60da      	str	r2, [r3, #12]
		p_hADCx->p_ADCx->SMPR1 |= (config.sample_time << ((config.channel_number % 10)  * 3));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	68d8      	ldr	r0, [r3, #12]
 80004bc:	78bb      	ldrb	r3, [r7, #2]
 80004be:	461c      	mov	r4, r3
 80004c0:	783a      	ldrb	r2, [r7, #0]
 80004c2:	4b6a      	ldr	r3, [pc, #424]	; (800066c <md_adc_init_channel+0x204>)
 80004c4:	fba3 1302 	umull	r1, r3, r3, r2
 80004c8:	08d9      	lsrs	r1, r3, #3
 80004ca:	460b      	mov	r3, r1
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	fa04 f303 	lsl.w	r3, r4, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4302      	orrs	r2, r0
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	e020      	b.n	8000530 <md_adc_init_channel+0xc8>
	}else
	{
		p_hADCx->p_ADCx->SMPR2 &= ~(ADC_SMPR2_SMP0 << ((config.channel_number)  * 3));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6919      	ldr	r1, [r3, #16]
 80004f4:	783b      	ldrb	r3, [r7, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	4613      	mov	r3, r2
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	4413      	add	r3, r2
 80004fe:	2207      	movs	r2, #7
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43da      	mvns	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	400a      	ands	r2, r1
 800050c:	611a      	str	r2, [r3, #16]
		p_hADCx->p_ADCx->SMPR2 |= (config.sample_time << ((config.channel_number)  * 3));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	691a      	ldr	r2, [r3, #16]
 8000514:	78bb      	ldrb	r3, [r7, #2]
 8000516:	4618      	mov	r0, r3
 8000518:	783b      	ldrb	r3, [r7, #0]
 800051a:	4619      	mov	r1, r3
 800051c:	460b      	mov	r3, r1
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	440b      	add	r3, r1
 8000522:	fa00 f303 	lsl.w	r3, r0, r3
 8000526:	4619      	mov	r1, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	430a      	orrs	r2, r1
 800052e:	611a      	str	r2, [r3, #16]
	}

	//sequence position
	if(config.channel_number < 7)
 8000530:	783b      	ldrb	r3, [r7, #0]
 8000532:	2b06      	cmp	r3, #6
 8000534:	d821      	bhi.n	800057a <md_adc_init_channel+0x112>
	{
		p_hADCx->p_ADCx->SQR3 &= ~(ADC_SQR3_SQ1 << (config.sequence_place  * 5));
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800053c:	787b      	ldrb	r3, [r7, #1]
 800053e:	461a      	mov	r2, r3
 8000540:	4613      	mov	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4413      	add	r3, r2
 8000546:	221f      	movs	r2, #31
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43da      	mvns	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	400a      	ands	r2, r1
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
		p_hADCx->p_ADCx->SQR3 |= (config.channel_number << (config.sequence_place * 5));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055c:	783b      	ldrb	r3, [r7, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	787b      	ldrb	r3, [r7, #1]
 8000562:	4619      	mov	r1, r3
 8000564:	460b      	mov	r3, r1
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	440b      	add	r3, r1
 800056a:	fa00 f303 	lsl.w	r3, r0, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	430a      	orrs	r2, r1
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
	{
		p_hADCx->p_ADCx->SQR1 &= ~(ADC_SQR1_SQ13 << ((config.sequence_place % 13)  * 5));
		p_hADCx->p_ADCx->SQR1 |= (config.channel_number << ((config.sequence_place % 13)  * 5));
	}

  return;
 8000578:	e074      	b.n	8000664 <md_adc_init_channel+0x1fc>
	}else if(config.channel_number < 13)
 800057a:	783b      	ldrb	r3, [r7, #0]
 800057c:	2b0c      	cmp	r3, #12
 800057e:	d839      	bhi.n	80005f4 <md_adc_init_channel+0x18c>
		p_hADCx->p_ADCx->SQR2 &= ~(ADC_SQR2_SQ7 << ((config.sequence_place % 7)  * 5));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000586:	787a      	ldrb	r2, [r7, #1]
 8000588:	4b39      	ldr	r3, [pc, #228]	; (8000670 <md_adc_init_channel+0x208>)
 800058a:	fba3 1302 	umull	r1, r3, r3, r2
 800058e:	1ad1      	subs	r1, r2, r3
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	440b      	add	r3, r1
 8000594:	0899      	lsrs	r1, r3, #2
 8000596:	460b      	mov	r3, r1
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	1a5b      	subs	r3, r3, r1
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	221f      	movs	r2, #31
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43da      	mvns	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4002      	ands	r2, r0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
		p_hADCx->p_ADCx->SQR2 |= (config.channel_number << ((config.sequence_place % 7)  * 5));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005be:	783b      	ldrb	r3, [r7, #0]
 80005c0:	461c      	mov	r4, r3
 80005c2:	787a      	ldrb	r2, [r7, #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <md_adc_init_channel+0x208>)
 80005c6:	fba3 1302 	umull	r1, r3, r3, r2
 80005ca:	1ad1      	subs	r1, r2, r3
 80005cc:	0849      	lsrs	r1, r1, #1
 80005ce:	440b      	add	r3, r1
 80005d0:	0899      	lsrs	r1, r3, #2
 80005d2:	460b      	mov	r3, r1
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	1a5b      	subs	r3, r3, r1
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	fa04 f303 	lsl.w	r3, r4, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4302      	orrs	r2, r0
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
  return;
 80005f2:	e037      	b.n	8000664 <md_adc_init_channel+0x1fc>
		p_hADCx->p_ADCx->SQR1 &= ~(ADC_SQR1_SQ13 << ((config.sequence_place % 13)  * 5));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005fa:	7879      	ldrb	r1, [r7, #1]
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <md_adc_init_channel+0x20c>)
 80005fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000602:	089a      	lsrs	r2, r3, #2
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	1acb      	subs	r3, r1, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	221f      	movs	r2, #31
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	43da      	mvns	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4002      	ands	r2, r0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
		p_hADCx->p_ADCx->SQR1 |= (config.channel_number << ((config.sequence_place % 13)  * 5));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000630:	783b      	ldrb	r3, [r7, #0]
 8000632:	461c      	mov	r4, r3
 8000634:	7879      	ldrb	r1, [r7, #1]
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <md_adc_init_channel+0x20c>)
 8000638:	fba3 2301 	umull	r2, r3, r3, r1
 800063c:	089a      	lsrs	r2, r3, #2
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	1acb      	subs	r3, r1, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	fa04 f303 	lsl.w	r3, r4, r3
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4302      	orrs	r2, r0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  return;
 8000662:	bf00      	nop
}
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	cccccccd 	.word	0xcccccccd
 8000670:	24924925 	.word	0x24924925
 8000674:	4ec4ec4f 	.word	0x4ec4ec4f

08000678 <md_adc_single_conversion_polling>:
 * ADC single conversion in polling mode
 * @param[*p_hADCx] - adcx base address
 * @return - void
 */
uint16_t md_adc_single_conversion_polling(adc_handle_t *p_hADCx)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	uint16_t adc_value = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	81fb      	strh	r3, [r7, #14]

	SET_BIT(p_hADCx->p_ADCx->CR2,ADC_CR2_ADON);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f042 0201 	orr.w	r2, r2, #1
 8000692:	609a      	str	r2, [r3, #8]
	md_systick_delay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f000 febf 	bl	8001418 <md_systick_delay>
	// wait until data is ready
	while(!(p_hADCx->p_ADCx->SR & ADC_SR_EOC));
 800069a:	bf00      	nop
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f8      	beq.n	800069c <md_adc_single_conversion_polling+0x24>

	adc_value = (p_hADCx->p_ADCx->DR & 0x0FFF);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006b6:	81fb      	strh	r3, [r7, #14]
	return adc_value;
 80006b8:	89fb      	ldrh	r3, [r7, #14]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <adc_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
static void adc_init_handlers(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
#if MD_USING_ADC1
  hadc1.p_ADCx = ADC1;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <adc_init_handlers+0x14>)
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <adc_init_handlers+0x18>)
 80006cc:	601a      	str	r2, [r3, #0]
#endif // MD_USING_ADC1
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000030 	.word	0x20000030
 80006dc:	40012400 	.word	0x40012400

080006e0 <adc_init_clock>:
 * Starts clock for ADC and resets the peripheral
 * @param[*p_hADCx] - adcx base address
 * @return - void
 */
static void adc_init_clock(adc_handle_t *p_hADCx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if (RCC->APB2ENR & RCC_APB2ENR_ADC1EN)
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <adc_init_clock+0x44>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d112      	bne.n	800071a <adc_init_clock+0x3a>
    return;

  RCC_CLOCK_ENABLE_ADC1();
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <adc_init_clock+0x44>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <adc_init_clock+0x44>)
 80006fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006fe:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADC1RST);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <adc_init_clock+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <adc_init_clock+0x44>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADC1RST);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <adc_init_clock+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <adc_init_clock+0x44>)
 8000712:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000716:	60d3      	str	r3, [r2, #12]

  return;
 8000718:	e000      	b.n	800071c <adc_init_clock+0x3c>
    return;
 800071a:	bf00      	nop
}
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000

08000728 <adc_init_gpio>:
 * @param[*p_hADCx] - adcx base address
 * @param[adc_channel] - channel number
 * @return - void
 */
static void adc_init_gpio(adc_handle_t *p_hADCx, uint8_t adc_channel)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *adc_pin_port;
	gpio_pin_number_t adc_pin_number;

	if(adc_channel < 8)
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d804      	bhi.n	8000744 <adc_init_gpio+0x1c>
	{
		adc_pin_port = GPIOA;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <adc_init_gpio+0x4c>)
 800073c:	60fb      	str	r3, [r7, #12]
		adc_pin_number = adc_channel;
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	e00d      	b.n	8000760 <adc_init_gpio+0x38>
	}else if(adc_channel < 10)
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b09      	cmp	r3, #9
 8000748:	d805      	bhi.n	8000756 <adc_init_gpio+0x2e>
	{
		adc_pin_port = GPIOB;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <adc_init_gpio+0x50>)
 800074c:	60fb      	str	r3, [r7, #12]
		adc_pin_number = adc_channel - 8;
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	3b08      	subs	r3, #8
 8000752:	72fb      	strb	r3, [r7, #11]
 8000754:	e004      	b.n	8000760 <adc_init_gpio+0x38>
	}else
	{
		adc_pin_port = GPIOC;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <adc_init_gpio+0x54>)
 8000758:	60fb      	str	r3, [r7, #12]
		adc_pin_number = adc_channel - 10;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	3b0a      	subs	r3, #10
 800075e:	72fb      	strb	r3, [r7, #11]
	}

	md_gpio_configure_input(adc_pin_port, adc_pin_number, GPIO_INPUT_ANALOG);
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 f9d3 	bl	8000b12 <md_gpio_configure_input>

	return;
 800076c:	bf00      	nop
}
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010800 	.word	0x40010800
 8000778:	40010c00 	.word	0x40010c00
 800077c:	40011000 	.word	0x40011000

08000780 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0c      	blt.n	80007ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <__NVIC_ClearPendingIRQ+0x38>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	3360      	adds	r3, #96	; 0x60
 80007a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e100 	.word	0xe000e100

080007bc <md_can_msg_pending_fifo0_callback>:
/*
 * this callback is called when message is recieved and previous message was
 * already read
 * @return - void
 */
__weak void md_can_msg_pending_fifo0_callback(void) {}
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <md_can_msg_pending_fifo1_callback>:
/*
 * this callback is called when message is recieved and previous message was
 * already read
 * @return - void
 */
__weak void md_can_msg_pending_fifo1_callback(void) {}
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <can_main_rx0_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx0_callback(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if ((CAN1->RF0R & 0x03) && hcan1.msg_pending_fifo0 == 0)
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <can_main_rx0_callback+0x38>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d011      	beq.n	8000808 <can_main_rx0_callback+0x34>
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <can_main_rx0_callback+0x3c>)
 80007e6:	799b      	ldrb	r3, [r3, #6]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00a      	beq.n	8000808 <can_main_rx0_callback+0x34>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE0);
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <can_main_rx0_callback+0x38>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <can_main_rx0_callback+0x38>)
 80007f8:	f023 0302 	bic.w	r3, r3, #2
 80007fc:	6153      	str	r3, [r2, #20]
      hcan1.msg_pending_fifo0 = 1;
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <can_main_rx0_callback+0x3c>)
 8000800:	2201      	movs	r2, #1
 8000802:	719a      	strb	r2, [r3, #6]
      md_can_msg_pending_fifo0_callback();
 8000804:	f7ff ffda 	bl	80007bc <md_can_msg_pending_fifo0_callback>
    }
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40006400 	.word	0x40006400
 8000810:	20000034 	.word	0x20000034

08000814 <can_main_rx1_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx1_callback(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if ((CAN1->RF1R & 0x03) && hcan1.msg_pending_fifo1 == 0)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <can_main_rx1_callback+0x38>)
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d011      	beq.n	8000848 <can_main_rx1_callback+0x34>
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <can_main_rx1_callback+0x3c>)
 8000826:	79db      	ldrb	r3, [r3, #7]
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <can_main_rx1_callback+0x34>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE1);
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <can_main_rx1_callback+0x38>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <can_main_rx1_callback+0x38>)
 8000838:	f023 0310 	bic.w	r3, r3, #16
 800083c:	6153      	str	r3, [r2, #20]
      hcan1.msg_pending_fifo1 = 1;
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <can_main_rx1_callback+0x3c>)
 8000840:	2201      	movs	r2, #1
 8000842:	71da      	strb	r2, [r3, #7]
      md_can_msg_pending_fifo1_callback();
 8000844:	f7ff ffc0 	bl	80007c8 <md_can_msg_pending_fifo1_callback>
    }
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40006400 	.word	0x40006400
 8000850:	20000034 	.word	0x20000034

08000854 <can_main_sce_callback>:

/*
 * this callback is called on error/status change
 * @return - void
 */
static void can_main_sce_callback(void) {}
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <USB_HP_CAN_TX_IRQHandler>:

// Vector table handlers for can

void USB_HP_CAN_TX_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  // clear only 1 request complete bit - so if 3 mailboxes become empty
  // there will be 3 interrupts
  if (CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_RQCP0))
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000866:	689a      	ldr	r2, [r3, #8]
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <USB_HP_CAN_TX_IRQHandler+0x64>)
 800086a:	4013      	ands	r3, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <USB_HP_CAN_TX_IRQHandler+0x1e>
    {
      CAN1->TSR |= CAN_TSR_RQCP0;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6093      	str	r3, [r2, #8]
 800087c:	e018      	b.n	80008b0 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME1 | CAN_TSR_RQCP1))
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <USB_HP_CAN_TX_IRQHandler+0x68>)
 8000884:	4013      	ands	r3, r2
 8000886:	2b00      	cmp	r3, #0
 8000888:	d006      	beq.n	8000898 <USB_HP_CAN_TX_IRQHandler+0x38>
    {
      CAN1->TSR |= CAN_TSR_RQCP1;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000894:	6093      	str	r3, [r2, #8]
 8000896:	e00b      	b.n	80008b0 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME2 | CAN_TSR_RQCP2))
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <USB_HP_CAN_TX_IRQHandler+0x6c>)
 800089e:	4013      	ands	r3, r2
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d005      	beq.n	80008b0 <USB_HP_CAN_TX_IRQHandler+0x50>
    {
      CAN1->TSR |= CAN_TSR_RQCP2;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80008aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ae:	6093      	str	r3, [r2, #8]
    }

  // clear nvic pending flag
  NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 80008b0:	2013      	movs	r0, #19
 80008b2:	f7ff ff65 	bl	8000780 <__NVIC_ClearPendingIRQ>

  md_can_mailbox_empty_callback();
 80008b6:	f7ff fc9b 	bl	80001f0 <md_can_mailbox_empty_callback>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40006400 	.word	0x40006400
 80008c4:	04000001 	.word	0x04000001
 80008c8:	08000100 	.word	0x08000100
 80008cc:	10010000 	.word	0x10010000

080008d0 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f7ff ff53 	bl	8000780 <__NVIC_ClearPendingIRQ>
  can_main_rx0_callback();
 80008da:	f7ff ff7b 	bl	80007d4 <can_main_rx0_callback>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 80008e6:	2015      	movs	r0, #21
 80008e8:	f7ff ff4a 	bl	8000780 <__NVIC_ClearPendingIRQ>
  can_main_rx1_callback();
 80008ec:	f7ff ff92 	bl	8000814 <can_main_rx1_callback>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(CAN1_SCE_IRQn);
 80008f8:	2016      	movs	r0, #22
 80008fa:	f7ff ff41 	bl	8000780 <__NVIC_ClearPendingIRQ>
  can_main_sce_callback();
 80008fe:	f7ff ffa9 	bl	8000854 <can_main_sce_callback>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <__NVIC_ClearPendingIRQ>:
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0c      	blt.n	8000934 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4907      	ldr	r1, [pc, #28]	; (8000940 <__NVIC_ClearPendingIRQ+0x38>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	3360      	adds	r3, #96	; 0x60
 8000930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100

08000944 <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <md_gpio_init_clock+0x108>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d118      	bne.n	8000986 <md_gpio_init_clock+0x42>
    {
      if (RCC->APB2ENR & RCC_APB2ENR_IOPAEN)
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	2b00      	cmp	r3, #0
 800095e:	d168      	bne.n	8000a32 <md_gpio_init_clock+0xee>
        return;

      RCC_CLOCK_ENABLE_IOPA();
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a3a      	ldr	r2, [pc, #232]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <md_gpio_init_clock+0x10c>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <md_gpio_init_clock+0x10c>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <md_gpio_init_clock+0x10c>)
 800097e:	f023 0304 	bic.w	r3, r3, #4
 8000982:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 8000984:	e05b      	b.n	8000a3e <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOB)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <md_gpio_init_clock+0x110>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d118      	bne.n	80009c0 <md_gpio_init_clock+0x7c>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPBEN)
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	2b00      	cmp	r3, #0
 8000998:	d14d      	bne.n	8000a36 <md_gpio_init_clock+0xf2>
      RCC_CLOCK_ENABLE_IOPB();
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <md_gpio_init_clock+0x10c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a2c      	ldr	r2, [pc, #176]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009b8:	f023 0308 	bic.w	r3, r3, #8
 80009bc:	60d3      	str	r3, [r2, #12]
  return;
 80009be:	e03e      	b.n	8000a3e <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOC)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <md_gpio_init_clock+0x114>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d118      	bne.n	80009fa <md_gpio_init_clock+0xb6>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPCEN)
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0310 	and.w	r3, r3, #16
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d132      	bne.n	8000a3a <md_gpio_init_clock+0xf6>
      RCC_CLOCK_ENABLE_IOPC();
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <md_gpio_init_clock+0x10c>)
 80009f2:	f023 0310 	bic.w	r3, r3, #16
 80009f6:	60d3      	str	r3, [r2, #12]
  return;
 80009f8:	e021      	b.n	8000a3e <md_gpio_init_clock+0xfa>
  else if (p_GPIOx)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01e      	beq.n	8000a3e <md_gpio_init_clock+0xfa>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPDEN)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d11a      	bne.n	8000a42 <md_gpio_init_clock+0xfe>
      RCC_CLOCK_ENABLE_IOPD();
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <md_gpio_init_clock+0x10c>)
 8000a2a:	f023 0320 	bic.w	r3, r3, #32
 8000a2e:	60d3      	str	r3, [r2, #12]
  return;
 8000a30:	e005      	b.n	8000a3e <md_gpio_init_clock+0xfa>
        return;
 8000a32:	bf00      	nop
 8000a34:	e006      	b.n	8000a44 <md_gpio_init_clock+0x100>
        return;
 8000a36:	bf00      	nop
 8000a38:	e004      	b.n	8000a44 <md_gpio_init_clock+0x100>
        return;
 8000a3a:	bf00      	nop
 8000a3c:	e002      	b.n	8000a44 <md_gpio_init_clock+0x100>
  return;
 8000a3e:	bf00      	nop
 8000a40:	e000      	b.n	8000a44 <md_gpio_init_clock+0x100>
        return;
 8000a42:	bf00      	nop
}
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40010800 	.word	0x40010800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000

08000a5c <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	4608      	mov	r0, r1
 8000a66:	4611      	mov	r1, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	70fb      	strb	r3, [r7, #3]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	70bb      	strb	r3, [r7, #2]
 8000a72:	4613      	mov	r3, r2
 8000a74:	707b      	strb	r3, [r7, #1]
  md_gpio_init_clock(p_GPIOx);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ff64 	bl	8000944 <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	d820      	bhi.n	8000ac4 <md_gpio_configure_output+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	78fa      	ldrb	r2, [r7, #3]
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	78b9      	ldrb	r1, [r7, #2]
 8000a9e:	78fa      	ldrb	r2, [r7, #3]
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	7879      	ldrb	r1, [r7, #1]
 8000ab2:	78fa      	ldrb	r2, [r7, #3]
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	3202      	adds	r2, #2
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	431a      	orrs	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 8000ac2:	e023      	b.n	8000b0c <md_gpio_configure_output+0xb0>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	78fa      	ldrb	r2, [r7, #3]
 8000aca:	3a08      	subs	r2, #8
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	210f      	movs	r1, #15
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	78b9      	ldrb	r1, [r7, #2]
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	3a08      	subs	r2, #8
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aec:	431a      	orrs	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	7879      	ldrb	r1, [r7, #1]
 8000af8:	78fa      	ldrb	r2, [r7, #3]
 8000afa:	3a08      	subs	r2, #8
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	3202      	adds	r2, #2
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	431a      	orrs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
  return;
 8000b0a:	bf00      	nop
}
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <md_gpio_configure_input>:
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	70fb      	strb	r3, [r7, #3]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	70bb      	strb	r3, [r7, #2]
  md_gpio_init_clock(p_GPIOx);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ff0e 	bl	8000944 <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b07      	cmp	r3, #7
 8000b2c:	d825      	bhi.n	8000b7a <md_gpio_configure_input+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	78fa      	ldrb	r2, [r7, #3]
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	210f      	movs	r1, #15
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	401a      	ands	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000b44:	78bb      	ldrb	r3, [r7, #2]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d90b      	bls.n	8000b62 <md_gpio_configure_input+0x50>
        {
          p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	78fa      	ldrb	r2, [r7, #3]
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	3202      	adds	r2, #2
 8000b54:	2102      	movs	r1, #2
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e033      	b.n	8000bca <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	78b9      	ldrb	r1, [r7, #2]
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	3202      	adds	r2, #2
 8000b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e027      	b.n	8000bca <md_gpio_configure_input+0xb8>
        }
    }
  else
    {
      // clear config and mode bits
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	78fa      	ldrb	r2, [r7, #3]
 8000b80:	3a08      	subs	r2, #8
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	210f      	movs	r1, #15
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	43d2      	mvns	r2, r2
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	605a      	str	r2, [r3, #4]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000b92:	78bb      	ldrb	r3, [r7, #2]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d90c      	bls.n	8000bb2 <md_gpio_configure_input+0xa0>
        {
          p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	78fa      	ldrb	r2, [r7, #3]
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	3202      	adds	r2, #2
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	e00b      	b.n	8000bca <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	78b9      	ldrb	r1, [r7, #2]
 8000bb8:	78fa      	ldrb	r2, [r7, #3]
 8000bba:	3a08      	subs	r2, #8
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	3202      	adds	r2, #2
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
        }
    }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP)
 8000bca:	78bb      	ldrb	r3, [r7, #2]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d107      	bne.n	8000be0 <md_gpio_configure_input+0xce>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]
  else
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000bde:	e007      	b.n	8000bf0 <md_gpio_configure_input+0xde>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	2201      	movs	r2, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	615a      	str	r2, [r3, #20]
  return;
 8000bee:	bf00      	nop
}
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
 8000c02:	4613      	mov	r3, r2
 8000c04:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8000c06:	78bb      	ldrb	r3, [r7, #2]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d107      	bne.n	8000c1c <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000c1a:	e00a      	b.n	8000c32 <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d107      	bne.n	8000c32 <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	2201      	movs	r2, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	615a      	str	r2, [r3, #20]
  return;
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
}
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <md_gpio_exti4_callback>:
/*
 * callback for exti 4 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti4_callback(void) {}
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <md_gpio_exti3_callback>:
/*
 * callback for exti 3 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti3_callback(void) {}
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <md_gpio_exti2_callback>:
/*
 * callback for exti 2 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti2_callback(void) {}
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <md_gpio_exti1_callback>:
/*
 * callback for exti 1 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti1_callback(void) {}
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <md_gpio_exti0_callback>:
/*
 * callback for exti 0 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti0_callback(void) {}
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <gpio_exti15_10_get_pin>:
/*
 * find first exti pending number from registers 15-10/9-5
 * @return - pin number;
 */
static uint8_t gpio_exti15_10_get_pin(IRQn_Type exti_irq)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  uint32_t temp = EXTI->PR;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <gpio_exti15_10_get_pin+0x90>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	60fb      	str	r3, [r7, #12]

  if (exti_irq == EXTI9_5_IRQn)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b17      	cmp	r3, #23
 8000c8e:	d118      	bne.n	8000cc2 <gpio_exti15_10_get_pin+0x4a>
    {
      temp >>= 5;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	72fb      	strb	r3, [r7, #11]
 8000c9a:	e00e      	b.n	8000cba <gpio_exti15_10_get_pin+0x42>
        {
          if (temp & 0x01)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <gpio_exti15_10_get_pin+0x36>
            return (i + 5);
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	3305      	adds	r3, #5
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	e026      	b.n	8000cfc <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	085b      	lsrs	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	72fb      	strb	r3, [r7, #11]
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d9ed      	bls.n	8000c9c <gpio_exti15_10_get_pin+0x24>
 8000cc0:	e01b      	b.n	8000cfa <gpio_exti15_10_get_pin+0x82>
        }
    }
  else if (exti_irq == EXTI15_10_IRQn)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b28      	cmp	r3, #40	; 0x28
 8000cc8:	d117      	bne.n	8000cfa <gpio_exti15_10_get_pin+0x82>
    {
      temp >>= 10;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	0a9b      	lsrs	r3, r3, #10
 8000cce:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	72bb      	strb	r3, [r7, #10]
 8000cd4:	e00e      	b.n	8000cf4 <gpio_exti15_10_get_pin+0x7c>
        {
          if (temp & 0x01)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <gpio_exti15_10_get_pin+0x70>
            return (i + 10);
 8000ce0:	7abb      	ldrb	r3, [r7, #10]
 8000ce2:	330a      	adds	r3, #10
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	e009      	b.n	8000cfc <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8000cee:	7abb      	ldrb	r3, [r7, #10]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	72bb      	strb	r3, [r7, #10]
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d9ed      	bls.n	8000cd6 <gpio_exti15_10_get_pin+0x5e>
        }
    }

  return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40010400 	.word	0x40010400

08000d0c <EXTI15_10_IRQHandler>:

// Vector table handlers for exti

void EXTI15_10_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI15_10_IRQn);
 8000d12:	2028      	movs	r0, #40	; 0x28
 8000d14:	f7ff ffb0 	bl	8000c78 <gpio_exti15_10_get_pin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <EXTI15_10_IRQHandler+0x3c>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	2101      	movs	r1, #1
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <EXTI15_10_IRQHandler+0x3c>)
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000d30:	2028      	movs	r0, #40	; 0x28
 8000d32:	f7ff fde9 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa49 	bl	80001d0 <md_gpio_exti15_10_callback>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010400 	.word	0x40010400

08000d4c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI9_5_IRQn);
 8000d52:	2017      	movs	r0, #23
 8000d54:	f7ff ff90 	bl	8000c78 <gpio_exti15_10_get_pin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <EXTI9_5_IRQHandler+0x3c>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <EXTI9_5_IRQHandler+0x3c>)
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000d70:	2017      	movs	r0, #23
 8000d72:	f7ff fdc9 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fa29 	bl	80001d0 <md_gpio_exti15_10_callback>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010400 	.word	0x40010400

08000d8c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 4);
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <EXTI4_IRQHandler+0x20>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <EXTI4_IRQHandler+0x20>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f7ff fdb3 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti4_callback();
 8000da2:	f7ff ff4b 	bl	8000c3c <md_gpio_exti4_callback>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010400 	.word	0x40010400

08000db0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 3);
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <EXTI3_IRQHandler+0x20>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <EXTI3_IRQHandler+0x20>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000dc0:	2009      	movs	r0, #9
 8000dc2:	f7ff fda1 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti3_callback();
 8000dc6:	f7ff ff3f 	bl	8000c48 <md_gpio_exti3_callback>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 2);
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <EXTI2_IRQHandler+0x20>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <EXTI2_IRQHandler+0x20>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000de4:	2008      	movs	r0, #8
 8000de6:	f7ff fd8f 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti2_callback();
 8000dea:	f7ff ff33 	bl	8000c54 <md_gpio_exti2_callback>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010400 	.word	0x40010400

08000df8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 1);
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <EXTI1_IRQHandler+0x20>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <EXTI1_IRQHandler+0x20>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f7ff fd7d 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti1_callback();
 8000e0e:	f7ff ff27 	bl	8000c60 <md_gpio_exti1_callback>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010400 	.word	0x40010400

08000e1c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 0);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <EXTI0_IRQHandler+0x20>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <EXTI0_IRQHandler+0x20>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8000e2c:	2006      	movs	r0, #6
 8000e2e:	f7ff fd6b 	bl	8000908 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti0_callback();
 8000e32:	f7ff ff1b 	bl	8000c6c <md_gpio_exti0_callback>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010400 	.word	0x40010400

08000e40 <md_rcc_configure_sysclk>:
 * @param[hse_div] - pll1 hse division factor @rcc_hse_div
 * @return - void
 */
void md_rcc_configure_sysclk(rcc_sysclk_source_t sysclk_source,
                             rcc_pll_source_t pll_source,
                             rcc_pll1_mul_t pll1_mul, rcc_hse_div_t hse_div) {
 8000e40:	b490      	push	{r4, r7}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4623      	mov	r3, r4
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4603      	mov	r3, r0
 8000e54:	71bb      	strb	r3, [r7, #6]
 8000e56:	460b      	mov	r3, r1
 8000e58:	717b      	strb	r3, [r7, #5]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	713b      	strb	r3, [r7, #4]
  // enable HSI
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSI ||
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <md_rcc_configure_sysclk+0x2a>
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10c      	bne.n	8000e84 <md_rcc_configure_sysclk+0x44>
      pll_source == RCC_PLL_SOURCE_HSI) {
    SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e6a:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6013      	str	r3, [r2, #0]
    // wait until HSI is ready
    while (!(RCC->CR & RCC_CR_HSIRDY))
 8000e76:	bf00      	nop
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f9      	beq.n	8000e78 <md_rcc_configure_sysclk+0x38>
      ;
  }

  // enable HSE
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSE ||
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d002      	beq.n	8000e90 <md_rcc_configure_sysclk+0x50>
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d10c      	bne.n	8000eaa <md_rcc_configure_sysclk+0x6a>
      pll_source == RCC_PLL_SOURCE_HSE) {
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
    // wait until HSE is ready
    while (!(RCC->CR & RCC_CR_HSERDY))
 8000e9c:	bf00      	nop
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f9      	beq.n	8000e9e <md_rcc_configure_sysclk+0x5e>
      ;
  }

  // configure PLL
  if (sysclk_source == RCC_SYSCLK_SOURCE_PLL) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d139      	bne.n	8000f24 <md_rcc_configure_sysclk+0xe4>
    // choose PLL source and multiplier
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eba:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll_source << RCC_CFGR_PLLSRC_Pos);
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ed2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ed6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll1_mul << RCC_CFGR_PLLMULL_Pos);
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	797a      	ldrb	r2, [r7, #5]
 8000ede:	0492      	lsls	r2, r2, #18
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6053      	str	r3, [r2, #4]

    // if source is HSE choose prediv
    if (pll_source == RCC_PLL_SOURCE_HSE) {
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10d      	bne.n	8000f0a <md_rcc_configure_sysclk+0xca>
      RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ef8:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (hse_div << RCC_CFGR_PLLXTPRE_Pos);
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	793a      	ldrb	r2, [r7, #4]
 8000f00:	0452      	lsls	r2, r2, #17
 8000f02:	4611      	mov	r1, r2
 8000f04:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f06:	430b      	orrs	r3, r1
 8000f08:	6053      	str	r3, [r2, #4]
    }

    // enable PLL
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f14:	6013      	str	r3, [r2, #0]
    // wait until PLL is ready
    while (!(RCC->CR & RCC_CR_PLLRDY))
 8000f16:	bf00      	nop
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f9      	beq.n	8000f18 <md_rcc_configure_sysclk+0xd8>
      ;
  }

  // change sysclk source
  RCC->CFGR |= (sysclk_source << RCC_CFGR_SW_Pos);
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]

   //wait until sys clock is switched
   while (!(RCC->CFGR & (sysclk_source << 2U)))
 8000f30:	bf00      	nop
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <md_rcc_configure_sysclk+0x10c>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f8      	beq.n	8000f32 <md_rcc_configure_sysclk+0xf2>
      ;

  return;
 8000f40:	bf00      	nop
}
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc90      	pop	{r4, r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <md_rcc_configure_prescalers>:
 * @return - void
 */
void md_rcc_configure_prescalers(rcc_ahb_prescaler_t ahb_prescaler,
                                 rcc_apb_prescaler_t apb1_prescaler,
                                 rcc_apb_prescaler_t apb2_prescaler,
                                 rcc_adc_prescaler_t adc_prescaler) {
 8000f50:	b490      	push	{r4, r7}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	4603      	mov	r3, r0
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	460b      	mov	r3, r1
 8000f68:	717b      	strb	r3, [r7, #5]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	713b      	strb	r3, [r7, #4]
  // configure ahb prescaler
  RCC->CFGR |= (ahb_prescaler << RCC_CFGR_HPRE_Pos);
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6053      	str	r3, [r2, #4]

  // configure apb1/apb2 prescalers
  RCC->CFGR |= (apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	79ba      	ldrb	r2, [r7, #6]
 8000f84:	0212      	lsls	r2, r2, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	797a      	ldrb	r2, [r7, #5]
 8000f94:	02d2      	lsls	r2, r2, #11
 8000f96:	4611      	mov	r1, r2
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	6053      	str	r3, [r2, #4]

  // configure adc prescaler
  RCC->CFGR |= (adc_prescaler << RCC_CFGR_ADCPRE_Pos);
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	793a      	ldrb	r2, [r7, #4]
 8000fa4:	0392      	lsls	r2, r2, #14
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <md_rcc_configure_prescalers+0x68>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6053      	str	r3, [r2, #4]

  return;
 8000fae:	bf00      	nop
}
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc90      	pop	{r4, r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000

08000fbc <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <md_rcc_get_sysclk+0x34>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d00a      	beq.n	8000fe2 <md_rcc_get_sysclk+0x26>
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d80c      	bhi.n	8000fea <md_rcc_get_sysclk+0x2e>
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <md_rcc_get_sysclk+0x1e>
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d002      	beq.n	8000fde <md_rcc_get_sysclk+0x22>
 8000fd8:	e007      	b.n	8000fea <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <md_rcc_get_sysclk+0x38>)
 8000fdc:	e006      	b.n	8000fec <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <md_rcc_get_sysclk+0x38>)
 8000fe0:	e004      	b.n	8000fec <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 8000fe2:	f000 f947 	bl	8001274 <rcc_calculate_pll_sysclk>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	e000      	b.n	8000fec <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	007a1200 	.word	0x007a1200

08000ff8 <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 8000ffe:	f7ff ffdd 	bl	8000fbc <md_rcc_get_sysclk>
 8001002:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 8001004:	f000 f856 	bl	80010b4 <rcc_get_ahb_prescaler>
 8001008:	4603      	mov	r3, r0
 800100a:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 8001026:	f7ff ffe7 	bl	8000ff8 <md_rcc_get_hclk>
 800102a:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f896 	bl	8001160 <rcc_get_apb_prescaler>
 8001034:	4603      	mov	r3, r0
 8001036:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 800104e:	2002      	movs	r0, #2
 8001050:	f7ff ffe4 	bl	800101c <md_rcc_get_pclk>
 8001054:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 8001056:	f000 f94b 	bl	80012f0 <rcc_get_adc_prescaler>
 800105a:	4603      	mov	r3, r0
 800105c:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 8001076:	f7ff ffa1 	bl	8000fbc <md_rcc_get_sysclk>
 800107a:	4602      	mov	r2, r0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8001080:	f7ff ffba 	bl	8000ff8 <md_rcc_get_hclk>
 8001084:	4602      	mov	r2, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff ffc6 	bl	800101c <md_rcc_get_pclk>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff ffc0 	bl	800101c <md_rcc_get_pclk>
 800109c:	4602      	mov	r2, r0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 80010a2:	f7ff ffd1 	bl	8001048 <md_rcc_get_adcclk>
 80010a6:	4602      	mov	r2, r0
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	611a      	str	r2, [r3, #16]

  return;
 80010ac:	bf00      	nop
}
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <rcc_get_ahb_prescaler+0xa8>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d83f      	bhi.n	800114e <rcc_get_ahb_prescaler+0x9a>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <rcc_get_ahb_prescaler+0x20>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	08001115 	.word	0x08001115
 80010d8:	0800114f 	.word	0x0800114f
 80010dc:	0800114f 	.word	0x0800114f
 80010e0:	0800114f 	.word	0x0800114f
 80010e4:	0800114f 	.word	0x0800114f
 80010e8:	0800114f 	.word	0x0800114f
 80010ec:	0800114f 	.word	0x0800114f
 80010f0:	0800114f 	.word	0x0800114f
 80010f4:	0800111b 	.word	0x0800111b
 80010f8:	08001121 	.word	0x08001121
 80010fc:	08001127 	.word	0x08001127
 8001100:	0800112d 	.word	0x0800112d
 8001104:	08001133 	.word	0x08001133
 8001108:	08001139 	.word	0x08001139
 800110c:	0800113f 	.word	0x0800113f
 8001110:	08001147 	.word	0x08001147
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
      break;
 8001118:	e019      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	607b      	str	r3, [r7, #4]
      break;
 800111e:	e016      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	607b      	str	r3, [r7, #4]
      break;
 8001124:	e013      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 8001126:	2308      	movs	r3, #8
 8001128:	607b      	str	r3, [r7, #4]
      break;
 800112a:	e010      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 800112c:	2310      	movs	r3, #16
 800112e:	607b      	str	r3, [r7, #4]
      break;
 8001130:	e00d      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	607b      	str	r3, [r7, #4]
      break;
 8001136:	e00a      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	607b      	str	r3, [r7, #4]
      break;
 800113c:	e007      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	607b      	str	r3, [r7, #4]
      break;
 8001144:	e003      	b.n	800114e <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 8001146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114a:	607b      	str	r3, [r7, #4]
      break;
 800114c:	bf00      	nop
  }

  return ahb_prescaler;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	b29b      	uxth	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000

08001160 <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d002      	beq.n	8001176 <rcc_get_apb_prescaler+0x16>
 8001170:	2b02      	cmp	r3, #2
 8001172:	d008      	beq.n	8001186 <rcc_get_apb_prescaler+0x26>
 8001174:	e00f      	b.n	8001196 <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <rcc_get_apb_prescaler+0x90>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	72fb      	strb	r3, [r7, #11]
      break;
 8001184:	e007      	b.n	8001196 <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <rcc_get_apb_prescaler+0x90>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	0adb      	lsrs	r3, r3, #11
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	72fb      	strb	r3, [r7, #11]
      break;
 8001194:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d822      	bhi.n	80011e2 <rcc_get_apb_prescaler+0x82>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <rcc_get_apb_prescaler+0x44>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011e3 	.word	0x080011e3
 80011ac:	080011e3 	.word	0x080011e3
 80011b0:	080011e3 	.word	0x080011e3
 80011b4:	080011cb 	.word	0x080011cb
 80011b8:	080011d1 	.word	0x080011d1
 80011bc:	080011d7 	.word	0x080011d7
 80011c0:	080011dd 	.word	0x080011dd
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      break;
 80011c8:	e00b      	b.n	80011e2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	60fb      	str	r3, [r7, #12]
      break;
 80011ce:	e008      	b.n	80011e2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
      break;
 80011d4:	e005      	b.n	80011e2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 80011d6:	2308      	movs	r3, #8
 80011d8:	60fb      	str	r3, [r7, #12]
      break;
 80011da:	e002      	b.n	80011e2 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 80011dc:	2310      	movs	r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
      break;
 80011e0:	bf00      	nop
  }

  return apb_prescaler;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	b29b      	uxth	r3, r3
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000

080011f4 <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <rcc_get_pll_multiplier+0x7c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	0c9b      	lsrs	r3, r3, #18
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	3b02      	subs	r3, #2
 800120c:	2b0b      	cmp	r3, #11
 800120e:	d829      	bhi.n	8001264 <rcc_get_pll_multiplier+0x70>
 8001210:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <rcc_get_pll_multiplier+0x24>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	08001249 	.word	0x08001249
 800121c:	0800124d 	.word	0x0800124d
 8001220:	08001251 	.word	0x08001251
 8001224:	08001255 	.word	0x08001255
 8001228:	08001259 	.word	0x08001259
 800122c:	0800125d 	.word	0x0800125d
 8001230:	08001265 	.word	0x08001265
 8001234:	08001265 	.word	0x08001265
 8001238:	08001265 	.word	0x08001265
 800123c:	08001265 	.word	0x08001265
 8001240:	08001265 	.word	0x08001265
 8001244:	08001261 	.word	0x08001261
    case (RCC_PLL1_MUL_X4):
      return 4;
 8001248:	2304      	movs	r3, #4
 800124a:	e00c      	b.n	8001266 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 800124c:	2305      	movs	r3, #5
 800124e:	e00a      	b.n	8001266 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8001250:	2306      	movs	r3, #6
 8001252:	e008      	b.n	8001266 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 8001254:	2307      	movs	r3, #7
 8001256:	e006      	b.n	8001266 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 8001258:	2308      	movs	r3, #8
 800125a:	e004      	b.n	8001266 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 800125c:	2309      	movs	r3, #9
 800125e:	e002      	b.n	8001266 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8001260:	230d      	movs	r3, #13
 8001262:	e000      	b.n	8001266 <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000

08001274 <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 800127a:	f7ff ffbb 	bl	80011f4 <rcc_get_pll_multiplier>
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <rcc_calculate_pll_sysclk+0x70>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <rcc_calculate_pll_sysclk+0x70>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <rcc_calculate_pll_sysclk+0x3a>
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d006      	beq.n	80012ba <rcc_calculate_pll_sysclk+0x46>
 80012ac:	e00e      	b.n	80012cc <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <rcc_calculate_pll_sysclk+0x74>)
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	60bb      	str	r3, [r7, #8]
      break;
 80012b8:	e008      	b.n	80012cc <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <rcc_calculate_pll_sysclk+0x78>)
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	60bb      	str	r3, [r7, #8]
      break;
 80012ca:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b0d      	cmp	r3, #13
 80012d0:	d102      	bne.n	80012d8 <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 80012d8:	68bb      	ldr	r3, [r7, #8]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	003d0900 	.word	0x003d0900
 80012ec:	007a1200 	.word	0x007a1200

080012f0 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <rcc_get_adc_prescaler+0x4c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	0b9b      	lsrs	r3, r3, #14
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d812      	bhi.n	8001330 <rcc_get_adc_prescaler+0x40>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <rcc_get_adc_prescaler+0x20>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001321 	.word	0x08001321
 8001314:	08001325 	.word	0x08001325
 8001318:	08001329 	.word	0x08001329
 800131c:	0800132d 	.word	0x0800132d
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 8001320:	2302      	movs	r3, #2
 8001322:	e006      	b.n	8001332 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 8001324:	2304      	movs	r3, #4
 8001326:	e004      	b.n	8001332 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 8001328:	2306      	movs	r3, #6
 800132a:	e002      	b.n	8001332 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 800132c:	2308      	movs	r3, #8
 800132e:	e000      	b.n	8001332 <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 8001330:	2300      	movs	r3, #0

}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ffc2 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe44 	bl	800106e <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <md_systick_configure_ms+0x28>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffcf 	bl	8001394 <SysTick_Config>

  return;
 80013f6:	bf00      	nop
}
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	10624dd3 	.word	0x10624dd3

08001404 <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <md_systick_get_tick+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	2000001c 	.word	0x2000001c

08001418 <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 8001420:	f7ff fff0 	bl	8001404 <md_systick_get_tick>
 8001424:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 8001426:	bf00      	nop
 8001428:	f7ff ffec 	bl	8001404 <md_systick_get_tick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <md_systick_delay+0x10>
    ;
  return;
 8001438:	bf00      	nop
}
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Handler+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <SysTick_Handler+0x18>)
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000001c 	.word	0x2000001c

0800145c <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	88da      	ldrh	r2, [r3, #6]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	889b      	ldrh	r3, [r3, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	d20f      	bcs.n	80014a2 <usart_txe_callback+0x34>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	88d2      	ldrh	r2, [r2, #6]
 800148a:	4413      	add	r3, r2
 800148c:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	88db      	ldrh	r3, [r3, #6]
 8001498:	3301      	adds	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	80da      	strh	r2, [r3, #6]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 80014a0:	e00b      	b.n	80014ba <usart_txe_callback+0x4c>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b0:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	735a      	strb	r2, [r3, #13]
  return;
 80014b8:	bf00      	nop
}
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b5b      	ldrb	r3, [r3, #13]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d105      	bne.n	80014ec <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffbb 	bl	800145c <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffc1 	bl	800146e <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	88da      	ldrh	r2, [r3, #6]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	889b      	ldrh	r3, [r3, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d10a      	bne.n	800151c <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe feb6 	bl	8000278 <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800151a:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800152a:	60da      	str	r2, [r3, #12]
    }

  return;
 800152c:	bf00      	nop
 800152e:	bf00      	nop
}
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <USART1_IRQHandler+0x10>)
 800153e:	f7ff ffc0 	bl	80014c2 <usart_main_callback>
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000004c 	.word	0x2000004c

0800154c <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART2_IRQHandler+0x10>)
 8001552:	f7ff ffb6 	bl	80014c2 <usart_main_callback>
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000003c 	.word	0x2000003c

08001560 <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* SPI EXAMPLES */
  //  example_spi_transfer_message();
  //  example_spi_transfer_tft();

	/* ADC EXAMPLES */
	example_adc_init();
 8001564:	f7fe fe04 	bl	8000170 <example_adc_init>

  for (;;)
 8001568:	e7fe      	b.n	8001568 <main+0x8>

0800156a <SystemInit>:
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800157c:	f7ff fff5 	bl	800156a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015a6:	f000 f811 	bl	80015cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015aa:	f7ff ffd9 	bl	8001560 <main>

080015ae <LoopForever>:

LoopForever:
    b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   r0, =_estack
 80015b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80015bc:	08001634 	.word	0x08001634
  ldr r2, =_sbss
 80015c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80015c4:	2000005c 	.word	0x2000005c

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>
	...

080015cc <__libc_init_array>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	2600      	movs	r6, #0
 80015d0:	4d0c      	ldr	r5, [pc, #48]	; (8001604 <__libc_init_array+0x38>)
 80015d2:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <__libc_init_array+0x3c>)
 80015d4:	1b64      	subs	r4, r4, r5
 80015d6:	10a4      	asrs	r4, r4, #2
 80015d8:	42a6      	cmp	r6, r4
 80015da:	d109      	bne.n	80015f0 <__libc_init_array+0x24>
 80015dc:	f000 f81a 	bl	8001614 <_init>
 80015e0:	2600      	movs	r6, #0
 80015e2:	4d0a      	ldr	r5, [pc, #40]	; (800160c <__libc_init_array+0x40>)
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <__libc_init_array+0x44>)
 80015e6:	1b64      	subs	r4, r4, r5
 80015e8:	10a4      	asrs	r4, r4, #2
 80015ea:	42a6      	cmp	r6, r4
 80015ec:	d105      	bne.n	80015fa <__libc_init_array+0x2e>
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f4:	4798      	blx	r3
 80015f6:	3601      	adds	r6, #1
 80015f8:	e7ee      	b.n	80015d8 <__libc_init_array+0xc>
 80015fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80015fe:	4798      	blx	r3
 8001600:	3601      	adds	r6, #1
 8001602:	e7f2      	b.n	80015ea <__libc_init_array+0x1e>
 8001604:	0800162c 	.word	0x0800162c
 8001608:	0800162c 	.word	0x0800162c
 800160c:	0800162c 	.word	0x0800162c
 8001610:	08001630 	.word	0x08001630

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
