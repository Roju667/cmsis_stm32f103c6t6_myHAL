
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001530  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d0  080016d0  000116d8  2**0
                  CONTENTS
  4 .ARM          00000000  080016d0  080016d0  000116d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d0  080016d8  000116d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000116d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  080016d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080016d8  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000116d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007473  00000000  00000000  00011701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d0  00000000  00000000  00018b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  0001a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  0001aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001374  00000000  00000000  0001aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d27  00000000  00000000  0001c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a1d3  00000000  00000000  00021f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007c14e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001210  00000000  00000000  0007c1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001648 	.word	0x08001648

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001648 	.word	0x08001648

08000170 <ILI9341_Delay>:
#include "ILI9341.h"

spi_handle_t *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { md_systick_delay(ms); }
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f001 f967 	bl	800144c <md_systick_delay>
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
	...

08000188 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	70fb      	strb	r3, [r7, #3]

  md_spi_tx_polling(Tft_hspi, Data, Lenght, 5000);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <ILI9341_SendTFT+0x28>)
 8000196:	6818      	ldr	r0, [r3, #0]
 8000198:	78fb      	ldrb	r3, [r7, #3]
 800019a:	b29a      	uxth	r2, r3
 800019c:	f241 3388 	movw	r3, #5000	; 0x1388
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	f001 f802 	bl	80011aa <md_spi_tx_polling>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000020 	.word	0x20000020

080001b4 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
  // CS LOW
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
 80001be:	2200      	movs	r2, #0
 80001c0:	210b      	movs	r1, #11
 80001c2:	480b      	ldr	r0, [pc, #44]	; (80001f0 <ILI9341_SendCommand+0x3c>)
 80001c4:	f000 fc3f 	bl	8000a46 <md_gpio_write_pin>
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80001c8:	2200      	movs	r2, #0
 80001ca:	210a      	movs	r1, #10
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <ILI9341_SendCommand+0x3c>)
 80001ce:	f000 fc3a 	bl	8000a46 <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80001d2:	1dfb      	adds	r3, r7, #7
 80001d4:	2101      	movs	r1, #1
 80001d6:	4618      	mov	r0, r3
 80001d8:	f7ff ffd6 	bl	8000188 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
 80001dc:	2201      	movs	r2, #1
 80001de:	210b      	movs	r1, #11
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <ILI9341_SendCommand+0x3c>)
 80001e2:	f000 fc30 	bl	8000a46 <md_gpio_write_pin>
#endif
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <ILI9341_SendData16>:

// Send 16 bit data
static void ILI9341_SendData16(uint16_t Data)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	80fb      	strh	r3, [r7, #6]
  // CS LOW
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
 80001fe:	2200      	movs	r2, #0
 8000200:	210b      	movs	r1, #11
 8000202:	480f      	ldr	r0, [pc, #60]	; (8000240 <ILI9341_SendData16+0x4c>)
 8000204:	f000 fc1f 	bl	8000a46 <md_gpio_write_pin>
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 8000208:	2201      	movs	r2, #1
 800020a:	210a      	movs	r1, #10
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <ILI9341_SendData16+0x4c>)
 800020e:	f000 fc1a 	bl	8000a46 <md_gpio_write_pin>

  // Send 2 8 bits, first MSB (ILI9341 datasheet)
  uint8_t tmp[2];
  tmp[0] = (Data >> 8);
 8000212:	88fb      	ldrh	r3, [r7, #6]
 8000214:	0a1b      	lsrs	r3, r3, #8
 8000216:	b29b      	uxth	r3, r3
 8000218:	b2db      	uxtb	r3, r3
 800021a:	733b      	strb	r3, [r7, #12]
  tmp[1] = Data & 0xFF;
 800021c:	88fb      	ldrh	r3, [r7, #6]
 800021e:	b2db      	uxtb	r3, r3
 8000220:	737b      	strb	r3, [r7, #13]

  // SEND COMMAND
  ILI9341_SendTFT(tmp, 2);
 8000222:	f107 030c 	add.w	r3, r7, #12
 8000226:	2102      	movs	r1, #2
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ffad 	bl	8000188 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
 800022e:	2201      	movs	r2, #1
 8000230:	210b      	movs	r1, #11
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <ILI9341_SendData16+0x4c>)
 8000234:	f000 fc07 	bl	8000a46 <md_gpio_write_pin>
#endif
}
 8000238:	bf00      	nop
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40010c00 	.word	0x40010c00

08000244 <ILI9341_SendCommandAndData>:

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
 8000250:	4613      	mov	r3, r2
 8000252:	80bb      	strh	r3, [r7, #4]
  // CS LOW
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
 8000254:	2200      	movs	r2, #0
 8000256:	210b      	movs	r1, #11
 8000258:	4810      	ldr	r0, [pc, #64]	; (800029c <ILI9341_SendCommandAndData+0x58>)
 800025a:	f000 fbf4 	bl	8000a46 <md_gpio_write_pin>
#endif

  // DC LOW
  ILI9341_DC_LOW;
 800025e:	2200      	movs	r2, #0
 8000260:	210a      	movs	r1, #10
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <ILI9341_SendCommandAndData+0x58>)
 8000264:	f000 fbef 	bl	8000a46 <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	2101      	movs	r1, #1
 800026c:	4618      	mov	r0, r3
 800026e:	f7ff ff8b 	bl	8000188 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 8000272:	2201      	movs	r2, #1
 8000274:	210a      	movs	r1, #10
 8000276:	4809      	ldr	r0, [pc, #36]	; (800029c <ILI9341_SendCommandAndData+0x58>)
 8000278:	f000 fbe5 	bl	8000a46 <md_gpio_write_pin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 800027c:	88bb      	ldrh	r3, [r7, #4]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	4619      	mov	r1, r3
 8000282:	6838      	ldr	r0, [r7, #0]
 8000284:	f7ff ff80 	bl	8000188 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
 8000288:	2201      	movs	r2, #1
 800028a:	210b      	movs	r1, #11
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <ILI9341_SendCommandAndData+0x58>)
 800028e:	f000 fbda 	bl	8000a46 <md_gpio_write_pin>
#endif
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010c00 	.word	0x40010c00

080002a0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	d820      	bhi.n	80002f2 <ILI9341_SetRotation+0x52>
    return;

  switch (Rotation)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d816      	bhi.n	80002e4 <ILI9341_SetRotation+0x44>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <ILI9341_SetRotation+0x1c>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002d3 	.word	0x080002d3
 80002c4:	080002d9 	.word	0x080002d9
 80002c8:	080002df 	.word	0x080002df
    {
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 80002cc:	2348      	movs	r3, #72	; 0x48
 80002ce:	71fb      	strb	r3, [r7, #7]
      break;
 80002d0:	e008      	b.n	80002e4 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 80002d2:	2328      	movs	r3, #40	; 0x28
 80002d4:	71fb      	strb	r3, [r7, #7]
      break;
 80002d6:	e005      	b.n	80002e4 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 80002d8:	2388      	movs	r3, #136	; 0x88
 80002da:	71fb      	strb	r3, [r7, #7]
      break;
 80002dc:	e002      	b.n	80002e4 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80002de:	23e8      	movs	r3, #232	; 0xe8
 80002e0:	71fb      	strb	r3, [r7, #7]
      break;
 80002e2:	bf00      	nop
    }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	2201      	movs	r2, #1
 80002e8:	4619      	mov	r1, r3
 80002ea:	2036      	movs	r0, #54	; 0x36
 80002ec:	f7ff ffaa 	bl	8000244 <ILI9341_SendCommandAndData>
 80002f0:	e000      	b.n	80002f4 <ILI9341_SetRotation+0x54>
    return;
 80002f2:	bf00      	nop
}
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop

080002fc <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	4604      	mov	r4, r0
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4623      	mov	r3, r4
 800030c:	80fb      	strh	r3, [r7, #6]
 800030e:	4603      	mov	r3, r0
 8000310:	80bb      	strh	r3, [r7, #4]
 8000312:	460b      	mov	r3, r1
 8000314:	807b      	strh	r3, [r7, #2]
 8000316:	4613      	mov	r3, r2
 8000318:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800031a:	88fa      	ldrh	r2, [r7, #6]
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	4413      	add	r3, r2
 8000320:	b29b      	uxth	r3, r3
 8000322:	3b01      	subs	r3, #1
 8000324:	81fb      	strh	r3, [r7, #14]
 8000326:	88ba      	ldrh	r2, [r7, #4]
 8000328:	883b      	ldrh	r3, [r7, #0]
 800032a:	4413      	add	r3, r2
 800032c:	b29b      	uxth	r3, r3
 800032e:	3b01      	subs	r3, #1
 8000330:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b29b      	uxth	r3, r3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 800033c:	88fb      	ldrh	r3, [r7, #6]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 8000342:	89fb      	ldrh	r3, [r7, #14]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	b2db      	uxtb	r3, r3
 800034a:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 800034c:	89fb      	ldrh	r3, [r7, #14]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2204      	movs	r2, #4
 8000358:	4619      	mov	r1, r3
 800035a:	202a      	movs	r0, #42	; 0x2a
 800035c:	f7ff ff72 	bl	8000244 <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	0a1b      	lsrs	r3, r3, #8
 8000364:	b29b      	uxth	r3, r3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 800036a:	88bb      	ldrh	r3, [r7, #4]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 8000370:	89bb      	ldrh	r3, [r7, #12]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	b29b      	uxth	r3, r3
 8000376:	b2db      	uxtb	r3, r3
 8000378:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 800037a:	89bb      	ldrh	r3, [r7, #12]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	2204      	movs	r2, #4
 8000386:	4619      	mov	r1, r3
 8000388:	202b      	movs	r0, #43	; 0x2b
 800038a:	f7ff ff5b 	bl	8000244 <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR); // Write to RAM
 800038e:	202c      	movs	r0, #44	; 0x2c
 8000390:	f7ff ff10 	bl	80001b4 <ILI9341_SendCommand>
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bd90      	pop	{r4, r7, pc}

0800039c <ILI9341_ClearDisplay>:
    }
}

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 80003a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80003aa:	60bb      	str	r3, [r7, #8]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 80003ac:	23f0      	movs	r3, #240	; 0xf0
 80003ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80003b2:	2100      	movs	r1, #0
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ffa1 	bl	80002fc <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 80003ba:	202c      	movs	r0, #44	; 0x2c
 80003bc:	f7ff fefa 	bl	80001b4 <ILI9341_SendCommand>

  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	e006      	b.n	80003d4 <ILI9341_ClearDisplay+0x38>
    {
      ILI9341_SendData16(color);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff13 	bl	80001f4 <ILI9341_SendData16>
  for (uint32_t i = 0; i < Lenght; i++)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	3301      	adds	r3, #1
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d3f4      	bcc.n	80003c6 <ILI9341_ClearDisplay+0x2a>
    }

}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <ILI9341_Init>:
    0x80, // Display on
    0x00  // End of list
};

void ILI9341_Init(spi_handle_t *hspi)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  // assign correct spi
  Tft_hspi = hspi;
 80003f0:	4a22      	ldr	r2, [pc, #136]	; (800047c <ILI9341_Init+0x94>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <ILI9341_Init+0x98>)
 80003f8:	60fb      	str	r3, [r7, #12]
  ILI9341_CS_HIGH;
 80003fa:	2201      	movs	r2, #1
 80003fc:	210b      	movs	r1, #11
 80003fe:	4821      	ldr	r0, [pc, #132]	; (8000484 <ILI9341_Init+0x9c>)
 8000400:	f000 fb21 	bl	8000a46 <md_gpio_write_pin>

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 8000404:	2200      	movs	r2, #0
 8000406:	2101      	movs	r1, #1
 8000408:	481e      	ldr	r0, [pc, #120]	; (8000484 <ILI9341_Init+0x9c>)
 800040a:	f000 fb1c 	bl	8000a46 <md_gpio_write_pin>
  ILI9341_Delay(10);
 800040e:	200a      	movs	r0, #10
 8000410:	f7ff feae 	bl	8000170 <ILI9341_Delay>
  ILI9341_RST_HIGH;
 8000414:	2201      	movs	r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	481a      	ldr	r0, [pc, #104]	; (8000484 <ILI9341_Init+0x9c>)
 800041a:	f000 fb14 	bl	8000a46 <md_gpio_write_pin>
  ILI9341_Delay(10);
 800041e:	200a      	movs	r0, #10
 8000420:	f7ff fea6 	bl	8000170 <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0)
 8000424:	e01a      	b.n	800045c <ILI9341_Init+0x74>
    {
      // assign value form address to x (second value that is number of data to
      // be send)
      x = *(addr++);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	72bb      	strb	r3, [r7, #10]

      // mask this value to maximum of 127
      // 0x7F	0111 1111
      // so if we send 0x80 as second argument then we just send command ->
      // without data
      numArgs = x & 0x7F;
 8000430:	7abb      	ldrb	r3, [r7, #10]
 8000432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000436:	727b      	strb	r3, [r7, #9]

      // send command then array of data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8000438:	7a7b      	ldrb	r3, [r7, #9]
 800043a:	b29a      	uxth	r2, r3
 800043c:	7afb      	ldrb	r3, [r7, #11]
 800043e:	68f9      	ldr	r1, [r7, #12]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff feff 	bl	8000244 <ILI9341_SendCommandAndData>

      // move adress to next command
      addr += numArgs;
 8000446:	7a7b      	ldrb	r3, [r7, #9]
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	4413      	add	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]

      // if only command is sent then make a delay
      if (x & 0x80)
 800044e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000452:	2b00      	cmp	r3, #0
 8000454:	da02      	bge.n	800045c <ILI9341_Init+0x74>
        {
          ILI9341_Delay(150);
 8000456:	2096      	movs	r0, #150	; 0x96
 8000458:	f7ff fe8a 	bl	8000170 <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0)
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	60fa      	str	r2, [r7, #12]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	72fb      	strb	r3, [r7, #11]
 8000466:	7afb      	ldrb	r3, [r7, #11]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1dc      	bne.n	8000426 <ILI9341_Init+0x3e>
        }
    }

  ILI9341_SetRotation(ILI9341_ROTATION);
 800046c:	2001      	movs	r0, #1
 800046e:	f7ff ff17 	bl	80002a0 <ILI9341_SetRotation>
}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000020 	.word	0x20000020
 8000480:	08001660 	.word	0x08001660
 8000484:	40010c00 	.word	0x40010c00

08000488 <md_gpio_exti15_10_callback>:
        }
    }
}

void md_gpio_exti15_10_callback(gpio_pin_number_t pin_number)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
  send_can_msg = 1;
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <md_gpio_exti15_10_callback+0x1c>)
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000024 	.word	0x20000024

080004a8 <md_can_mailbox_empty_callback>:

void md_can_mailbox_empty_callback(void) {}
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <example_heart_beat>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  // init LED
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 80004b8:	2300      	movs	r3, #0
 80004ba:	2201      	movs	r2, #1
 80004bc:	210d      	movs	r1, #13
 80004be:	480c      	ldr	r0, [pc, #48]	; (80004f0 <example_heart_beat+0x3c>)
 80004c0:	f000 f9f4 	bl	80008ac <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // configure systick as 1ms
  md_systick_configure_ms();
 80004c4:	f000 ffa2 	bl	800140c <md_systick_configure_ms>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	210d      	movs	r1, #13
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <example_heart_beat+0x3c>)
 80004ce:	f000 faba 	bl	8000a46 <md_gpio_write_pin>

  md_systick_delay(1000);
 80004d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d6:	f000 ffb9 	bl	800144c <md_systick_delay>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	210d      	movs	r1, #13
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <example_heart_beat+0x3c>)
 80004e0:	f000 fab1 	bl	8000a46 <md_gpio_write_pin>

  md_systick_delay(1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f000 ffb0 	bl	800144c <md_systick_delay>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40011000 	.word	0x40011000

080004f4 <example_spi_transfer_tft>:
      example_heart_beat();
    }
}

void example_spi_transfer_tft(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  // init spi and sys tick
  md_systick_configure_ms();
 80004fa:	f000 ff87 	bl	800140c <md_systick_configure_ms>

  md_spi_init(&hspi1);
 80004fe:	481a      	ldr	r0, [pc, #104]	; (8000568 <example_spi_transfer_tft+0x74>)
 8000500:	f000 fd88 	bl	8001014 <md_spi_init>

  spi_config_t spi_config;
  spi_config.clock_1_when_idle = false;
 8000504:	2300      	movs	r3, #0
 8000506:	717b      	strb	r3, [r7, #5]
  spi_config.clock_second_edge_capture = false;
 8000508:	2300      	movs	r3, #0
 800050a:	71bb      	strb	r3, [r7, #6]
  spi_config.data_format_16bit = false;
 800050c:	2300      	movs	r3, #0
 800050e:	70fb      	strb	r3, [r7, #3]
  spi_config.full_duplex = true;
 8000510:	2301      	movs	r3, #1
 8000512:	707b      	strb	r3, [r7, #1]
  spi_config.lsb_first = false;
 8000514:	2300      	movs	r3, #0
 8000516:	713b      	strb	r3, [r7, #4]
  spi_config.master_mode = true;
 8000518:	2301      	movs	r3, #1
 800051a:	703b      	strb	r3, [r7, #0]
  spi_config.prescaler = SPI_PRESCALER_128; // 100kHz
 800051c:	2306      	movs	r3, #6
 800051e:	71fb      	strb	r3, [r7, #7]
  spi_config.software_nss_management = true;
 8000520:	2301      	movs	r3, #1
 8000522:	70bb      	strb	r3, [r7, #2]

  md_spi_init_basic(&hspi1, spi_config);
 8000524:	463b      	mov	r3, r7
 8000526:	e893 0006 	ldmia.w	r3, {r1, r2}
 800052a:	480f      	ldr	r0, [pc, #60]	; (8000568 <example_spi_transfer_tft+0x74>)
 800052c:	f000 fd7f 	bl	800102e <md_spi_init_basic>

  // init gpio for tft
  //  DC
  md_gpio_configure_output(GPIOB, GPIO_PIN_10, GPIO_SPEED_10MHZ,
 8000530:	2300      	movs	r3, #0
 8000532:	2201      	movs	r2, #1
 8000534:	210a      	movs	r1, #10
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <example_spi_transfer_tft+0x78>)
 8000538:	f000 f9b8 	bl	80008ac <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);
  // CS
  md_gpio_configure_output(GPIOB, GPIO_PIN_11, GPIO_SPEED_10MHZ,
 800053c:	2300      	movs	r3, #0
 800053e:	2201      	movs	r2, #1
 8000540:	210b      	movs	r1, #11
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <example_spi_transfer_tft+0x78>)
 8000544:	f000 f9b2 	bl	80008ac <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);
  // RESET
  md_gpio_configure_output(GPIOB, GPIO_PIN_1, GPIO_SPEED_10MHZ, GPIO_OUTPUT_PP);
 8000548:	2300      	movs	r3, #0
 800054a:	2201      	movs	r2, #1
 800054c:	2101      	movs	r1, #1
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <example_spi_transfer_tft+0x78>)
 8000550:	f000 f9ac 	bl	80008ac <md_gpio_configure_output>

  ILI9341_Init(&hspi1);
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <example_spi_transfer_tft+0x74>)
 8000556:	f7ff ff47 	bl	80003e8 <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_BLACK);
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ff1e 	bl	800039c <ILI9341_ClearDisplay>

  while (1)
    {
      example_heart_beat();
 8000560:	f7ff ffa8 	bl	80004b4 <example_heart_beat>
 8000564:	e7fc      	b.n	8000560 <example_spi_transfer_tft+0x6c>
 8000566:	bf00      	nop
 8000568:	2000003c 	.word	0x2000003c
 800056c:	40010c00 	.word	0x40010c00

08000570 <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <md_usart_tc_callback+0x48>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d107      	bne.n	8000592 <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <md_usart_tc_callback+0x4c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <md_usart_tc_callback+0x4c>)
 800058a:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <md_usart_tc_callback+0x50>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <md_usart_tc_callback+0x54>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d107      	bne.n	80005ac <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <md_usart_tc_callback+0x58>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <md_usart_tc_callback+0x58>)
 80005a4:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <md_usart_tc_callback+0x5c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
    }
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40013800 	.word	0x40013800
 80005bc:	20000030 	.word	0x20000030
 80005c0:	2000002d 	.word	0x2000002d
 80005c4:	40004400 	.word	0x40004400
 80005c8:	20000028 	.word	0x20000028
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0c      	blt.n	80005fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <__NVIC_ClearPendingIRQ+0x38>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	3360      	adds	r3, #96	; 0x60
 80005f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100

0800060c <md_can_msg_pending_fifo0_callback>:
/*
 * this callback is called when message is recieved and previous message was
 * already read
 * @return - void
 */
__weak void md_can_msg_pending_fifo0_callback(void) {}
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <md_can_msg_pending_fifo1_callback>:
/*
 * this callback is called when message is recieved and previous message was
 * already read
 * @return - void
 */
__weak void md_can_msg_pending_fifo1_callback(void) {}
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <can_main_rx0_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx0_callback(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if ((CAN1->RF0R & 0x03) && hcan1.msg_pending_fifo0 == 0)
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <can_main_rx0_callback+0x38>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	f003 0303 	and.w	r3, r3, #3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d011      	beq.n	8000658 <can_main_rx0_callback+0x34>
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <can_main_rx0_callback+0x3c>)
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	f083 0301 	eor.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00a      	beq.n	8000658 <can_main_rx0_callback+0x34>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE0);
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <can_main_rx0_callback+0x38>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <can_main_rx0_callback+0x38>)
 8000648:	f023 0302 	bic.w	r3, r3, #2
 800064c:	6153      	str	r3, [r2, #20]
      hcan1.msg_pending_fifo0 = 1;
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <can_main_rx0_callback+0x3c>)
 8000650:	2201      	movs	r2, #1
 8000652:	719a      	strb	r2, [r3, #6]
      md_can_msg_pending_fifo0_callback();
 8000654:	f7ff ffda 	bl	800060c <md_can_msg_pending_fifo0_callback>
    }
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40006400 	.word	0x40006400
 8000660:	20000034 	.word	0x20000034

08000664 <can_main_rx1_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx1_callback(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if ((CAN1->RF1R & 0x03) && hcan1.msg_pending_fifo1 == 0)
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <can_main_rx1_callback+0x38>)
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d011      	beq.n	8000698 <can_main_rx1_callback+0x34>
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <can_main_rx1_callback+0x3c>)
 8000676:	79db      	ldrb	r3, [r3, #7]
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00a      	beq.n	8000698 <can_main_rx1_callback+0x34>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE1);
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <can_main_rx1_callback+0x38>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <can_main_rx1_callback+0x38>)
 8000688:	f023 0310 	bic.w	r3, r3, #16
 800068c:	6153      	str	r3, [r2, #20]
      hcan1.msg_pending_fifo1 = 1;
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <can_main_rx1_callback+0x3c>)
 8000690:	2201      	movs	r2, #1
 8000692:	71da      	strb	r2, [r3, #7]
      md_can_msg_pending_fifo1_callback();
 8000694:	f7ff ffc0 	bl	8000618 <md_can_msg_pending_fifo1_callback>
    }
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40006400 	.word	0x40006400
 80006a0:	20000034 	.word	0x20000034

080006a4 <can_main_sce_callback>:

/*
 * this callback is called on error/status change
 * @return - void
 */
static void can_main_sce_callback(void) {}
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <USB_HP_CAN_TX_IRQHandler>:

// Vector table handlers for can

void USB_HP_CAN_TX_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  // clear only 1 request complete bit - so if 3 mailboxes become empty
  // there will be 3 interrupts
  if (CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_RQCP0))
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <USB_HP_CAN_TX_IRQHandler+0x64>)
 80006ba:	4013      	ands	r3, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d006      	beq.n	80006ce <USB_HP_CAN_TX_IRQHandler+0x1e>
    {
      CAN1->TSR |= CAN_TSR_RQCP0;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6093      	str	r3, [r2, #8]
 80006cc:	e018      	b.n	8000700 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME1 | CAN_TSR_RQCP1))
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <USB_HP_CAN_TX_IRQHandler+0x68>)
 80006d4:	4013      	ands	r3, r2
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <USB_HP_CAN_TX_IRQHandler+0x38>
    {
      CAN1->TSR |= CAN_TSR_RQCP1;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e4:	6093      	str	r3, [r2, #8]
 80006e6:	e00b      	b.n	8000700 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME2 | CAN_TSR_RQCP2))
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <USB_HP_CAN_TX_IRQHandler+0x6c>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d005      	beq.n	8000700 <USB_HP_CAN_TX_IRQHandler+0x50>
    {
      CAN1->TSR |= CAN_TSR_RQCP2;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <USB_HP_CAN_TX_IRQHandler+0x60>)
 80006fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fe:	6093      	str	r3, [r2, #8]
    }

  // clear nvic pending flag
  NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 8000700:	2013      	movs	r0, #19
 8000702:	f7ff ff65 	bl	80005d0 <__NVIC_ClearPendingIRQ>

  md_can_mailbox_empty_callback();
 8000706:	f7ff fecf 	bl	80004a8 <md_can_mailbox_empty_callback>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40006400 	.word	0x40006400
 8000714:	04000001 	.word	0x04000001
 8000718:	08000100 	.word	0x08000100
 800071c:	10010000 	.word	0x10010000

08000720 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 8000724:	2014      	movs	r0, #20
 8000726:	f7ff ff53 	bl	80005d0 <__NVIC_ClearPendingIRQ>
  can_main_rx0_callback();
 800072a:	f7ff ff7b 	bl	8000624 <can_main_rx0_callback>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8000736:	2015      	movs	r0, #21
 8000738:	f7ff ff4a 	bl	80005d0 <__NVIC_ClearPendingIRQ>
  can_main_rx1_callback();
 800073c:	f7ff ff92 	bl	8000664 <can_main_rx1_callback>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(CAN1_SCE_IRQn);
 8000748:	2016      	movs	r0, #22
 800074a:	f7ff ff41 	bl	80005d0 <__NVIC_ClearPendingIRQ>
  can_main_sce_callback();
 800074e:	f7ff ffa9 	bl	80006a4 <can_main_sce_callback>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <__NVIC_ClearPendingIRQ>:
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0c      	blt.n	8000784 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 021f 	and.w	r2, r3, #31
 8000770:	4907      	ldr	r1, [pc, #28]	; (8000790 <__NVIC_ClearPendingIRQ+0x38>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	095b      	lsrs	r3, r3, #5
 8000778:	2001      	movs	r0, #1
 800077a:	fa00 f202 	lsl.w	r2, r0, r2
 800077e:	3360      	adds	r3, #96	; 0x60
 8000780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e100 	.word	0xe000e100

08000794 <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a3f      	ldr	r2, [pc, #252]	; (800089c <md_gpio_init_clock+0x108>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d118      	bne.n	80007d6 <md_gpio_init_clock+0x42>
    {
      if (RCC->APB2ENR & RCC_APB2ENR_IOPAEN)
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d168      	bne.n	8000882 <md_gpio_init_clock+0xee>
        return;

      RCC_CLOCK_ENABLE_IOPA();
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a37      	ldr	r2, [pc, #220]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	4a34      	ldr	r2, [pc, #208]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007ce:	f023 0304 	bic.w	r3, r3, #4
 80007d2:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 80007d4:	e05b      	b.n	800088e <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOB)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <md_gpio_init_clock+0x110>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d118      	bne.n	8000810 <md_gpio_init_clock+0x7c>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPBEN)
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d14d      	bne.n	8000886 <md_gpio_init_clock+0xf2>
      RCC_CLOCK_ENABLE_IOPB();
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <md_gpio_init_clock+0x10c>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000808:	f023 0308 	bic.w	r3, r3, #8
 800080c:	60d3      	str	r3, [r2, #12]
  return;
 800080e:	e03e      	b.n	800088e <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOC)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <md_gpio_init_clock+0x114>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d118      	bne.n	800084a <md_gpio_init_clock+0xb6>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPCEN)
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	2b00      	cmp	r3, #0
 8000822:	d132      	bne.n	800088a <md_gpio_init_clock+0xf6>
      RCC_CLOCK_ENABLE_IOPC();
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000842:	f023 0310 	bic.w	r3, r3, #16
 8000846:	60d3      	str	r3, [r2, #12]
  return;
 8000848:	e021      	b.n	800088e <md_gpio_init_clock+0xfa>
  else if (p_GPIOx)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d01e      	beq.n	800088e <md_gpio_init_clock+0xfa>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPDEN)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	2b00      	cmp	r3, #0
 800085a:	d11a      	bne.n	8000892 <md_gpio_init_clock+0xfe>
      RCC_CLOCK_ENABLE_IOPD();
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <md_gpio_init_clock+0x10c>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <md_gpio_init_clock+0x10c>)
 800087a:	f023 0320 	bic.w	r3, r3, #32
 800087e:	60d3      	str	r3, [r2, #12]
  return;
 8000880:	e005      	b.n	800088e <md_gpio_init_clock+0xfa>
        return;
 8000882:	bf00      	nop
 8000884:	e006      	b.n	8000894 <md_gpio_init_clock+0x100>
        return;
 8000886:	bf00      	nop
 8000888:	e004      	b.n	8000894 <md_gpio_init_clock+0x100>
        return;
 800088a:	bf00      	nop
 800088c:	e002      	b.n	8000894 <md_gpio_init_clock+0x100>
  return;
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <md_gpio_init_clock+0x100>
        return;
 8000892:	bf00      	nop
}
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40010800 	.word	0x40010800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	40011000 	.word	0x40011000

080008ac <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	4608      	mov	r0, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	4603      	mov	r3, r0
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	460b      	mov	r3, r1
 80008c0:	70bb      	strb	r3, [r7, #2]
 80008c2:	4613      	mov	r3, r2
 80008c4:	707b      	strb	r3, [r7, #1]
  md_gpio_init_clock(p_GPIOx);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff64 	bl	8000794 <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d820      	bhi.n	8000914 <md_gpio_configure_output+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	78fa      	ldrb	r2, [r7, #3]
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	210f      	movs	r1, #15
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	401a      	ands	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	78b9      	ldrb	r1, [r7, #2]
 80008ee:	78fa      	ldrb	r2, [r7, #3]
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	fa01 f202 	lsl.w	r2, r1, r2
 80008f6:	431a      	orrs	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	7879      	ldrb	r1, [r7, #1]
 8000902:	78fa      	ldrb	r2, [r7, #3]
 8000904:	0092      	lsls	r2, r2, #2
 8000906:	3202      	adds	r2, #2
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	431a      	orrs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 8000912:	e023      	b.n	800095c <md_gpio_configure_output+0xb0>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	78fa      	ldrb	r2, [r7, #3]
 800091a:	3a08      	subs	r2, #8
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	210f      	movs	r1, #15
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	43d2      	mvns	r2, r2
 8000926:	401a      	ands	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	78b9      	ldrb	r1, [r7, #2]
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	3a08      	subs	r2, #8
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	431a      	orrs	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	7879      	ldrb	r1, [r7, #1]
 8000948:	78fa      	ldrb	r2, [r7, #3]
 800094a:	3a08      	subs	r2, #8
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	3202      	adds	r2, #2
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
  return;
 800095a:	bf00      	nop
}
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <md_gpio_configure_input>:
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	70fb      	strb	r3, [r7, #3]
 800096e:	4613      	mov	r3, r2
 8000970:	70bb      	strb	r3, [r7, #2]
  md_gpio_init_clock(p_GPIOx);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff0e 	bl	8000794 <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b07      	cmp	r3, #7
 800097c:	d825      	bhi.n	80009ca <md_gpio_configure_input+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	78fa      	ldrb	r2, [r7, #3]
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	210f      	movs	r1, #15
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	43d2      	mvns	r2, r2
 800098e:	401a      	ands	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000994:	78bb      	ldrb	r3, [r7, #2]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d90b      	bls.n	80009b2 <md_gpio_configure_input+0x50>
        {
          p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	3202      	adds	r2, #2
 80009a4:	2102      	movs	r1, #2
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	e033      	b.n	8000a1a <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	78b9      	ldrb	r1, [r7, #2]
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	3202      	adds	r2, #2
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e027      	b.n	8000a1a <md_gpio_configure_input+0xb8>
        }
    }
  else
    {
      // clear config and mode bits
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	78fa      	ldrb	r2, [r7, #3]
 80009d0:	3a08      	subs	r2, #8
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	210f      	movs	r1, #15
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	43d2      	mvns	r2, r2
 80009dc:	401a      	ands	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	605a      	str	r2, [r3, #4]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 80009e2:	78bb      	ldrb	r3, [r7, #2]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d90c      	bls.n	8000a02 <md_gpio_configure_input+0xa0>
        {
          p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	78fa      	ldrb	r2, [r7, #3]
 80009ee:	3a08      	subs	r2, #8
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	3202      	adds	r2, #2
 80009f4:	2102      	movs	r1, #2
 80009f6:	fa01 f202 	lsl.w	r2, r1, r2
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	e00b      	b.n	8000a1a <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	78b9      	ldrb	r1, [r7, #2]
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	3a08      	subs	r2, #8
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	3202      	adds	r2, #2
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	431a      	orrs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	605a      	str	r2, [r3, #4]
        }
    }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP)
 8000a1a:	78bb      	ldrb	r3, [r7, #2]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d107      	bne.n	8000a30 <md_gpio_configure_input+0xce>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2201      	movs	r2, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	611a      	str	r2, [r3, #16]
  else
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000a2e:	e007      	b.n	8000a40 <md_gpio_configure_input+0xde>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2201      	movs	r2, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	615a      	str	r2, [r3, #20]
  return;
 8000a3e:	bf00      	nop
}
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	70fb      	strb	r3, [r7, #3]
 8000a52:	4613      	mov	r3, r2
 8000a54:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8000a56:	78bb      	ldrb	r3, [r7, #2]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d107      	bne.n	8000a6c <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000a6a:	e00a      	b.n	8000a82 <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8000a6c:	78bb      	ldrb	r3, [r7, #2]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d107      	bne.n	8000a82 <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	2201      	movs	r2, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	615a      	str	r2, [r3, #20]
  return;
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
}
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <md_gpio_exti4_callback>:
/*
 * callback for exti 4 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti4_callback(void) {}
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <md_gpio_exti3_callback>:
/*
 * callback for exti 3 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti3_callback(void) {}
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <md_gpio_exti2_callback>:
/*
 * callback for exti 2 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti2_callback(void) {}
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <md_gpio_exti1_callback>:
/*
 * callback for exti 1 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti1_callback(void) {}
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <md_gpio_exti0_callback>:
/*
 * callback for exti 0 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti0_callback(void) {}
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <gpio_exti15_10_get_pin>:
/*
 * find first exti pending number from registers 15-10/9-5
 * @return - pin number;
 */
static uint8_t gpio_exti15_10_get_pin(IRQn_Type exti_irq)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  uint32_t temp = EXTI->PR;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <gpio_exti15_10_get_pin+0x90>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	60fb      	str	r3, [r7, #12]

  if (exti_irq == EXTI9_5_IRQn)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b17      	cmp	r3, #23
 8000ade:	d118      	bne.n	8000b12 <gpio_exti15_10_get_pin+0x4a>
    {
      temp >>= 5;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]
 8000aea:	e00e      	b.n	8000b0a <gpio_exti15_10_get_pin+0x42>
        {
          if (temp & 0x01)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <gpio_exti15_10_get_pin+0x36>
            return (i + 5);
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	3305      	adds	r3, #5
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	e026      	b.n	8000b4c <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8000b04:	7afb      	ldrb	r3, [r7, #11]
 8000b06:	3301      	adds	r3, #1
 8000b08:	72fb      	strb	r3, [r7, #11]
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d9ed      	bls.n	8000aec <gpio_exti15_10_get_pin+0x24>
 8000b10:	e01b      	b.n	8000b4a <gpio_exti15_10_get_pin+0x82>
        }
    }
  else if (exti_irq == EXTI15_10_IRQn)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b28      	cmp	r3, #40	; 0x28
 8000b18:	d117      	bne.n	8000b4a <gpio_exti15_10_get_pin+0x82>
    {
      temp >>= 10;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	0a9b      	lsrs	r3, r3, #10
 8000b1e:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	72bb      	strb	r3, [r7, #10]
 8000b24:	e00e      	b.n	8000b44 <gpio_exti15_10_get_pin+0x7c>
        {
          if (temp & 0x01)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <gpio_exti15_10_get_pin+0x70>
            return (i + 10);
 8000b30:	7abb      	ldrb	r3, [r7, #10]
 8000b32:	330a      	adds	r3, #10
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	e009      	b.n	8000b4c <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	3301      	adds	r3, #1
 8000b42:	72bb      	strb	r3, [r7, #10]
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	2b05      	cmp	r3, #5
 8000b48:	d9ed      	bls.n	8000b26 <gpio_exti15_10_get_pin+0x5e>
        }
    }

  return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40010400 	.word	0x40010400

08000b5c <EXTI15_10_IRQHandler>:

// Vector table handlers for exti

void EXTI15_10_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI15_10_IRQn);
 8000b62:	2028      	movs	r0, #40	; 0x28
 8000b64:	f7ff ffb0 	bl	8000ac8 <gpio_exti15_10_get_pin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <EXTI15_10_IRQHandler+0x3c>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <EXTI15_10_IRQHandler+0x3c>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000b80:	2028      	movs	r0, #40	; 0x28
 8000b82:	f7ff fde9 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fc7d 	bl	8000488 <md_gpio_exti15_10_callback>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010400 	.word	0x40010400

08000b9c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI9_5_IRQn);
 8000ba2:	2017      	movs	r0, #23
 8000ba4:	f7ff ff90 	bl	8000ac8 <gpio_exti15_10_get_pin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <EXTI9_5_IRQHandler+0x3c>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <EXTI9_5_IRQHandler+0x3c>)
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000bc0:	2017      	movs	r0, #23
 8000bc2:	f7ff fdc9 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc5d 	bl	8000488 <md_gpio_exti15_10_callback>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010400 	.word	0x40010400

08000bdc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 4);
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <EXTI4_IRQHandler+0x20>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <EXTI4_IRQHandler+0x20>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f7ff fdb3 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti4_callback();
 8000bf2:	f7ff ff4b 	bl	8000a8c <md_gpio_exti4_callback>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010400 	.word	0x40010400

08000c00 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 3);
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <EXTI3_IRQHandler+0x20>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <EXTI3_IRQHandler+0x20>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000c10:	2009      	movs	r0, #9
 8000c12:	f7ff fda1 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti3_callback();
 8000c16:	f7ff ff3f 	bl	8000a98 <md_gpio_exti3_callback>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010400 	.word	0x40010400

08000c24 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 2);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <EXTI2_IRQHandler+0x20>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <EXTI2_IRQHandler+0x20>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000c34:	2008      	movs	r0, #8
 8000c36:	f7ff fd8f 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti2_callback();
 8000c3a:	f7ff ff33 	bl	8000aa4 <md_gpio_exti2_callback>
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010400 	.word	0x40010400

08000c48 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 1);
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <EXTI1_IRQHandler+0x20>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <EXTI1_IRQHandler+0x20>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8000c58:	2007      	movs	r0, #7
 8000c5a:	f7ff fd7d 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti1_callback();
 8000c5e:	f7ff ff27 	bl	8000ab0 <md_gpio_exti1_callback>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010400 	.word	0x40010400

08000c6c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 0);
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <EXTI0_IRQHandler+0x20>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <EXTI0_IRQHandler+0x20>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8000c7c:	2006      	movs	r0, #6
 8000c7e:	f7ff fd6b 	bl	8000758 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti0_callback();
 8000c82:	f7ff ff1b 	bl	8000abc <md_gpio_exti0_callback>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010400 	.word	0x40010400

08000c90 <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <md_rcc_get_sysclk+0x34>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d00a      	beq.n	8000cb6 <md_rcc_get_sysclk+0x26>
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d80c      	bhi.n	8000cbe <md_rcc_get_sysclk+0x2e>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <md_rcc_get_sysclk+0x1e>
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d002      	beq.n	8000cb2 <md_rcc_get_sysclk+0x22>
 8000cac:	e007      	b.n	8000cbe <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <md_rcc_get_sysclk+0x38>)
 8000cb0:	e006      	b.n	8000cc0 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <md_rcc_get_sysclk+0x38>)
 8000cb4:	e004      	b.n	8000cc0 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 8000cb6:	f000 f947 	bl	8000f48 <rcc_calculate_pll_sysclk>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	e000      	b.n	8000cc0 <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	007a1200 	.word	0x007a1200

08000ccc <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 8000cd2:	f7ff ffdd 	bl	8000c90 <md_rcc_get_sysclk>
 8000cd6:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 8000cd8:	f000 f856 	bl	8000d88 <rcc_get_ahb_prescaler>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 8000cfa:	f7ff ffe7 	bl	8000ccc <md_rcc_get_hclk>
 8000cfe:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f896 	bl	8000e34 <rcc_get_apb_prescaler>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff ffe4 	bl	8000cf0 <md_rcc_get_pclk>
 8000d28:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 8000d2a:	f000 f94b 	bl	8000fc4 <rcc_get_adc_prescaler>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 8000d4a:	f7ff ffa1 	bl	8000c90 <md_rcc_get_sysclk>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8000d54:	f7ff ffba 	bl	8000ccc <md_rcc_get_hclk>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ffc6 	bl	8000cf0 <md_rcc_get_pclk>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff ffc0 	bl	8000cf0 <md_rcc_get_pclk>
 8000d70:	4602      	mov	r2, r0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 8000d76:	f7ff ffd1 	bl	8000d1c <md_rcc_get_adcclk>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	611a      	str	r2, [r3, #16]

  return;
 8000d80:	bf00      	nop
}
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <rcc_get_ahb_prescaler+0xa8>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d83f      	bhi.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <rcc_get_ahb_prescaler+0x20>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000de9 	.word	0x08000de9
 8000dac:	08000e23 	.word	0x08000e23
 8000db0:	08000e23 	.word	0x08000e23
 8000db4:	08000e23 	.word	0x08000e23
 8000db8:	08000e23 	.word	0x08000e23
 8000dbc:	08000e23 	.word	0x08000e23
 8000dc0:	08000e23 	.word	0x08000e23
 8000dc4:	08000e23 	.word	0x08000e23
 8000dc8:	08000def 	.word	0x08000def
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	08000dfb 	.word	0x08000dfb
 8000dd4:	08000e01 	.word	0x08000e01
 8000dd8:	08000e07 	.word	0x08000e07
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000e13 	.word	0x08000e13
 8000de4:	08000e1b 	.word	0x08000e1b
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
      break;
 8000dec:	e019      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	607b      	str	r3, [r7, #4]
      break;
 8000df2:	e016      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 8000df4:	2304      	movs	r3, #4
 8000df6:	607b      	str	r3, [r7, #4]
      break;
 8000df8:	e013      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	607b      	str	r3, [r7, #4]
      break;
 8000dfe:	e010      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 8000e00:	2310      	movs	r3, #16
 8000e02:	607b      	str	r3, [r7, #4]
      break;
 8000e04:	e00d      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 8000e06:	2340      	movs	r3, #64	; 0x40
 8000e08:	607b      	str	r3, [r7, #4]
      break;
 8000e0a:	e00a      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	607b      	str	r3, [r7, #4]
      break;
 8000e10:	e007      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 8000e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e16:	607b      	str	r3, [r7, #4]
      break;
 8000e18:	e003      	b.n	8000e22 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 8000e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1e:	607b      	str	r3, [r7, #4]
      break;
 8000e20:	bf00      	nop
  }

  return ahb_prescaler;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	b29b      	uxth	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d002      	beq.n	8000e4a <rcc_get_apb_prescaler+0x16>
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d008      	beq.n	8000e5a <rcc_get_apb_prescaler+0x26>
 8000e48:	e00f      	b.n	8000e6a <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <rcc_get_apb_prescaler+0x90>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	72fb      	strb	r3, [r7, #11]
      break;
 8000e58:	e007      	b.n	8000e6a <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <rcc_get_apb_prescaler+0x90>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	0adb      	lsrs	r3, r3, #11
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	72fb      	strb	r3, [r7, #11]
      break;
 8000e68:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 8000e6a:	7afb      	ldrb	r3, [r7, #11]
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d822      	bhi.n	8000eb6 <rcc_get_apb_prescaler+0x82>
 8000e70:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <rcc_get_apb_prescaler+0x44>)
 8000e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e76:	bf00      	nop
 8000e78:	08000e99 	.word	0x08000e99
 8000e7c:	08000eb7 	.word	0x08000eb7
 8000e80:	08000eb7 	.word	0x08000eb7
 8000e84:	08000eb7 	.word	0x08000eb7
 8000e88:	08000e9f 	.word	0x08000e9f
 8000e8c:	08000ea5 	.word	0x08000ea5
 8000e90:	08000eab 	.word	0x08000eab
 8000e94:	08000eb1 	.word	0x08000eb1
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
      break;
 8000e9c:	e00b      	b.n	8000eb6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
      break;
 8000ea2:	e008      	b.n	8000eb6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
      break;
 8000ea8:	e005      	b.n	8000eb6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	60fb      	str	r3, [r7, #12]
      break;
 8000eae:	e002      	b.n	8000eb6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	60fb      	str	r3, [r7, #12]
      break;
 8000eb4:	bf00      	nop
  }

  return apb_prescaler;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	b29b      	uxth	r3, r3
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <rcc_get_pll_multiplier+0x7c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	2b0b      	cmp	r3, #11
 8000ee2:	d829      	bhi.n	8000f38 <rcc_get_pll_multiplier+0x70>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <rcc_get_pll_multiplier+0x24>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f1d 	.word	0x08000f1d
 8000ef0:	08000f21 	.word	0x08000f21
 8000ef4:	08000f25 	.word	0x08000f25
 8000ef8:	08000f29 	.word	0x08000f29
 8000efc:	08000f2d 	.word	0x08000f2d
 8000f00:	08000f31 	.word	0x08000f31
 8000f04:	08000f39 	.word	0x08000f39
 8000f08:	08000f39 	.word	0x08000f39
 8000f0c:	08000f39 	.word	0x08000f39
 8000f10:	08000f39 	.word	0x08000f39
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f35 	.word	0x08000f35
    case (RCC_PLL1_MUL_X4):
      return 4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e00c      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 8000f20:	2305      	movs	r3, #5
 8000f22:	e00a      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8000f24:	2306      	movs	r3, #6
 8000f26:	e008      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	e006      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	e004      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 8000f30:	2309      	movs	r3, #9
 8000f32:	e002      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8000f34:	230d      	movs	r3, #13
 8000f36:	e000      	b.n	8000f3a <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000

08000f48 <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 8000f4e:	f7ff ffbb 	bl	8000ec8 <rcc_get_pll_multiplier>
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <rcc_calculate_pll_sysclk+0x70>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <rcc_calculate_pll_sysclk+0x70>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <rcc_calculate_pll_sysclk+0x3a>
 8000f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7e:	d006      	beq.n	8000f8e <rcc_calculate_pll_sysclk+0x46>
 8000f80:	e00e      	b.n	8000fa0 <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <rcc_calculate_pll_sysclk+0x74>)
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	60bb      	str	r3, [r7, #8]
      break;
 8000f8c:	e008      	b.n	8000fa0 <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <rcc_calculate_pll_sysclk+0x78>)
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	60bb      	str	r3, [r7, #8]
      break;
 8000f9e:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b0d      	cmp	r3, #13
 8000fa4:	d102      	bne.n	8000fac <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	085b      	lsrs	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 8000fac:	68bb      	ldr	r3, [r7, #8]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	003d0900 	.word	0x003d0900
 8000fc0:	007a1200 	.word	0x007a1200

08000fc4 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <rcc_get_adc_prescaler+0x4c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	0b9b      	lsrs	r3, r3, #14
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d812      	bhi.n	8001004 <rcc_get_adc_prescaler+0x40>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <rcc_get_adc_prescaler+0x20>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	08000ff9 	.word	0x08000ff9
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	08001001 	.word	0x08001001
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e006      	b.n	8001006 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e004      	b.n	8001006 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	e002      	b.n	8001006 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 8001000:	2308      	movs	r3, #8
 8001002:	e000      	b.n	8001006 <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 8001004:	2300      	movs	r3, #0

}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000

08001014 <md_spi_init>:
 * Init handlers gpio and clock
 * @param[*p_hSPIx] - can struct handler @spi_handler
 * @return - void
 */
void md_spi_init(spi_handle_t *p_hSPIx)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  spi_init_handlers();
 800101c:	f000 f91a 	bl	8001254 <spi_init_handlers>
  spi_init_clock(p_hSPIx);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f933 	bl	800128c <spi_init_clock>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <md_spi_init_basic>:
 * @param[spi_config] - basic configuration to work as master/slave full duplex
 * mode
 * @return - void
 */
void md_spi_init_basic(spi_handle_t *p_hSPIx, spi_config_t spi_config)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	e883 0006 	stmia.w	r3, {r1, r2}
  // init pins
  spi_init_gpio(p_hSPIx, spi_config);
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f946 	bl	80012d4 <spi_init_gpio>

  // clock phase
  if (spi_config.clock_second_edge_capture == true)
 8001048:	7abb      	ldrb	r3, [r7, #10]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d008      	beq.n	8001060 <md_spi_init_basic+0x32>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPHA);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0201 	orr.w	r2, r2, #1
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e007      	b.n	8001070 <md_spi_init_basic+0x42>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPHA);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]
    }

  // clock polarity
  if (spi_config.clock_1_when_idle == true)
 8001070:	7a7b      	ldrb	r3, [r7, #9]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d008      	beq.n	8001088 <md_spi_init_basic+0x5a>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPOL);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0202 	orr.w	r2, r2, #2
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e007      	b.n	8001098 <md_spi_init_basic+0x6a>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPOL);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0202 	bic.w	r2, r2, #2
 8001096:	601a      	str	r2, [r3, #0]
    }

  // data format
  if (spi_config.data_format_16bit == true)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <md_spi_init_basic+0x82>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_DFF);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e007      	b.n	80010c0 <md_spi_init_basic+0x92>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_DFF);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010be:	601a      	str	r2, [r3, #0]
    }

  // full duplex
  if (spi_config.full_duplex == true)
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00f      	beq.n	80010e6 <md_spi_init_basic+0xb8>
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_RXONLY);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_BIDIMODE);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e4:	601a      	str	r2, [r3, #0]
    {
      //!!! ADD SIMPELX !!!
    }

  // lsb/msb first
  if (spi_config.lsb_first == true)
 80010e6:	7a3b      	ldrb	r3, [r7, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <md_spi_init_basic+0xd0>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_LSBFIRST);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e007      	b.n	800110e <md_spi_init_basic+0xe0>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_LSBFIRST);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800110c:	601a      	str	r2, [r3, #0]
    }

  // nss manangement
  if (spi_config.software_nss_management)
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d010      	beq.n	8001136 <md_spi_init_basic+0x108>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001122:	601a      	str	r2, [r3, #0]
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSI);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e007      	b.n	8001146 <md_spi_init_basic+0x118>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001144:	601a      	str	r2, [r3, #0]
    }

  // master mode
  if (spi_config.master_mode == true)
 8001146:	793b      	ldrb	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <md_spi_init_basic+0x130>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_MSTR);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0204 	orr.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e007      	b.n	800116e <md_spi_init_basic+0x140>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_MSTR);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0204 	bic.w	r2, r2, #4
 800116c:	601a      	str	r2, [r3, #0]
    }

  // prescaler
  p_hSPIx->p_SPIx->CR1 &= ~(SPI_CR1_BR_Msk);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800117c:	601a      	str	r2, [r3, #0]
  p_hSPIx->p_SPIx->CR1 |= (spi_config.prescaler << SPI_CR1_BR_Pos);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	7afb      	ldrb	r3, [r7, #11]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4619      	mov	r1, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011a0:	601a      	str	r2, [r3, #0]

  return;
 80011a2:	bf00      	nop
}
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <md_spi_tx_polling>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - void
 */
spi_error_t md_spi_tx_polling(spi_handle_t *p_hSPIx, uint8_t *p_data_buffer,
                              uint16_t data_lenght, uint32_t timeout_ms)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]
  uint32_t time_tick;
  uint16_t data_counter = data_lenght;
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	82fb      	strh	r3, [r7, #22]

  // enable SPI
  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011cc:	601a      	str	r2, [r3, #0]

  // check if other transfer is not ongoing
  if (p_hSPIx->spi_tx_status != SPI_TX_IDLE)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	7b5b      	ldrb	r3, [r3, #13]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <md_spi_tx_polling+0x36>
    {
      p_hSPIx->spi_error = SPI_ERR_TX_COLLISION;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	731a      	strb	r2, [r3, #12]
      return SPI_ERR_TX_COLLISION;
 80011dc:	2301      	movs	r3, #1
 80011de:	e035      	b.n	800124c <md_spi_tx_polling+0xa2>
    }

  // change status of tx line
  p_hSPIx->spi_tx_status = SPI_TX_POLLING;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	735a      	strb	r2, [r3, #13]

  while (data_counter > 0)
 80011e6:	e027      	b.n	8001238 <md_spi_tx_polling+0x8e>
    {
      // waint until transmit buffer is empty
      time_tick = md_systick_get_tick();
 80011e8:	f000 f926 	bl	8001438 <md_systick_get_tick>
 80011ec:	6138      	str	r0, [r7, #16]
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 80011ee:	e00f      	b.n	8001210 <md_spi_tx_polling+0x66>
        {
          if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80011f0:	f000 f922 	bl	8001438 <md_systick_get_tick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <md_spi_tx_polling+0x66>
            {
              p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2202      	movs	r2, #2
 8001204:	731a      	strb	r2, [r3, #12]
              p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	735a      	strb	r2, [r3, #13]
              return SPI_ERR_TIMEOUT_TXE;
 800120c:	2302      	movs	r3, #2
 800120e:	e01d      	b.n	800124c <md_spi_tx_polling+0xa2>
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0e8      	beq.n	80011f0 <md_spi_tx_polling+0x46>
            }
        }

      // put data in data register
      p_hSPIx->p_SPIx->DR = p_data_buffer[data_lenght - data_counter];
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	8afb      	ldrh	r3, [r7, #22]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60da      	str	r2, [r3, #12]
      data_counter--;
 8001232:	8afb      	ldrh	r3, [r7, #22]
 8001234:	3b01      	subs	r3, #1
 8001236:	82fb      	strh	r3, [r7, #22]
  while (data_counter > 0)
 8001238:	8afb      	ldrh	r3, [r7, #22]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1d4      	bne.n	80011e8 <md_spi_tx_polling+0x3e>
    }

  p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2202      	movs	r2, #2
 8001242:	731a      	strb	r2, [r3, #12]
  p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	735a      	strb	r2, [r3, #13]
  return SPI_ERR_NOERR;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <spi_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
static void spi_init_handlers(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
#if MD_USING_SPI1
  hspi1.p_SPIx = SPI1;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <spi_init_handlers+0x30>)
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <spi_init_handlers+0x34>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi1.p_tx_buffer = NULL;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <spi_init_handlers+0x30>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.tx_buffer_count = 0;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <spi_init_handlers+0x30>)
 8001266:	2200      	movs	r2, #0
 8001268:	80da      	strh	r2, [r3, #6]
  hspi1.spi_error = SPI_ERR_NOERR;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <spi_init_handlers+0x30>)
 800126c:	2200      	movs	r2, #0
 800126e:	731a      	strb	r2, [r3, #12]
  hspi1.spi_rx_status = SPI_RX_IDLE;
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <spi_init_handlers+0x30>)
 8001272:	2200      	movs	r2, #0
 8001274:	739a      	strb	r2, [r3, #14]
  hspi1.spi_tx_status = SPI_TX_IDLE;
 8001276:	4b03      	ldr	r3, [pc, #12]	; (8001284 <spi_init_handlers+0x30>)
 8001278:	2200      	movs	r2, #0
 800127a:	735a      	strb	r2, [r3, #13]
#endif // MD_USING_USART1
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	2000003c 	.word	0x2000003c
 8001288:	40013000 	.word	0x40013000

0800128c <spi_init_clock>:
 * Starts clock for SPI and resets the peripheral
 * @param[*p_hSPIx] - spix base address
 * @return - void
 */
static void spi_init_clock(spi_handle_t *p_hSPIx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (RCC->APB2ENR & RCC_APB2ENR_SPI1EN)
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <spi_init_clock+0x44>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d112      	bne.n	80012c6 <spi_init_clock+0x3a>
    return;

  RCC_CLOCK_ENABLE_SPI1();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <spi_init_clock+0x44>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <spi_init_clock+0x44>)
 80012a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012aa:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <spi_init_clock+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <spi_init_clock+0x44>)
 80012b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <spi_init_clock+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <spi_init_clock+0x44>)
 80012be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012c2:	60d3      	str	r3, [r2, #12]

  return;
 80012c4:	e000      	b.n	80012c8 <spi_init_clock+0x3c>
    return;
 80012c6:	bf00      	nop
}
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000

080012d4 <spi_init_gpio>:
 * Init gpio pins for spi - make sure that GPIO clock is enabled before
 * @param[*pUSARTx] - spix base address
 * @return - void
 */
static void spi_init_gpio(spi_handle_t *p_hSPIx, spi_config_t spi_config)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	e883 0006 	stmia.w	r3, {r1, r2}
  // master mode
  if (spi_config.master_mode == true)
 80012e2:	793b      	ldrb	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <spi_init_gpio+0x56>
    {
      // SCK - PA5
      md_gpio_configure_output(GPIOA, GPIO_PIN_5, GPIO_SPEED_10MHZ,
 80012e8:	2302      	movs	r3, #2
 80012ea:	2201      	movs	r2, #1
 80012ec:	2105      	movs	r1, #5
 80012ee:	4820      	ldr	r0, [pc, #128]	; (8001370 <spi_init_gpio+0x9c>)
 80012f0:	f7ff fadc 	bl	80008ac <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (spi_config.full_duplex == true)
 80012f4:	797b      	ldrb	r3, [r7, #5]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <spi_init_gpio+0x30>
        {
          // MISO - PA6 // REMAP PB4
          md_gpio_configure_input(GPIOA, GPIO_PIN_6, GPIO_INPUT_PULLUP);
 80012fa:	2202      	movs	r2, #2
 80012fc:	2106      	movs	r1, #6
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <spi_init_gpio+0x9c>)
 8001300:	f7ff fb2f 	bl	8000962 <md_gpio_configure_input>
        }

      // MOSI PA7 // REMAP PB5
      md_gpio_configure_output(GPIOA, GPIO_PIN_7, GPIO_SPEED_10MHZ,
 8001304:	2302      	movs	r3, #2
 8001306:	2201      	movs	r2, #1
 8001308:	2107      	movs	r1, #7
 800130a:	4819      	ldr	r0, [pc, #100]	; (8001370 <spi_init_gpio+0x9c>)
 800130c:	f7ff face 	bl	80008ac <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (spi_config.software_nss_management == false)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d024      	beq.n	8001366 <spi_init_gpio+0x92>
        {
          // NSS - PA4
          md_gpio_configure_output(GPIOA, GPIO_PIN_4, GPIO_SPEED_50MHZ,
 800131c:	2302      	movs	r3, #2
 800131e:	2203      	movs	r2, #3
 8001320:	2104      	movs	r1, #4
 8001322:	4813      	ldr	r0, [pc, #76]	; (8001370 <spi_init_gpio+0x9c>)
 8001324:	f7ff fac2 	bl	80008ac <md_gpio_configure_output>
        {
          // NSS - PA4
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
        }
    }
}
 8001328:	e01d      	b.n	8001366 <spi_init_gpio+0x92>
      md_gpio_configure_input(GPIOA, GPIO_PIN_5, GPIO_INPUT_FLOATING);
 800132a:	2201      	movs	r2, #1
 800132c:	2105      	movs	r1, #5
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <spi_init_gpio+0x9c>)
 8001330:	f7ff fb17 	bl	8000962 <md_gpio_configure_input>
      if (spi_config.full_duplex == true)
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <spi_init_gpio+0x70>
          md_gpio_configure_input(GPIOA, GPIO_PIN_7, GPIO_INPUT_PULLUP);
 800133a:	2202      	movs	r2, #2
 800133c:	2107      	movs	r1, #7
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <spi_init_gpio+0x9c>)
 8001340:	f7ff fb0f 	bl	8000962 <md_gpio_configure_input>
      md_gpio_configure_output(GPIOA, GPIO_PIN_6, GPIO_SPEED_10MHZ,
 8001344:	2302      	movs	r3, #2
 8001346:	2201      	movs	r2, #1
 8001348:	2106      	movs	r1, #6
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <spi_init_gpio+0x9c>)
 800134c:	f7ff faae 	bl	80008ac <md_gpio_configure_output>
      if (spi_config.software_nss_management == false)
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <spi_init_gpio+0x92>
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
 800135c:	2202      	movs	r2, #2
 800135e:	2104      	movs	r1, #4
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <spi_init_gpio+0x9c>)
 8001362:	f7ff fafe 	bl	8000962 <md_gpio_configure_input>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010800 	.word	0x40010800

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ffc2 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fc94 	bl	8000d42 <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <md_systick_configure_ms+0x28>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ffcf 	bl	80013c8 <SysTick_Config>

  return;
 800142a:	bf00      	nop
}
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <md_systick_get_tick+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000001c 	.word	0x2000001c

0800144c <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 8001454:	f7ff fff0 	bl	8001438 <md_systick_get_tick>
 8001458:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 800145a:	bf00      	nop
 800145c:	f7ff ffec 	bl	8001438 <md_systick_get_tick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <md_systick_delay+0x10>
    ;
  return;
 800146c:	bf00      	nop
}
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Handler+0x18>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a03      	ldr	r2, [pc, #12]	; (800148c <SysTick_Handler+0x18>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000001c 	.word	0x2000001c

08001490 <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	88da      	ldrh	r2, [r3, #6]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	889b      	ldrh	r3, [r3, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d20f      	bcs.n	80014d6 <usart_txe_callback+0x34>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	88d2      	ldrh	r2, [r2, #6]
 80014be:	4413      	add	r3, r2
 80014c0:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	88db      	ldrh	r3, [r3, #6]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	80da      	strh	r2, [r3, #6]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 80014d4:	e00b      	b.n	80014ee <usart_txe_callback+0x4c>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	735a      	strb	r2, [r3, #13]
  return;
 80014ec:	bf00      	nop
}
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7b5b      	ldrb	r3, [r3, #13]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d105      	bne.n	8001520 <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffbb 	bl	8001490 <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffc1 	bl	80014a2 <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d019      	beq.n	8001562 <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	88da      	ldrh	r2, [r3, #6]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	889b      	ldrh	r3, [r3, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d10a      	bne.n	8001550 <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff f818 	bl	8000570 <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800154e:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800155e:	60da      	str	r2, [r3, #12]
    }

  return;
 8001560:	bf00      	nop
 8001562:	bf00      	nop
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <USART1_IRQHandler+0x10>)
 8001572:	f7ff ffc0 	bl	80014f6 <usart_main_callback>
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000005c 	.word	0x2000005c

08001580 <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f7ff ffb6 	bl	80014f6 <usart_main_callback>
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000004c 	.word	0x2000004c

08001594 <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* CAN EXAMPLES */
  //	example_can_init();

  /* SPI EXAMPLES */
  //  example_spi_transfer_message();
  example_spi_transfer_tft();
 8001598:	f7fe ffac 	bl	80004f4 <example_spi_transfer_tft>

  for (;;)
 800159c:	e7fe      	b.n	800159c <main+0x8>

0800159e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
	...

080015ac <Reset_Handler>:
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopForever+0x2>)
 80015ae:	4685      	mov	sp, r0
 80015b0:	f7ff fff5 	bl	800159e <SystemInit>
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopForever+0x6>)
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopForever+0xa>)
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopForever+0xe>)
 80015ba:	2300      	movs	r3, #0
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:
 80015be:	58d4      	ldr	r4, [r2, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:
 80015c4:	18c4      	adds	r4, r0, r3
 80015c6:	428c      	cmp	r4, r1
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopForever+0x12>)
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopForever+0x16>)
 80015ce:	2300      	movs	r3, #0
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:
 80015d6:	42a2      	cmp	r2, r4
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>
 80015da:	f000 f811 	bl	8001600 <__libc_init_array>
 80015de:	f7ff ffd9 	bl	8001594 <main>

080015e2 <LoopForever>:
 80015e2:	e7fe      	b.n	80015e2 <LoopForever>
 80015e4:	20002800 	.word	0x20002800
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	080016d8 	.word	0x080016d8
 80015f4:	20000000 	.word	0x20000000
 80015f8:	2000006c 	.word	0x2000006c

080015fc <ADC1_2_IRQHandler>:
 80015fc:	e7fe      	b.n	80015fc <ADC1_2_IRQHandler>
	...

08001600 <__libc_init_array>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	2600      	movs	r6, #0
 8001604:	4d0c      	ldr	r5, [pc, #48]	; (8001638 <__libc_init_array+0x38>)
 8001606:	4c0d      	ldr	r4, [pc, #52]	; (800163c <__libc_init_array+0x3c>)
 8001608:	1b64      	subs	r4, r4, r5
 800160a:	10a4      	asrs	r4, r4, #2
 800160c:	42a6      	cmp	r6, r4
 800160e:	d109      	bne.n	8001624 <__libc_init_array+0x24>
 8001610:	f000 f81a 	bl	8001648 <_init>
 8001614:	2600      	movs	r6, #0
 8001616:	4d0a      	ldr	r5, [pc, #40]	; (8001640 <__libc_init_array+0x40>)
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <__libc_init_array+0x44>)
 800161a:	1b64      	subs	r4, r4, r5
 800161c:	10a4      	asrs	r4, r4, #2
 800161e:	42a6      	cmp	r6, r4
 8001620:	d105      	bne.n	800162e <__libc_init_array+0x2e>
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	f855 3b04 	ldr.w	r3, [r5], #4
 8001628:	4798      	blx	r3
 800162a:	3601      	adds	r6, #1
 800162c:	e7ee      	b.n	800160c <__libc_init_array+0xc>
 800162e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001632:	4798      	blx	r3
 8001634:	3601      	adds	r6, #1
 8001636:	e7f2      	b.n	800161e <__libc_init_array+0x1e>
 8001638:	080016d0 	.word	0x080016d0
 800163c:	080016d0 	.word	0x080016d0
 8001640:	080016d0 	.word	0x080016d0
 8001644:	080016d4 	.word	0x080016d4

08001648 <_init>:
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	bf00      	nop
 800164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164e:	bc08      	pop	{r3}
 8001650:	469e      	mov	lr, r3
 8001652:	4770      	bx	lr

08001654 <_fini>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr
