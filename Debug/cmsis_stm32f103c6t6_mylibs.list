
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08001b94  08001b94  00011b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e1c  08001e1c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001e1c  08001e1c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e1c  08001e1c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001e24  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08001e28  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001e28  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e0b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9e  00000000  00000000  00028e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  0002abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  0002b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b69  00000000  00000000  0002b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e28  00000000  00000000  0003d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a555  00000000  00000000  000440b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009e606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001578  00000000  00000000  0009e65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b7c 	.word	0x08001b7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001b7c 	.word	0x08001b7c

08000170 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <GFX_SetFont+0x18>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000024 	.word	0x20000024

0800018c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <GFX_SetFontSize+0x16>
		size = size_t;
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <GFX_SetFontSize+0x20>)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	7013      	strb	r3, [r2, #0]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000000 	.word	0x20000000

080001b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ColorType color)
{
 80001b0:	b590      	push	{r4, r7, lr}
 80001b2:	b089      	sub	sp, #36	; 0x24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	4611      	mov	r1, r2
 80001bc:	461a      	mov	r2, r3
 80001be:	460b      	mov	r3, r1
 80001c0:	71fb      	strb	r3, [r7, #7]
 80001c2:	4613      	mov	r3, r2
 80001c4:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b7e      	cmp	r3, #126	; 0x7e
 80001ca:	d867      	bhi.n	800029c <GFX_DrawChar+0xec>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80001cc:	2300      	movs	r3, #0
 80001ce:	75fb      	strb	r3, [r7, #23]
 80001d0:	e05c      	b.n	800028c <GFX_DrawChar+0xdc>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <GFX_DrawChar+0xf4>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	3b20      	subs	r3, #32
 80001da:	4932      	ldr	r1, [pc, #200]	; (80002a4 <GFX_DrawChar+0xf4>)
 80001dc:	6809      	ldr	r1, [r1, #0]
 80001de:	3101      	adds	r1, #1
 80001e0:	7809      	ldrb	r1, [r1, #0]
 80001e2:	fb01 f103 	mul.w	r1, r1, r3
 80001e6:	7dfb      	ldrb	r3, [r7, #23]
 80001e8:	440b      	add	r3, r1
 80001ea:	3302      	adds	r3, #2
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80001f2:	2300      	movs	r3, #0
 80001f4:	757b      	strb	r3, [r7, #21]
 80001f6:	e03f      	b.n	8000278 <GFX_DrawChar+0xc8>
        {
            if(line & 1) // Check last pixel in line
 80001f8:	7dbb      	ldrb	r3, [r7, #22]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d031      	beq.n	8000266 <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 8000202:	4b29      	ldr	r3, [pc, #164]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d113      	bne.n	8000232 <GFX_DrawChar+0x82>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	b29a      	uxth	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	b29b      	uxth	r3, r3
 8000212:	4413      	add	r3, r2
 8000214:	b29b      	uxth	r3, r3
 8000216:	b218      	sxth	r0, r3
 8000218:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800021c:	b29a      	uxth	r2, r3
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	b29b      	uxth	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b29b      	uxth	r3, r3
 8000226:	b21b      	sxth	r3, r3
 8000228:	88ba      	ldrh	r2, [r7, #4]
 800022a:	4619      	mov	r1, r3
 800022c:	f000 fa2e 	bl	800068c <ILI9341_WritePixel>
 8000230:	e019      	b.n	8000266 <GFX_DrawChar+0xb6>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000232:	7dfb      	ldrb	r3, [r7, #23]
 8000234:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000236:	7812      	ldrb	r2, [r2, #0]
 8000238:	fb02 f203 	mul.w	r2, r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	18d0      	adds	r0, r2, r3
 8000240:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000244:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	fb02 f203 	mul.w	r2, r2, r3
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	18d1      	adds	r1, r2, r3
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	b29a      	uxth	r2, r3
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <GFX_DrawChar+0xf8>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b29c      	uxth	r4, r3
 800025c:	88bb      	ldrh	r3, [r7, #4]
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	4623      	mov	r3, r4
 8000262:	f000 f8f9 	bl	8000458 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000266:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	757b      	strb	r3, [r7, #21]
 8000272:	7dbb      	ldrb	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	75bb      	strb	r3, [r7, #22]
 8000278:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <GFX_DrawChar+0xf4>)
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	4293      	cmp	r3, r2
 8000284:	dbb8      	blt.n	80001f8 <GFX_DrawChar+0x48>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	3301      	adds	r3, #1
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <GFX_DrawChar+0xf4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	429a      	cmp	r2, r3
 8000298:	d39b      	bcc.n	80001d2 <GFX_DrawChar+0x22>
 800029a:	e000      	b.n	800029e <GFX_DrawChar+0xee>
	if(chr > 0x7E) return; // chr > '~'
 800029c:	bf00      	nop
            }

        }
    }
}
 800029e:	371c      	adds	r7, #28
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	20000024 	.word	0x20000024
 80002a8:	20000000 	.word	0x20000000

080002ac <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ColorType color)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
 80002b8:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80002c4:	e015      	b.n	80002f2 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	7cfa      	ldrb	r2, [r7, #19]
 80002ca:	68b9      	ldr	r1, [r7, #8]
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	f7ff ff6f 	bl	80001b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <GFX_DrawString+0x5c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <GFX_DrawString+0x60>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	fb03 f302 	mul.w	r3, r3, r2
 80002e4:	3301      	adds	r3, #1
 80002e6:	697a      	ldr	r2, [r7, #20]
 80002e8:	4413      	add	r3, r2
 80002ea:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1e3      	bne.n	80002c6 <GFX_DrawString+0x1a>
	}
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000024 	.word	0x20000024
 800030c:	20000000 	.word	0x20000000

08000310 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	; 0x30
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000328:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800032c:	6879      	ldr	r1, [r7, #4]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	1acb      	subs	r3, r1, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	bfb8      	it	lt
 8000336:	425b      	neglt	r3, r3
 8000338:	429a      	cmp	r2, r3
 800033a:	bfcc      	ite	gt
 800033c:	2301      	movgt	r3, #1
 800033e:	2300      	movle	r3, #0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000344:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00b      	beq.n	8000364 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000356:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	623b      	str	r3, [r7, #32]
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	dd0b      	ble.n	8000384 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	61fb      	str	r3, [r7, #28]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b29a      	uxth	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	b29b      	uxth	r3, r3
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b29b      	uxth	r3, r3
 8000390:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	bfb8      	it	lt
 800039c:	425b      	neglt	r3, r3
 800039e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80003a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003a4:	0fda      	lsrs	r2, r3, #31
 80003a6:	4413      	add	r3, r2
 80003a8:	105b      	asrs	r3, r3, #1
 80003aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	da02      	bge.n	80003ba <GFX_WriteLine+0xaa>
	        ystep = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80003b8:	e02e      	b.n	8000418 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80003ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003be:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80003c0:	e02a      	b.n	8000418 <GFX_WriteLine+0x108>
	        if (steep) {
 80003c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	b21b      	sxth	r3, r3
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	b211      	sxth	r1, r2
 80003d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f959 	bl	800068c <ILI9341_WritePixel>
 80003da:	e007      	b.n	80003ec <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	b211      	sxth	r1, r2
 80003e4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f950 	bl	800068c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80003ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003ee:	8abb      	ldrh	r3, [r7, #20]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80003f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	da09      	bge.n	8000412 <GFX_WriteLine+0x102>
	            y_start += ystep;
 80003fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	4413      	add	r3, r2
 8000406:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000408:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800040a:	8afb      	ldrh	r3, [r7, #22]
 800040c:	4413      	add	r3, r2
 800040e:	b29b      	uxth	r3, r3
 8000410:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	ddd0      	ble.n	80003c2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3730      	adds	r7, #48	; 0x30
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af02      	add	r7, sp, #8
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	887b      	ldrh	r3, [r7, #2]
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	4613      	mov	r3, r2
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	68b9      	ldr	r1, [r7, #8]
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f7ff ff60 	bl	8000310 <GFX_WriteLine>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	4611      	mov	r1, r2
 8000464:	461a      	mov	r2, r3
 8000466:	460b      	mov	r3, r1
 8000468:	80fb      	strh	r3, [r7, #6]
 800046a:	4613      	mov	r3, r2
 800046c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e008      	b.n	8000486 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000474:	88ba      	ldrh	r2, [r7, #4]
 8000476:	8c3b      	ldrh	r3, [r7, #32]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ffd5 	bl	800042a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	3301      	adds	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	88fa      	ldrh	r2, [r7, #6]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	4413      	add	r3, r2
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	429a      	cmp	r2, r3
 8000490:	dbf0      	blt.n	8000474 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <ILI9341_Delay>:
#include "ILI9341.h"

spi_handle_t *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { md_systick_delay(ms); }
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f001 fa6b 	bl	8001980 <md_systick_delay>
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]

  md_spi_tx_polling(Tft_hspi, Data, Lenght, 1000);
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <ILI9341_SendTFT+0x28>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	f001 f8fe 	bl	80016ce <md_spi_tx_polling>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000028 	.word	0x20000028

080004e0 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <ILI9341_SendCommand+0x28>)
 80004f0:	f000 fc7d 	bl	8000dee <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	2101      	movs	r1, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffdb 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010c00 	.word	0x40010c00

0800050c <ILI9341_SendData16>:

// Send 16 bit data
static void ILI9341_SendData16(uint16_t Data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 8000516:	2201      	movs	r2, #1
 8000518:	2101      	movs	r1, #1
 800051a:	480a      	ldr	r0, [pc, #40]	; (8000544 <ILI9341_SendData16+0x38>)
 800051c:	f000 fc67 	bl	8000dee <md_gpio_write_pin>

  // Send 2 8 bits, first MSB (ILI9341 datasheet)
  uint8_t tmp[2];
  tmp[0] = (Data >> 8);
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	733b      	strb	r3, [r7, #12]
  tmp[1] = Data & 0xFF;
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	737b      	strb	r3, [r7, #13]

  // SEND COMMAND
  ILI9341_SendTFT(tmp, 2);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2102      	movs	r1, #2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffbc 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40010c00 	.word	0x40010c00

08000548 <ILI9341_SendCommandAndData>:

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <ILI9341_SendCommandAndData+0x44>)
 800055e:	f000 fc46 	bl	8000dee <md_gpio_write_pin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffa4 	bl	80004b4 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 800056c:	2201      	movs	r2, #1
 800056e:	2101      	movs	r1, #1
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <ILI9341_SendCommandAndData+0x44>)
 8000572:	f000 fc3c 	bl	8000dee <md_gpio_write_pin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	6838      	ldr	r0, [r7, #0]
 800057e:	f7ff ff99 	bl	80004b4 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010c00 	.word	0x40010c00

08000590 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d820      	bhi.n	80005e2 <ILI9341_SetRotation+0x52>
    return;

  switch (Rotation)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d816      	bhi.n	80005d4 <ILI9341_SetRotation+0x44>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <ILI9341_SetRotation+0x1c>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005bd 	.word	0x080005bd
 80005b0:	080005c3 	.word	0x080005c3
 80005b4:	080005c9 	.word	0x080005c9
 80005b8:	080005cf 	.word	0x080005cf
    {
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 80005bc:	2348      	movs	r3, #72	; 0x48
 80005be:	71fb      	strb	r3, [r7, #7]
      break;
 80005c0:	e008      	b.n	80005d4 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 80005c2:	2328      	movs	r3, #40	; 0x28
 80005c4:	71fb      	strb	r3, [r7, #7]
      break;
 80005c6:	e005      	b.n	80005d4 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 80005c8:	2388      	movs	r3, #136	; 0x88
 80005ca:	71fb      	strb	r3, [r7, #7]
      break;
 80005cc:	e002      	b.n	80005d4 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80005ce:	23e8      	movs	r3, #232	; 0xe8
 80005d0:	71fb      	strb	r3, [r7, #7]
      break;
 80005d2:	bf00      	nop
    }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	2036      	movs	r0, #54	; 0x36
 80005dc:	f7ff ffb4 	bl	8000548 <ILI9341_SendCommandAndData>
 80005e0:	e000      	b.n	80005e4 <ILI9341_SetRotation+0x54>
    return;
 80005e2:	bf00      	nop
}
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop

080005ec <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4604      	mov	r4, r0
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4623      	mov	r3, r4
 80005fc:	80fb      	strh	r3, [r7, #6]
 80005fe:	4603      	mov	r3, r0
 8000600:	80bb      	strh	r3, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	807b      	strh	r3, [r7, #2]
 8000606:	4613      	mov	r3, r2
 8000608:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	3b01      	subs	r3, #1
 8000614:	81fb      	strh	r3, [r7, #14]
 8000616:	88ba      	ldrh	r2, [r7, #4]
 8000618:	883b      	ldrh	r3, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	3b01      	subs	r3, #1
 8000620:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	b29b      	uxth	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2204      	movs	r2, #4
 8000648:	4619      	mov	r1, r3
 800064a:	202a      	movs	r0, #42	; 0x2a
 800064c:	f7ff ff7c 	bl	8000548 <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 8000650:	88bb      	ldrh	r3, [r7, #4]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	b29b      	uxth	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 8000660:	89bb      	ldrh	r3, [r7, #12]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	b29b      	uxth	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 800066a:	89bb      	ldrh	r3, [r7, #12]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2204      	movs	r2, #4
 8000676:	4619      	mov	r1, r3
 8000678:	202b      	movs	r0, #43	; 0x2b
 800067a:	f7ff ff65 	bl	8000548 <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR); // Write to RAM
 800067e:	202c      	movs	r0, #44	; 0x2c
 8000680:	f7ff ff2e 	bl	80004e0 <ILI9341_SendCommand>
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}

0800068c <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
 8000696:	460b      	mov	r3, r1
 8000698:	80bb      	strh	r3, [r7, #4]
 800069a:	4613      	mov	r3, r2
 800069c:	807b      	strh	r3, [r7, #2]

  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 800069e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db21      	blt.n	80006ea <ILI9341_WritePixel+0x5e>
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ae:	da1c      	bge.n	80006ea <ILI9341_WritePixel+0x5e>
 80006b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db18      	blt.n	80006ea <ILI9341_WritePixel+0x5e>
 80006b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006bc:	2bef      	cmp	r3, #239	; 0xef
 80006be:	dc14      	bgt.n	80006ea <ILI9341_WritePixel+0x5e>
    {
      //	put data into buffer
      DataToTransfer[0] = (color >> 8);
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	733b      	strb	r3, [r7, #12]
      DataToTransfer[1] = color & 0xFF;
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	737b      	strb	r3, [r7, #13]

      // Set window range the single pixel in tft
      // x,y positions 1,1 ranges
      ILI9341_SetAddrWindow(x, y, 1, 1);
 80006d0:	88f8      	ldrh	r0, [r7, #6]
 80006d2:	88b9      	ldrh	r1, [r7, #4]
 80006d4:	2301      	movs	r3, #1
 80006d6:	2201      	movs	r2, #1
 80006d8:	f7ff ff88 	bl	80005ec <ILI9341_SetAddrWindow>

      // send command that we are writing to RAM, and also color data
      ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2202      	movs	r2, #2
 80006e2:	4619      	mov	r1, r3
 80006e4:	202c      	movs	r0, #44	; 0x2c
 80006e6:	f7ff ff2f 	bl	8000548 <ILI9341_SendCommandAndData>
      // Send 16 bit color to that range
    }
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <ILI9341_ClearDisplay>:
    }
}

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4603      	mov	r3, r0
 80006fa:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 80006fc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000700:	60bb      	str	r3, [r7, #8]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000702:	23f0      	movs	r3, #240	; 0xf0
 8000704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ff6e 	bl	80005ec <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000710:	202c      	movs	r0, #44	; 0x2c
 8000712:	f7ff fee5 	bl	80004e0 <ILI9341_SendCommand>

  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e006      	b.n	800072a <ILI9341_ClearDisplay+0x38>
    {
      ILI9341_SendData16(color);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fef4 	bl	800050c <ILI9341_SendData16>
  for (uint32_t i = 0; i < Lenght; i++)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	429a      	cmp	r2, r3
 8000730:	d3f4      	bcc.n	800071c <ILI9341_ClearDisplay+0x2a>
    }

}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <ILI9341_Init>:
    0x80, // Display on
    0x00  // End of list
};

void ILI9341_Init(spi_handle_t *hspi)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  // assign correct spi
  Tft_hspi = hspi;
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <ILI9341_Init+0x94>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <ILI9341_Init+0x98>)
 800074c:	60fb      	str	r3, [r7, #12]
  ILI9341_CS_HIGH;
 800074e:	2201      	movs	r2, #1
 8000750:	210b      	movs	r1, #11
 8000752:	4821      	ldr	r0, [pc, #132]	; (80007d8 <ILI9341_Init+0x9c>)
 8000754:	f000 fb4b 	bl	8000dee <md_gpio_write_pin>

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 8000758:	2200      	movs	r2, #0
 800075a:	210a      	movs	r1, #10
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <ILI9341_Init+0x9c>)
 800075e:	f000 fb46 	bl	8000dee <md_gpio_write_pin>
  ILI9341_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f7ff fe9a 	bl	800049c <ILI9341_Delay>
  ILI9341_RST_HIGH;
 8000768:	2201      	movs	r2, #1
 800076a:	210a      	movs	r1, #10
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <ILI9341_Init+0x9c>)
 800076e:	f000 fb3e 	bl	8000dee <md_gpio_write_pin>
  ILI9341_Delay(10);
 8000772:	200a      	movs	r0, #10
 8000774:	f7ff fe92 	bl	800049c <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0)
 8000778:	e01a      	b.n	80007b0 <ILI9341_Init+0x74>
    {
      // assign value form address to x (second value that is number of data to
      // be send)
      x = *(addr++);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	60fa      	str	r2, [r7, #12]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	72bb      	strb	r3, [r7, #10]

      // mask this value to maximum of 127
      // 0x7F	0111 1111
      // so if we send 0x80 as second argument then we just send command ->
      // without data
      numArgs = x & 0x7F;
 8000784:	7abb      	ldrb	r3, [r7, #10]
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	727b      	strb	r3, [r7, #9]

      // send command then array of data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	b29a      	uxth	r2, r3
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	68f9      	ldr	r1, [r7, #12]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fed7 	bl	8000548 <ILI9341_SendCommandAndData>

      // move adress to next command
      addr += numArgs;
 800079a:	7a7b      	ldrb	r3, [r7, #9]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]

      // if only command is sent then make a delay
      if (x & 0x80)
 80007a2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da02      	bge.n	80007b0 <ILI9341_Init+0x74>
        {
          ILI9341_Delay(150);
 80007aa:	2096      	movs	r0, #150	; 0x96
 80007ac:	f7ff fe76 	bl	800049c <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60fa      	str	r2, [r7, #12]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	72fb      	strb	r3, [r7, #11]
 80007ba:	7afb      	ldrb	r3, [r7, #11]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1dc      	bne.n	800077a <ILI9341_Init+0x3e>
        }
    }

  ILI9341_SetRotation(ILI9341_ROTATION);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fee5 	bl	8000590 <ILI9341_SetRotation>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028
 80007d4:	08001bcc 	.word	0x08001bcc
 80007d8:	40010c00 	.word	0x40010c00

080007dc <md_gpio_exti15_10_callback>:
        }
    }
}

void md_gpio_exti15_10_callback(gpio_pin_number_t pin_number)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  send_can_msg = 1;
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <md_gpio_exti15_10_callback+0x1c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2000002c 	.word	0x2000002c

080007fc <md_can_mailbox_empty_callback>:

void md_can_mailbox_empty_callback(void) {}
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <example_heart_beat>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  // init LED
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 800080c:	2300      	movs	r3, #0
 800080e:	2201      	movs	r2, #1
 8000810:	210d      	movs	r1, #13
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <example_heart_beat+0x3c>)
 8000814:	f000 fa1e 	bl	8000c54 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // configure systick as 1ms
  md_systick_configure_ms();
 8000818:	f001 f892 	bl	8001940 <md_systick_configure_ms>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	210d      	movs	r1, #13
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <example_heart_beat+0x3c>)
 8000822:	f000 fae4 	bl	8000dee <md_gpio_write_pin>

  md_systick_delay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f001 f8a9 	bl	8001980 <md_systick_delay>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	210d      	movs	r1, #13
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <example_heart_beat+0x3c>)
 8000834:	f000 fadb 	bl	8000dee <md_gpio_write_pin>

  md_systick_delay(1000);
 8000838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083c:	f001 f8a0 	bl	8001980 <md_systick_delay>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40011000 	.word	0x40011000

08000848 <example_rcc_configure_pll_32Mhz>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_rcc_configure_pll_32Mhz(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0

  rcc_clock_freqs_t frequencies = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  // configure frequencies - no prescaler on buses + pll on mul 4x
  md_rcc_configure_prescalers(RCC_AHB_PRESCALER_NODIV, RCC_APB_PRESCALER_NODIV,
 800085c:	2302      	movs	r3, #2
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fc70 	bl	8001148 <md_rcc_configure_prescalers>
                              RCC_APB_PRESCALER_NODIV, RCC_ADC_PRESCALER_DIV6);
  md_rcc_configure_sysclk(RCC_SYSCLK_SOURCE_PLL, RCC_PLL_SOURCE_HSE,
 8000868:	2300      	movs	r3, #0
 800086a:	2202      	movs	r2, #2
 800086c:	2101      	movs	r1, #1
 800086e:	2002      	movs	r0, #2
 8000870:	f000 fbe2 	bl	8001038 <md_rcc_configure_sysclk>
                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);
  md_rcc_get_frequencies(&frequencies);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fcf5 	bl	8001266 <md_rcc_get_frequencies>
}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <example_spi_transfer_tft>:
      example_heart_beat();
    }
}

void example_spi_transfer_tft(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  example_rcc_configure_pll_32Mhz();
 800088a:	f7ff ffdd 	bl	8000848 <example_rcc_configure_pll_32Mhz>
  // init spi and sys tick
  md_systick_configure_ms();
 800088e:	f001 f857 	bl	8001940 <md_systick_configure_ms>

  md_spi_init(&hspi1);
 8000892:	481d      	ldr	r0, [pc, #116]	; (8000908 <example_spi_transfer_tft+0x84>)
 8000894:	f000 fe50 	bl	8001538 <md_spi_init>

  spi_config_t spi_config;
  spi_config.clock_1_when_idle = false;
 8000898:	2300      	movs	r3, #0
 800089a:	717b      	strb	r3, [r7, #5]
  spi_config.clock_second_edge_capture = false;
 800089c:	2300      	movs	r3, #0
 800089e:	71bb      	strb	r3, [r7, #6]
  spi_config.data_format_16bit = false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	70fb      	strb	r3, [r7, #3]
  spi_config.full_duplex = true;
 80008a4:	2301      	movs	r3, #1
 80008a6:	707b      	strb	r3, [r7, #1]
  spi_config.lsb_first = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	713b      	strb	r3, [r7, #4]
  spi_config.master_mode = true;
 80008ac:	2301      	movs	r3, #1
 80008ae:	703b      	strb	r3, [r7, #0]
  spi_config.prescaler = SPI_PRESCALER_2; // 100kHz
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
  spi_config.software_nss_management = true;
 80008b4:	2301      	movs	r3, #1
 80008b6:	70bb      	strb	r3, [r7, #2]

  md_spi_init_basic(&hspi1, spi_config);
 80008b8:	463b      	mov	r3, r7
 80008ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <example_spi_transfer_tft+0x84>)
 80008c0:	f000 fe47 	bl	8001552 <md_spi_init_basic>

  // init gpio for tft
  //  DC
  md_gpio_configure_output(GPIOB, GPIO_PIN_1, GPIO_SPEED_10MHZ, GPIO_OUTPUT_PP);
 80008c4:	2300      	movs	r3, #0
 80008c6:	2201      	movs	r2, #1
 80008c8:	2101      	movs	r1, #1
 80008ca:	4810      	ldr	r0, [pc, #64]	; (800090c <example_spi_transfer_tft+0x88>)
 80008cc:	f000 f9c2 	bl	8000c54 <md_gpio_configure_output>
  // CS
  // RESET
  md_gpio_configure_output(GPIOB, GPIO_PIN_10, GPIO_SPEED_10MHZ,
 80008d0:	2300      	movs	r3, #0
 80008d2:	2201      	movs	r2, #1
 80008d4:	210a      	movs	r1, #10
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <example_spi_transfer_tft+0x88>)
 80008d8:	f000 f9bc 	bl	8000c54 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  ILI9341_Init(&hspi1);
 80008dc:	480a      	ldr	r0, [pc, #40]	; (8000908 <example_spi_transfer_tft+0x84>)
 80008de:	f7ff ff2d 	bl	800073c <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_BLACK);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff ff05 	bl	80006f2 <ILI9341_ClearDisplay>

  GFX_SetFont(font_8x5);
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <example_spi_transfer_tft+0x8c>)
 80008ea:	f7ff fc41 	bl	8000170 <GFX_SetFont>
  GFX_SetFontSize(2);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff fc4c 	bl	800018c <GFX_SetFontSize>
  GFX_DrawString(10, 10, "Can message recieved", ILI9341_YELLOW);
 80008f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <example_spi_transfer_tft+0x90>)
 80008fa:	210a      	movs	r1, #10
 80008fc:	200a      	movs	r0, #10
 80008fe:	f7ff fcd5 	bl	80002ac <GFX_DrawString>

  while (1)
    {
      example_heart_beat();
 8000902:	f7ff ff81 	bl	8000808 <example_heart_beat>
 8000906:	e7fc      	b.n	8000902 <example_spi_transfer_tft+0x7e>
 8000908:	20000044 	.word	0x20000044
 800090c:	40010c00 	.word	0x40010c00
 8000910:	08001c3c 	.word	0x08001c3c
 8000914:	08001bb4 	.word	0x08001bb4

08000918 <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <md_usart_tc_callback+0x48>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d107      	bne.n	800093a <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <md_usart_tc_callback+0x4c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <md_usart_tc_callback+0x4c>)
 8000932:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <md_usart_tc_callback+0x50>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <md_usart_tc_callback+0x54>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d107      	bne.n	8000954 <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <md_usart_tc_callback+0x58>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <md_usart_tc_callback+0x58>)
 800094c:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <md_usart_tc_callback+0x5c>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
    }
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40013800 	.word	0x40013800
 8000964:	20000038 	.word	0x20000038
 8000968:	20000035 	.word	0x20000035
 800096c:	40004400 	.word	0x40004400
 8000970:	20000030 	.word	0x20000030
 8000974:	20000034 	.word	0x20000034

08000978 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0c      	blt.n	80009a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_ClearPendingIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	3360      	adds	r3, #96	; 0x60
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <md_can_msg_pending_fifo0_callback>:
/*
 * this callback is called when message is recieved and previous message was
 * already read
 * @return - void
 */
__weak void md_can_msg_pending_fifo0_callback(void) {}
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <md_can_msg_pending_fifo1_callback>:
/*
 * this callback is called when message is recieved and previous message was
 * already read
 * @return - void
 */
__weak void md_can_msg_pending_fifo1_callback(void) {}
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <can_main_rx0_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx0_callback(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if ((CAN1->RF0R & 0x03) && hcan1.msg_pending_fifo0 == 0)
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <can_main_rx0_callback+0x38>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d011      	beq.n	8000a00 <can_main_rx0_callback+0x34>
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <can_main_rx0_callback+0x3c>)
 80009de:	799b      	ldrb	r3, [r3, #6]
 80009e0:	f083 0301 	eor.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00a      	beq.n	8000a00 <can_main_rx0_callback+0x34>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE0);
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <can_main_rx0_callback+0x38>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <can_main_rx0_callback+0x38>)
 80009f0:	f023 0302 	bic.w	r3, r3, #2
 80009f4:	6153      	str	r3, [r2, #20]
      hcan1.msg_pending_fifo0 = 1;
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <can_main_rx0_callback+0x3c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	719a      	strb	r2, [r3, #6]
      md_can_msg_pending_fifo0_callback();
 80009fc:	f7ff ffda 	bl	80009b4 <md_can_msg_pending_fifo0_callback>
    }
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40006400 	.word	0x40006400
 8000a08:	2000003c 	.word	0x2000003c

08000a0c <can_main_rx1_callback>:
/*
 * this callback is called when there is a new message/fifo is full/fifo
 * @return - void
 */
static void can_main_rx1_callback(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  // this irq has to be cleared until message is not read from fifo
  // then user has to enable it by himself or use function md_can_read_fifo
  if ((CAN1->RF1R & 0x03) && hcan1.msg_pending_fifo1 == 0)
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <can_main_rx1_callback+0x38>)
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d011      	beq.n	8000a40 <can_main_rx1_callback+0x34>
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <can_main_rx1_callback+0x3c>)
 8000a1e:	79db      	ldrb	r3, [r3, #7]
 8000a20:	f083 0301 	eor.w	r3, r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00a      	beq.n	8000a40 <can_main_rx1_callback+0x34>
    {
      CLEAR_BIT(CAN1->IER, CAN_IER_FMPIE1);
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <can_main_rx1_callback+0x38>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <can_main_rx1_callback+0x38>)
 8000a30:	f023 0310 	bic.w	r3, r3, #16
 8000a34:	6153      	str	r3, [r2, #20]
      hcan1.msg_pending_fifo1 = 1;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <can_main_rx1_callback+0x3c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	71da      	strb	r2, [r3, #7]
      md_can_msg_pending_fifo1_callback();
 8000a3c:	f7ff ffc0 	bl	80009c0 <md_can_msg_pending_fifo1_callback>
    }
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40006400 	.word	0x40006400
 8000a48:	2000003c 	.word	0x2000003c

08000a4c <can_main_sce_callback>:

/*
 * this callback is called on error/status change
 * @return - void
 */
static void can_main_sce_callback(void) {}
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <USB_HP_CAN_TX_IRQHandler>:

// Vector table handlers for can

void USB_HP_CAN_TX_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  // clear only 1 request complete bit - so if 3 mailboxes become empty
  // there will be 3 interrupts
  if (CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_RQCP0))
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <USB_HP_CAN_TX_IRQHandler+0x64>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <USB_HP_CAN_TX_IRQHandler+0x1e>
    {
      CAN1->TSR |= CAN_TSR_RQCP0;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6093      	str	r3, [r2, #8]
 8000a74:	e018      	b.n	8000aa8 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME1 | CAN_TSR_RQCP1))
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <USB_HP_CAN_TX_IRQHandler+0x68>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <USB_HP_CAN_TX_IRQHandler+0x38>
    {
      CAN1->TSR |= CAN_TSR_RQCP1;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6093      	str	r3, [r2, #8]
 8000a8e:	e00b      	b.n	8000aa8 <USB_HP_CAN_TX_IRQHandler+0x50>
    }
  else if (CAN1->TSR & (CAN_TSR_TME2 | CAN_TSR_RQCP2))
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <USB_HP_CAN_TX_IRQHandler+0x6c>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d005      	beq.n	8000aa8 <USB_HP_CAN_TX_IRQHandler+0x50>
    {
      CAN1->TSR |= CAN_TSR_RQCP2;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <USB_HP_CAN_TX_IRQHandler+0x60>)
 8000aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa6:	6093      	str	r3, [r2, #8]
    }

  // clear nvic pending flag
  NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 8000aa8:	2013      	movs	r0, #19
 8000aaa:	f7ff ff65 	bl	8000978 <__NVIC_ClearPendingIRQ>

  md_can_mailbox_empty_callback();
 8000aae:	f7ff fea5 	bl	80007fc <md_can_mailbox_empty_callback>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40006400 	.word	0x40006400
 8000abc:	04000001 	.word	0x04000001
 8000ac0:	08000100 	.word	0x08000100
 8000ac4:	10010000 	.word	0x10010000

08000ac8 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 8000acc:	2014      	movs	r0, #20
 8000ace:	f7ff ff53 	bl	8000978 <__NVIC_ClearPendingIRQ>
  can_main_rx0_callback();
 8000ad2:	f7ff ff7b 	bl	80009cc <can_main_rx0_callback>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8000ade:	2015      	movs	r0, #21
 8000ae0:	f7ff ff4a 	bl	8000978 <__NVIC_ClearPendingIRQ>
  can_main_rx1_callback();
 8000ae4:	f7ff ff92 	bl	8000a0c <can_main_rx1_callback>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(CAN1_SCE_IRQn);
 8000af0:	2016      	movs	r0, #22
 8000af2:	f7ff ff41 	bl	8000978 <__NVIC_ClearPendingIRQ>
  can_main_sce_callback();
 8000af6:	f7ff ffa9 	bl	8000a4c <can_main_sce_callback>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <__NVIC_ClearPendingIRQ>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0c      	blt.n	8000b2c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_ClearPendingIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	3360      	adds	r3, #96	; 0x60
 8000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <md_gpio_init_clock+0x108>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d118      	bne.n	8000b7e <md_gpio_init_clock+0x42>
    {
      if (RCC->APB2ENR & RCC_APB2ENR_IOPAEN)
 8000b4c:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d168      	bne.n	8000c2a <md_gpio_init_clock+0xee>
        return;

      RCC_CLOCK_ENABLE_IOPA();
 8000b58:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	4a37      	ldr	r2, [pc, #220]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b76:	f023 0304 	bic.w	r3, r3, #4
 8000b7a:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 8000b7c:	e05b      	b.n	8000c36 <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOB)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <md_gpio_init_clock+0x110>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d118      	bne.n	8000bb8 <md_gpio_init_clock+0x7c>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPBEN)
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d14d      	bne.n	8000c2e <md_gpio_init_clock+0xf2>
      RCC_CLOCK_ENABLE_IOPB();
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bb0:	f023 0308 	bic.w	r3, r3, #8
 8000bb4:	60d3      	str	r3, [r2, #12]
  return;
 8000bb6:	e03e      	b.n	8000c36 <md_gpio_init_clock+0xfa>
  else if (p_GPIOx == GPIOC)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a25      	ldr	r2, [pc, #148]	; (8000c50 <md_gpio_init_clock+0x114>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d118      	bne.n	8000bf2 <md_gpio_init_clock+0xb6>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPCEN)
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d132      	bne.n	8000c32 <md_gpio_init_clock+0xf6>
      RCC_CLOCK_ENABLE_IOPC();
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bea:	f023 0310 	bic.w	r3, r3, #16
 8000bee:	60d3      	str	r3, [r2, #12]
  return;
 8000bf0:	e021      	b.n	8000c36 <md_gpio_init_clock+0xfa>
  else if (p_GPIOx)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d01e      	beq.n	8000c36 <md_gpio_init_clock+0xfa>
      if (RCC->APB2ENR & RCC_APB2ENR_IOPDEN)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d11a      	bne.n	8000c3a <md_gpio_init_clock+0xfe>
      RCC_CLOCK_ENABLE_IOPD();
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000c16:	f043 0320 	orr.w	r3, r3, #32
 8000c1a:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <md_gpio_init_clock+0x10c>)
 8000c22:	f023 0320 	bic.w	r3, r3, #32
 8000c26:	60d3      	str	r3, [r2, #12]
  return;
 8000c28:	e005      	b.n	8000c36 <md_gpio_init_clock+0xfa>
        return;
 8000c2a:	bf00      	nop
 8000c2c:	e006      	b.n	8000c3c <md_gpio_init_clock+0x100>
        return;
 8000c2e:	bf00      	nop
 8000c30:	e004      	b.n	8000c3c <md_gpio_init_clock+0x100>
        return;
 8000c32:	bf00      	nop
 8000c34:	e002      	b.n	8000c3c <md_gpio_init_clock+0x100>
  return;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <md_gpio_init_clock+0x100>
        return;
 8000c3a:	bf00      	nop
}
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	40011000 	.word	0x40011000

08000c54 <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	4611      	mov	r1, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	70fb      	strb	r3, [r7, #3]
 8000c66:	460b      	mov	r3, r1
 8000c68:	70bb      	strb	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	707b      	strb	r3, [r7, #1]
  md_gpio_init_clock(p_GPIOx);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff64 	bl	8000b3c <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d820      	bhi.n	8000cbc <md_gpio_configure_output+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	78fa      	ldrb	r2, [r7, #3]
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	210f      	movs	r1, #15
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	78b9      	ldrb	r1, [r7, #2]
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	7879      	ldrb	r1, [r7, #1]
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	3202      	adds	r2, #2
 8000cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 8000cba:	e023      	b.n	8000d04 <md_gpio_configure_output+0xb0>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	3a08      	subs	r2, #8
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	401a      	ands	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	78b9      	ldrb	r1, [r7, #2]
 8000cda:	78fa      	ldrb	r2, [r7, #3]
 8000cdc:	3a08      	subs	r2, #8
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	7879      	ldrb	r1, [r7, #1]
 8000cf0:	78fa      	ldrb	r2, [r7, #3]
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	3202      	adds	r2, #2
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	605a      	str	r2, [r3, #4]
  return;
 8000d02:	bf00      	nop
}
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <md_gpio_configure_input>:
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	4613      	mov	r3, r2
 8000d18:	70bb      	strb	r3, [r7, #2]
  md_gpio_init_clock(p_GPIOx);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff0e 	bl	8000b3c <md_gpio_init_clock>

  // choose between CRL/CRH
  if (pin_number < 8)
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	2b07      	cmp	r3, #7
 8000d24:	d825      	bhi.n	8000d72 <md_gpio_configure_input+0x68>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	210f      	movs	r1, #15
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	601a      	str	r2, [r3, #0]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d90b      	bls.n	8000d5a <md_gpio_configure_input+0x50>
        {
          p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	3202      	adds	r2, #2
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e033      	b.n	8000dc2 <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	78b9      	ldrb	r1, [r7, #2]
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	3202      	adds	r2, #2
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e027      	b.n	8000dc2 <md_gpio_configure_input+0xb8>
        }
    }
  else
    {
      // clear config and mode bits
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	3a08      	subs	r2, #8
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	401a      	ands	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	605a      	str	r2, [r3, #4]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d90c      	bls.n	8000daa <md_gpio_configure_input+0xa0>
        {
          p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	3a08      	subs	r2, #8
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	3202      	adds	r2, #2
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	431a      	orrs	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	e00b      	b.n	8000dc2 <md_gpio_configure_input+0xb8>
        }
      else
        {
          p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	78b9      	ldrb	r1, [r7, #2]
 8000db0:	78fa      	ldrb	r2, [r7, #3]
 8000db2:	3a08      	subs	r2, #8
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	3202      	adds	r2, #2
 8000db8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
        }
    }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP)
 8000dc2:	78bb      	ldrb	r3, [r7, #2]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d107      	bne.n	8000dd8 <md_gpio_configure_input+0xce>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	611a      	str	r2, [r3, #16]
  else
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000dd6:	e007      	b.n	8000de8 <md_gpio_configure_input+0xde>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	615a      	str	r2, [r3, #20]
  return;
 8000de6:	bf00      	nop
}
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	70fb      	strb	r3, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8000dfe:	78bb      	ldrb	r3, [r7, #2]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d107      	bne.n	8000e14 <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2201      	movs	r2, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000e12:	e00a      	b.n	8000e2a <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8000e14:	78bb      	ldrb	r3, [r7, #2]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d107      	bne.n	8000e2a <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	615a      	str	r2, [r3, #20]
  return;
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
}
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <md_gpio_exti4_callback>:
/*
 * callback for exti 4 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti4_callback(void) {}
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <md_gpio_exti3_callback>:
/*
 * callback for exti 3 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti3_callback(void) {}
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <md_gpio_exti2_callback>:
/*
 * callback for exti 2 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti2_callback(void) {}
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <md_gpio_exti1_callback>:
/*
 * callback for exti 1 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti1_callback(void) {}
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <md_gpio_exti0_callback>:
/*
 * callback for exti 0 line - clearing irq flags not required
 * @param[void]
 * @return - void
 */
__weak void md_gpio_exti0_callback(void) {}
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <gpio_exti15_10_get_pin>:
/*
 * find first exti pending number from registers 15-10/9-5
 * @return - pin number;
 */
static uint8_t gpio_exti15_10_get_pin(IRQn_Type exti_irq)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  uint32_t temp = EXTI->PR;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <gpio_exti15_10_get_pin+0x90>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	60fb      	str	r3, [r7, #12]

  if (exti_irq == EXTI9_5_IRQn)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b17      	cmp	r3, #23
 8000e86:	d118      	bne.n	8000eba <gpio_exti15_10_get_pin+0x4a>
    {
      temp >>= 5;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	72fb      	strb	r3, [r7, #11]
 8000e92:	e00e      	b.n	8000eb2 <gpio_exti15_10_get_pin+0x42>
        {
          if (temp & 0x01)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <gpio_exti15_10_get_pin+0x36>
            return (i + 5);
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	3305      	adds	r3, #5
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	e026      	b.n	8000ef4 <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 5; i++)
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	72fb      	strb	r3, [r7, #11]
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d9ed      	bls.n	8000e94 <gpio_exti15_10_get_pin+0x24>
 8000eb8:	e01b      	b.n	8000ef2 <gpio_exti15_10_get_pin+0x82>
        }
    }
  else if (exti_irq == EXTI15_10_IRQn)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b28      	cmp	r3, #40	; 0x28
 8000ec0:	d117      	bne.n	8000ef2 <gpio_exti15_10_get_pin+0x82>
    {
      temp >>= 10;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0a9b      	lsrs	r3, r3, #10
 8000ec6:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	72bb      	strb	r3, [r7, #10]
 8000ecc:	e00e      	b.n	8000eec <gpio_exti15_10_get_pin+0x7c>
        {
          if (temp & 0x01)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <gpio_exti15_10_get_pin+0x70>
            return (i + 10);
 8000ed8:	7abb      	ldrb	r3, [r7, #10]
 8000eda:	330a      	adds	r3, #10
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	e009      	b.n	8000ef4 <gpio_exti15_10_get_pin+0x84>

          temp >>= 1;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
      for (uint8_t i = 0; i < 6; i++)
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	72bb      	strb	r3, [r7, #10]
 8000eec:	7abb      	ldrb	r3, [r7, #10]
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	d9ed      	bls.n	8000ece <gpio_exti15_10_get_pin+0x5e>
        }
    }

  return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40010400 	.word	0x40010400

08000f04 <EXTI15_10_IRQHandler>:

// Vector table handlers for exti

void EXTI15_10_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI15_10_IRQn);
 8000f0a:	2028      	movs	r0, #40	; 0x28
 8000f0c:	f7ff ffb0 	bl	8000e70 <gpio_exti15_10_get_pin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <EXTI15_10_IRQHandler+0x3c>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4611      	mov	r1, r2
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <EXTI15_10_IRQHandler+0x3c>)
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	f7ff fde9 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fc53 	bl	80007dc <md_gpio_exti15_10_callback>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40010400 	.word	0x40010400

08000f44 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  // get pending irq number from exti
  uint8_t pending_irq_no = gpio_exti15_10_get_pin(EXTI9_5_IRQn);
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f7ff ff90 	bl	8000e70 <gpio_exti15_10_get_pin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  // clear exti flag
  EXTI->PR |= (0x01 << pending_irq_no);
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <EXTI9_5_IRQHandler+0x3c>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	79fa      	ldrb	r2, [r7, #7]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4611      	mov	r1, r2
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <EXTI9_5_IRQHandler+0x3c>)
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000f68:	2017      	movs	r0, #23
 8000f6a:	f7ff fdc9 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti15_10_callback(pending_irq_no);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fc33 	bl	80007dc <md_gpio_exti15_10_callback>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010400 	.word	0x40010400

08000f84 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 4);
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <EXTI4_IRQHandler+0x20>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <EXTI4_IRQHandler+0x20>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f7ff fdb3 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti4_callback();
 8000f9a:	f7ff ff4b 	bl	8000e34 <md_gpio_exti4_callback>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 3);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <EXTI3_IRQHandler+0x20>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <EXTI3_IRQHandler+0x20>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f7ff fda1 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti3_callback();
 8000fbe:	f7ff ff3f 	bl	8000e40 <md_gpio_exti3_callback>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010400 	.word	0x40010400

08000fcc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 2);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <EXTI2_IRQHandler+0x20>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <EXTI2_IRQHandler+0x20>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000fdc:	2008      	movs	r0, #8
 8000fde:	f7ff fd8f 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti2_callback();
 8000fe2:	f7ff ff33 	bl	8000e4c <md_gpio_exti2_callback>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010400 	.word	0x40010400

08000ff0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 1);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <EXTI1_IRQHandler+0x20>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <EXTI1_IRQHandler+0x20>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001000:	2007      	movs	r0, #7
 8001002:	f7ff fd7d 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti1_callback();
 8001006:	f7ff ff27 	bl	8000e58 <md_gpio_exti1_callback>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40010400 	.word	0x40010400

08001014 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  // clear exti flag
  EXTI->PR |= (0x01 << 0);
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <EXTI0_IRQHandler+0x20>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <EXTI0_IRQHandler+0x20>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
  // clear nvic flag
  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001024:	2006      	movs	r0, #6
 8001026:	f7ff fd6b 	bl	8000b00 <__NVIC_ClearPendingIRQ>
  // user defined irq action
  md_gpio_exti0_callback();
 800102a:	f7ff ff1b 	bl	8000e64 <md_gpio_exti0_callback>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40010400 	.word	0x40010400

08001038 <md_rcc_configure_sysclk>:
 * @param[hse_div] - pll1 hse division factor @rcc_hse_div
 * @return - void
 */
void md_rcc_configure_sysclk(rcc_sysclk_source_t sysclk_source,
                             rcc_pll_source_t pll_source,
                             rcc_pll1_mul_t pll1_mul, rcc_hse_div_t hse_div) {
 8001038:	b490      	push	{r4, r7}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	4603      	mov	r3, r0
 800104c:	71bb      	strb	r3, [r7, #6]
 800104e:	460b      	mov	r3, r1
 8001050:	717b      	strb	r3, [r7, #5]
 8001052:	4613      	mov	r3, r2
 8001054:	713b      	strb	r3, [r7, #4]
  // enable HSI
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSI ||
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <md_rcc_configure_sysclk+0x2a>
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <md_rcc_configure_sysclk+0x44>
      pll_source == RCC_PLL_SOURCE_HSI) {
    SET_BIT(RCC->CR, RCC_CR_HSION);
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a37      	ldr	r2, [pc, #220]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
    // wait until HSI is ready
    while (!(RCC->CR & RCC_CR_HSIRDY))
 800106e:	bf00      	nop
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f9      	beq.n	8001070 <md_rcc_configure_sysclk+0x38>
      ;
  }

  // enable HSE
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSE ||
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <md_rcc_configure_sysclk+0x50>
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10c      	bne.n	80010a2 <md_rcc_configure_sysclk+0x6a>
      pll_source == RCC_PLL_SOURCE_HSE) {
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
    // wait until HSE is ready
    while (!(RCC->CR & RCC_CR_HSERDY))
 8001094:	bf00      	nop
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f9      	beq.n	8001096 <md_rcc_configure_sysclk+0x5e>
      ;
  }

  // configure PLL
  if (sysclk_source == RCC_SYSCLK_SOURCE_PLL) {
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d139      	bne.n	800111c <md_rcc_configure_sysclk+0xe4>
    // choose PLL source and multiplier
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll_source << RCC_CFGR_PLLSRC_Pos);
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	0412      	lsls	r2, r2, #16
 80010bc:	4611      	mov	r1, r2
 80010be:	4a21      	ldr	r2, [pc, #132]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010ca:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80010ce:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll1_mul << RCC_CFGR_PLLMULL_Pos);
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	797a      	ldrb	r2, [r7, #5]
 80010d6:	0492      	lsls	r2, r2, #18
 80010d8:	4611      	mov	r1, r2
 80010da:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6053      	str	r3, [r2, #4]

    // if source is HSE choose prediv
    if (pll_source == RCC_PLL_SOURCE_HSE) {
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10d      	bne.n	8001102 <md_rcc_configure_sysclk+0xca>
      RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (hse_div << RCC_CFGR_PLLXTPRE_Pos);
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	793a      	ldrb	r2, [r7, #4]
 80010f8:	0452      	lsls	r2, r2, #17
 80010fa:	4611      	mov	r1, r2
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 80010fe:	430b      	orrs	r3, r1
 8001100:	6053      	str	r3, [r2, #4]
    }

    // enable PLL
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110c:	6013      	str	r3, [r2, #0]
    // wait until PLL is ready
    while (!(RCC->CR & RCC_CR_PLLRDY))
 800110e:	bf00      	nop
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f9      	beq.n	8001110 <md_rcc_configure_sysclk+0xd8>
      ;
  }

  // change sysclk source
  RCC->CFGR |= (sysclk_source << RCC_CFGR_SW_Pos);
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]

   //wait until sys clock is switched
   while (!(RCC->CFGR & (sysclk_source << 2U)))
 8001128:	bf00      	nop
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <md_rcc_configure_sysclk+0x10c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f8      	beq.n	800112a <md_rcc_configure_sysclk+0xf2>
      ;

  return;
 8001138:	bf00      	nop
}
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bc90      	pop	{r4, r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <md_rcc_configure_prescalers>:
 * @return - void
 */
void md_rcc_configure_prescalers(rcc_ahb_prescaler_t ahb_prescaler,
                                 rcc_apb_prescaler_t apb1_prescaler,
                                 rcc_apb_prescaler_t apb2_prescaler,
                                 rcc_adc_prescaler_t adc_prescaler) {
 8001148:	b490      	push	{r4, r7}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	4603      	mov	r3, r0
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	460b      	mov	r3, r1
 8001160:	717b      	strb	r3, [r7, #5]
 8001162:	4613      	mov	r3, r2
 8001164:	713b      	strb	r3, [r7, #4]
  // configure ahb prescaler
  RCC->CFGR |= (ahb_prescaler << RCC_CFGR_HPRE_Pos);
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	4611      	mov	r1, r2
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001172:	430b      	orrs	r3, r1
 8001174:	6053      	str	r3, [r2, #4]

  // configure apb1/apb2 prescalers
  RCC->CFGR |= (apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	0212      	lsls	r2, r2, #8
 800117e:	4611      	mov	r1, r2
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001182:	430b      	orrs	r3, r1
 8001184:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	02d2      	lsls	r2, r2, #11
 800118e:	4611      	mov	r1, r2
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001192:	430b      	orrs	r3, r1
 8001194:	6053      	str	r3, [r2, #4]

  // configure adc prescaler
  RCC->CFGR |= (adc_prescaler << RCC_CFGR_ADCPRE_Pos);
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	793a      	ldrb	r2, [r7, #4]
 800119c:	0392      	lsls	r2, r2, #14
 800119e:	4611      	mov	r1, r2
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <md_rcc_configure_prescalers+0x68>)
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6053      	str	r3, [r2, #4]

  return;
 80011a6:	bf00      	nop
}
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc90      	pop	{r4, r7}
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000

080011b4 <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <md_rcc_get_sysclk+0x34>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d00a      	beq.n	80011da <md_rcc_get_sysclk+0x26>
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d80c      	bhi.n	80011e2 <md_rcc_get_sysclk+0x2e>
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <md_rcc_get_sysclk+0x1e>
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d002      	beq.n	80011d6 <md_rcc_get_sysclk+0x22>
 80011d0:	e007      	b.n	80011e2 <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <md_rcc_get_sysclk+0x38>)
 80011d4:	e006      	b.n	80011e4 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <md_rcc_get_sysclk+0x38>)
 80011d8:	e004      	b.n	80011e4 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 80011da:	f000 f947 	bl	800146c <rcc_calculate_pll_sysclk>
 80011de:	4603      	mov	r3, r0
 80011e0:	e000      	b.n	80011e4 <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000
 80011ec:	007a1200 	.word	0x007a1200

080011f0 <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 80011f6:	f7ff ffdd 	bl	80011b4 <md_rcc_get_sysclk>
 80011fa:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 80011fc:	f000 f856 	bl	80012ac <rcc_get_ahb_prescaler>
 8001200:	4603      	mov	r3, r0
 8001202:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 800121e:	f7ff ffe7 	bl	80011f0 <md_rcc_get_hclk>
 8001222:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f896 	bl	8001358 <rcc_get_apb_prescaler>
 800122c:	4603      	mov	r3, r0
 800122e:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff ffe4 	bl	8001214 <md_rcc_get_pclk>
 800124c:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 800124e:	f000 f94b 	bl	80014e8 <rcc_get_adc_prescaler>
 8001252:	4603      	mov	r3, r0
 8001254:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 800126e:	f7ff ffa1 	bl	80011b4 <md_rcc_get_sysclk>
 8001272:	4602      	mov	r2, r0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8001278:	f7ff ffba 	bl	80011f0 <md_rcc_get_hclk>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff ffc6 	bl	8001214 <md_rcc_get_pclk>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff ffc0 	bl	8001214 <md_rcc_get_pclk>
 8001294:	4602      	mov	r2, r0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 800129a:	f7ff ffd1 	bl	8001240 <md_rcc_get_adcclk>
 800129e:	4602      	mov	r2, r0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	611a      	str	r2, [r3, #16]

  return;
 80012a4:	bf00      	nop
}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <rcc_get_ahb_prescaler+0xa8>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	d83f      	bhi.n	8001346 <rcc_get_ahb_prescaler+0x9a>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <rcc_get_ahb_prescaler+0x20>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	0800130d 	.word	0x0800130d
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	08001347 	.word	0x08001347
 80012e0:	08001347 	.word	0x08001347
 80012e4:	08001347 	.word	0x08001347
 80012e8:	08001347 	.word	0x08001347
 80012ec:	08001313 	.word	0x08001313
 80012f0:	08001319 	.word	0x08001319
 80012f4:	0800131f 	.word	0x0800131f
 80012f8:	08001325 	.word	0x08001325
 80012fc:	0800132b 	.word	0x0800132b
 8001300:	08001331 	.word	0x08001331
 8001304:	08001337 	.word	0x08001337
 8001308:	0800133f 	.word	0x0800133f
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
      break;
 8001310:	e019      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	607b      	str	r3, [r7, #4]
      break;
 8001316:	e016      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	607b      	str	r3, [r7, #4]
      break;
 800131c:	e013      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 800131e:	2308      	movs	r3, #8
 8001320:	607b      	str	r3, [r7, #4]
      break;
 8001322:	e010      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 8001324:	2310      	movs	r3, #16
 8001326:	607b      	str	r3, [r7, #4]
      break;
 8001328:	e00d      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	607b      	str	r3, [r7, #4]
      break;
 800132e:	e00a      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	607b      	str	r3, [r7, #4]
      break;
 8001334:	e007      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	607b      	str	r3, [r7, #4]
      break;
 800133c:	e003      	b.n	8001346 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 800133e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001342:	607b      	str	r3, [r7, #4]
      break;
 8001344:	bf00      	nop
  }

  return ahb_prescaler;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	b29b      	uxth	r3, r3
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000

08001358 <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d002      	beq.n	800136e <rcc_get_apb_prescaler+0x16>
 8001368:	2b02      	cmp	r3, #2
 800136a:	d008      	beq.n	800137e <rcc_get_apb_prescaler+0x26>
 800136c:	e00f      	b.n	800138e <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <rcc_get_apb_prescaler+0x90>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	72fb      	strb	r3, [r7, #11]
      break;
 800137c:	e007      	b.n	800138e <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <rcc_get_apb_prescaler+0x90>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	0adb      	lsrs	r3, r3, #11
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	72fb      	strb	r3, [r7, #11]
      break;
 800138c:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d822      	bhi.n	80013da <rcc_get_apb_prescaler+0x82>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <rcc_get_apb_prescaler+0x44>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013bd 	.word	0x080013bd
 80013a0:	080013db 	.word	0x080013db
 80013a4:	080013db 	.word	0x080013db
 80013a8:	080013db 	.word	0x080013db
 80013ac:	080013c3 	.word	0x080013c3
 80013b0:	080013c9 	.word	0x080013c9
 80013b4:	080013cf 	.word	0x080013cf
 80013b8:	080013d5 	.word	0x080013d5
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      break;
 80013c0:	e00b      	b.n	80013da <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
      break;
 80013c6:	e008      	b.n	80013da <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
      break;
 80013cc:	e005      	b.n	80013da <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 80013ce:	2308      	movs	r3, #8
 80013d0:	60fb      	str	r3, [r7, #12]
      break;
 80013d2:	e002      	b.n	80013da <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 80013d4:	2310      	movs	r3, #16
 80013d6:	60fb      	str	r3, [r7, #12]
      break;
 80013d8:	bf00      	nop
  }

  return apb_prescaler;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	b29b      	uxth	r3, r3
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000

080013ec <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <rcc_get_pll_multiplier+0x7c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	3b02      	subs	r3, #2
 8001404:	2b0b      	cmp	r3, #11
 8001406:	d829      	bhi.n	800145c <rcc_get_pll_multiplier+0x70>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <rcc_get_pll_multiplier+0x24>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001441 	.word	0x08001441
 8001414:	08001445 	.word	0x08001445
 8001418:	08001449 	.word	0x08001449
 800141c:	0800144d 	.word	0x0800144d
 8001420:	08001451 	.word	0x08001451
 8001424:	08001455 	.word	0x08001455
 8001428:	0800145d 	.word	0x0800145d
 800142c:	0800145d 	.word	0x0800145d
 8001430:	0800145d 	.word	0x0800145d
 8001434:	0800145d 	.word	0x0800145d
 8001438:	0800145d 	.word	0x0800145d
 800143c:	08001459 	.word	0x08001459
    case (RCC_PLL1_MUL_X4):
      return 4;
 8001440:	2304      	movs	r3, #4
 8001442:	e00c      	b.n	800145e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 8001444:	2305      	movs	r3, #5
 8001446:	e00a      	b.n	800145e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8001448:	2306      	movs	r3, #6
 800144a:	e008      	b.n	800145e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 800144c:	2307      	movs	r3, #7
 800144e:	e006      	b.n	800145e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 8001450:	2308      	movs	r3, #8
 8001452:	e004      	b.n	800145e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 8001454:	2309      	movs	r3, #9
 8001456:	e002      	b.n	800145e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8001458:	230d      	movs	r3, #13
 800145a:	e000      	b.n	800145e <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000

0800146c <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 8001472:	f7ff ffbb 	bl	80013ec <rcc_get_pll_multiplier>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <rcc_calculate_pll_sysclk+0x70>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <rcc_calculate_pll_sysclk+0x70>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <rcc_calculate_pll_sysclk+0x3a>
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d006      	beq.n	80014b2 <rcc_calculate_pll_sysclk+0x46>
 80014a4:	e00e      	b.n	80014c4 <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <rcc_calculate_pll_sysclk+0x74>)
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	60bb      	str	r3, [r7, #8]
      break;
 80014b0:	e008      	b.n	80014c4 <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <rcc_calculate_pll_sysclk+0x78>)
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	79fa      	ldrb	r2, [r7, #7]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	60bb      	str	r3, [r7, #8]
      break;
 80014c2:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b0d      	cmp	r3, #13
 80014c8:	d102      	bne.n	80014d0 <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 80014d0:	68bb      	ldr	r3, [r7, #8]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	003d0900 	.word	0x003d0900
 80014e4:	007a1200 	.word	0x007a1200

080014e8 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <rcc_get_adc_prescaler+0x4c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0b9b      	lsrs	r3, r3, #14
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d812      	bhi.n	8001528 <rcc_get_adc_prescaler+0x40>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <rcc_get_adc_prescaler+0x20>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001519 	.word	0x08001519
 800150c:	0800151d 	.word	0x0800151d
 8001510:	08001521 	.word	0x08001521
 8001514:	08001525 	.word	0x08001525
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 8001518:	2302      	movs	r3, #2
 800151a:	e006      	b.n	800152a <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 800151c:	2304      	movs	r3, #4
 800151e:	e004      	b.n	800152a <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 8001520:	2306      	movs	r3, #6
 8001522:	e002      	b.n	800152a <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 8001524:	2308      	movs	r3, #8
 8001526:	e000      	b.n	800152a <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 8001528:	2300      	movs	r3, #0

}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000

08001538 <md_spi_init>:
 * Init handlers gpio and clock
 * @param[*p_hSPIx] - can struct handler @spi_handler
 * @return - void
 */
void md_spi_init(spi_handle_t *p_hSPIx)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  spi_init_handlers();
 8001540:	f000 f922 	bl	8001788 <spi_init_handlers>
  spi_init_clock(p_hSPIx);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f93b 	bl	80017c0 <spi_init_clock>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <md_spi_init_basic>:
 * @param[spi_config] - basic configuration to work as master/slave full duplex
 * mode
 * @return - void
 */
void md_spi_init_basic(spi_handle_t *p_hSPIx, spi_config_t spi_config)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	e883 0006 	stmia.w	r3, {r1, r2}
  // init pins
  spi_init_gpio(p_hSPIx, spi_config);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f94e 	bl	8001808 <spi_init_gpio>

  // clock phase
  if (spi_config.clock_second_edge_capture == true)
 800156c:	7abb      	ldrb	r3, [r7, #10]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <md_spi_init_basic+0x32>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPHA);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <md_spi_init_basic+0x42>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPHA);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    }

  // clock polarity
  if (spi_config.clock_1_when_idle == true)
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <md_spi_init_basic+0x5a>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPOL);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0202 	orr.w	r2, r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e007      	b.n	80015bc <md_spi_init_basic+0x6a>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_CPOL);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0202 	bic.w	r2, r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
    }

  // data format
  if (spi_config.data_format_16bit == true)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <md_spi_init_basic+0x82>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_DFF);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <md_spi_init_basic+0x92>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_DFF);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	601a      	str	r2, [r3, #0]
    }

  // full duplex
  if (spi_config.full_duplex == true)
 80015e4:	797b      	ldrb	r3, [r7, #5]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00f      	beq.n	800160a <md_spi_init_basic+0xb8>
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_RXONLY);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_BIDIMODE);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001608:	601a      	str	r2, [r3, #0]
    {
      //!!! ADD SIMPELX !!!
    }

  // lsb/msb first
  if (spi_config.lsb_first == true)
 800160a:	7a3b      	ldrb	r3, [r7, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <md_spi_init_basic+0xd0>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_LSBFIRST);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e007      	b.n	8001632 <md_spi_init_basic+0xe0>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_LSBFIRST);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001630:	601a      	str	r2, [r3, #0]
    }

  // nss manangement
  if (spi_config.software_nss_management)
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d010      	beq.n	800165a <md_spi_init_basic+0x108>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001646:	601a      	str	r2, [r3, #0]
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSI);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e007      	b.n	800166a <md_spi_init_basic+0x118>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SSM);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001668:	601a      	str	r2, [r3, #0]
    }

  // master mode
  if (spi_config.master_mode == true)
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <md_spi_init_basic+0x130>
    {
      SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_MSTR);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0204 	orr.w	r2, r2, #4
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <md_spi_init_basic+0x140>
    }
  else
    {
      CLEAR_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_MSTR);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0204 	bic.w	r2, r2, #4
 8001690:	601a      	str	r2, [r3, #0]
    }

  // prescaler
  p_hSPIx->p_SPIx->CR1 &= ~(SPI_CR1_BR_Msk);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80016a0:	601a      	str	r2, [r3, #0]
  p_hSPIx->p_SPIx->CR1 |= (spi_config.prescaler << SPI_CR1_BR_Pos);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	7afb      	ldrb	r3, [r7, #11]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4619      	mov	r1, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016c4:	601a      	str	r2, [r3, #0]

  return;
 80016c6:	bf00      	nop
}
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <md_spi_tx_polling>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - void
 */
spi_error_t md_spi_tx_polling(spi_handle_t *p_hSPIx, uint8_t *p_data_buffer,
                              uint16_t data_lenght, uint32_t timeout_ms)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  uint32_t time_tick;
  uint16_t data_counter = data_lenght;
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	82fb      	strh	r3, [r7, #22]

  // enable SPI
  SET_BIT(p_hSPIx->p_SPIx->CR1, SPI_CR1_SPE);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f0:	601a      	str	r2, [r3, #0]

  // check if other transfer is not ongoing
  if (p_hSPIx->spi_tx_status != SPI_TX_IDLE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	7b5b      	ldrb	r3, [r3, #13]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <md_spi_tx_polling+0x36>
    {
      p_hSPIx->spi_error = SPI_ERR_TX_COLLISION;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	731a      	strb	r2, [r3, #12]
      return SPI_ERR_TX_COLLISION;
 8001700:	2301      	movs	r3, #1
 8001702:	e03d      	b.n	8001780 <md_spi_tx_polling+0xb2>
    }

  // change status of tx line
  p_hSPIx->spi_tx_status = SPI_TX_POLLING;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	735a      	strb	r2, [r3, #13]

  while (data_counter > 0)
 800170a:	e027      	b.n	800175c <md_spi_tx_polling+0x8e>
    {
      // waint until transmit buffer is empty
      time_tick = md_systick_get_tick();
 800170c:	f000 f92e 	bl	800196c <md_systick_get_tick>
 8001710:	6138      	str	r0, [r7, #16]
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 8001712:	e00f      	b.n	8001734 <md_spi_tx_polling+0x66>
        {
          if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001714:	f000 f92a 	bl	800196c <md_systick_get_tick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <md_spi_tx_polling+0x66>
            {
              p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2202      	movs	r2, #2
 8001728:	731a      	strb	r2, [r3, #12]
              p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	735a      	strb	r2, [r3, #13]
              return SPI_ERR_TIMEOUT_TXE;
 8001730:	2302      	movs	r3, #2
 8001732:	e025      	b.n	8001780 <md_spi_tx_polling+0xb2>
      while (!(p_hSPIx->p_SPIx->SR & SPI_SR_TXE))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0e8      	beq.n	8001714 <md_spi_tx_polling+0x46>
            }
        }

      // put data in data register
      p_hSPIx->p_SPIx->DR = p_data_buffer[data_lenght - data_counter];
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	8afb      	ldrh	r3, [r7, #22]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4413      	add	r3, r2
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60da      	str	r2, [r3, #12]
      data_counter--;
 8001756:	8afb      	ldrh	r3, [r7, #22]
 8001758:	3b01      	subs	r3, #1
 800175a:	82fb      	strh	r3, [r7, #22]
  while (data_counter > 0)
 800175c:	8afb      	ldrh	r3, [r7, #22]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1d4      	bne.n	800170c <md_spi_tx_polling+0x3e>
    }

  // wait for last byte transmission
  while (p_hSPIx->p_SPIx->SR & SPI_SR_BSY)
 8001762:	bf00      	nop
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f8      	bne.n	8001764 <md_spi_tx_polling+0x96>
    ;

  p_hSPIx->spi_error = SPI_ERR_TIMEOUT_TXE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2202      	movs	r2, #2
 8001776:	731a      	strb	r2, [r3, #12]
  p_hSPIx->spi_tx_status = SPI_TX_IDLE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	735a      	strb	r2, [r3, #13]
  return SPI_ERR_NOERR;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <spi_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
static void spi_init_handlers(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if MD_USING_SPI1
  hspi1.p_SPIx = SPI1;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <spi_init_handlers+0x30>)
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <spi_init_handlers+0x34>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.p_tx_buffer = NULL;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <spi_init_handlers+0x30>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  hspi1.tx_buffer_count = 0;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <spi_init_handlers+0x30>)
 800179a:	2200      	movs	r2, #0
 800179c:	80da      	strh	r2, [r3, #6]
  hspi1.spi_error = SPI_ERR_NOERR;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <spi_init_handlers+0x30>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	731a      	strb	r2, [r3, #12]
  hspi1.spi_rx_status = SPI_RX_IDLE;
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <spi_init_handlers+0x30>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	739a      	strb	r2, [r3, #14]
  hspi1.spi_tx_status = SPI_TX_IDLE;
 80017aa:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <spi_init_handlers+0x30>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	735a      	strb	r2, [r3, #13]
#endif // MD_USING_SPI1
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000044 	.word	0x20000044
 80017bc:	40013000 	.word	0x40013000

080017c0 <spi_init_clock>:
 * Starts clock for SPI and resets the peripheral
 * @param[*p_hSPIx] - spix base address
 * @return - void
 */
static void spi_init_clock(spi_handle_t *p_hSPIx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if (RCC->APB2ENR & RCC_APB2ENR_SPI1EN)
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <spi_init_clock+0x44>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d112      	bne.n	80017fa <spi_init_clock+0x3a>
    return;

  RCC_CLOCK_ENABLE_SPI1();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <spi_init_clock+0x44>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <spi_init_clock+0x44>)
 80017da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017de:	6193      	str	r3, [r2, #24]
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <spi_init_clock+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <spi_init_clock+0x44>)
 80017e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ea:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <spi_init_clock+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <spi_init_clock+0x44>)
 80017f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017f6:	60d3      	str	r3, [r2, #12]

  return;
 80017f8:	e000      	b.n	80017fc <spi_init_clock+0x3c>
    return;
 80017fa:	bf00      	nop
}
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000

08001808 <spi_init_gpio>:
 * Init gpio pins for spi - make sure that GPIO clock is enabled before
 * @param[*p_hSPIx] - spix base address
 * @return - void
 */
static void spi_init_gpio(spi_handle_t *p_hSPIx, spi_config_t spi_config)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	e883 0006 	stmia.w	r3, {r1, r2}
  // master mode
  if (spi_config.master_mode == true)
 8001816:	793b      	ldrb	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <spi_init_gpio+0x56>
    {
      // SCK - PA5
      md_gpio_configure_output(GPIOA, GPIO_PIN_5, GPIO_SPEED_10MHZ,
 800181c:	2302      	movs	r3, #2
 800181e:	2201      	movs	r2, #1
 8001820:	2105      	movs	r1, #5
 8001822:	4820      	ldr	r0, [pc, #128]	; (80018a4 <spi_init_gpio+0x9c>)
 8001824:	f7ff fa16 	bl	8000c54 <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (spi_config.full_duplex == true)
 8001828:	797b      	ldrb	r3, [r7, #5]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <spi_init_gpio+0x30>
        {
          // MISO - PA6 // REMAP PB4
          md_gpio_configure_input(GPIOA, GPIO_PIN_6, GPIO_INPUT_PULLUP);
 800182e:	2202      	movs	r2, #2
 8001830:	2106      	movs	r1, #6
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <spi_init_gpio+0x9c>)
 8001834:	f7ff fa69 	bl	8000d0a <md_gpio_configure_input>
        }

      // MOSI PA7 // REMAP PB5
      md_gpio_configure_output(GPIOA, GPIO_PIN_7, GPIO_SPEED_10MHZ,
 8001838:	2302      	movs	r3, #2
 800183a:	2201      	movs	r2, #1
 800183c:	2107      	movs	r1, #7
 800183e:	4819      	ldr	r0, [pc, #100]	; (80018a4 <spi_init_gpio+0x9c>)
 8001840:	f7ff fa08 	bl	8000c54 <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      if (spi_config.software_nss_management == false)
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d024      	beq.n	800189a <spi_init_gpio+0x92>
        {
          // NSS - PA4
          md_gpio_configure_output(GPIOA, GPIO_PIN_4, GPIO_SPEED_50MHZ,
 8001850:	2302      	movs	r3, #2
 8001852:	2203      	movs	r2, #3
 8001854:	2104      	movs	r1, #4
 8001856:	4813      	ldr	r0, [pc, #76]	; (80018a4 <spi_init_gpio+0x9c>)
 8001858:	f7ff f9fc 	bl	8000c54 <md_gpio_configure_output>
        {
          // NSS - PA4
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
        }
    }
}
 800185c:	e01d      	b.n	800189a <spi_init_gpio+0x92>
      md_gpio_configure_input(GPIOA, GPIO_PIN_5, GPIO_INPUT_FLOATING);
 800185e:	2201      	movs	r2, #1
 8001860:	2105      	movs	r1, #5
 8001862:	4810      	ldr	r0, [pc, #64]	; (80018a4 <spi_init_gpio+0x9c>)
 8001864:	f7ff fa51 	bl	8000d0a <md_gpio_configure_input>
      if (spi_config.full_duplex == true)
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <spi_init_gpio+0x70>
          md_gpio_configure_input(GPIOA, GPIO_PIN_7, GPIO_INPUT_PULLUP);
 800186e:	2202      	movs	r2, #2
 8001870:	2107      	movs	r1, #7
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <spi_init_gpio+0x9c>)
 8001874:	f7ff fa49 	bl	8000d0a <md_gpio_configure_input>
      md_gpio_configure_output(GPIOA, GPIO_PIN_6, GPIO_SPEED_10MHZ,
 8001878:	2302      	movs	r3, #2
 800187a:	2201      	movs	r2, #1
 800187c:	2106      	movs	r1, #6
 800187e:	4809      	ldr	r0, [pc, #36]	; (80018a4 <spi_init_gpio+0x9c>)
 8001880:	f7ff f9e8 	bl	8000c54 <md_gpio_configure_output>
      if (spi_config.software_nss_management == false)
 8001884:	79bb      	ldrb	r3, [r7, #6]
 8001886:	f083 0301 	eor.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <spi_init_gpio+0x92>
          md_gpio_configure_input(GPIOA, GPIO_PIN_4, GPIO_INPUT_PULLUP);
 8001890:	2202      	movs	r2, #2
 8001892:	2104      	movs	r1, #4
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <spi_init_gpio+0x9c>)
 8001896:	f7ff fa38 	bl	8000d0a <md_gpio_configure_input>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40010800 	.word	0x40010800

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ffc2 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fc8c 	bl	8001266 <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <md_systick_configure_ms+0x28>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ffcf 	bl	80018fc <SysTick_Config>

  return;
 800195e:	bf00      	nop
}
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <md_systick_get_tick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000020 	.word	0x20000020

08001980 <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 8001988:	f7ff fff0 	bl	800196c <md_systick_get_tick>
 800198c:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 800198e:	bf00      	nop
 8001990:	f7ff ffec 	bl	800196c <md_systick_get_tick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <md_systick_delay+0x10>
    ;
  return;
 80019a0:	bf00      	nop
}
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Handler+0x18>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <SysTick_Handler+0x18>)
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000020 	.word	0x20000020

080019c4 <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	88da      	ldrh	r2, [r3, #6]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	889b      	ldrh	r3, [r3, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20f      	bcs.n	8001a0a <usart_txe_callback+0x34>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	88d2      	ldrh	r2, [r2, #6]
 80019f2:	4413      	add	r3, r2
 80019f4:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	88db      	ldrh	r3, [r3, #6]
 8001a00:	3301      	adds	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	80da      	strh	r2, [r3, #6]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 8001a08:	e00b      	b.n	8001a22 <usart_txe_callback+0x4c>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a18:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	735a      	strb	r2, [r3, #13]
  return;
 8001a20:	bf00      	nop
}
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7b5b      	ldrb	r3, [r3, #13]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d105      	bne.n	8001a54 <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffbb 	bl	80019c4 <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffc1 	bl	80019d6 <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d019      	beq.n	8001a96 <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	88da      	ldrh	r2, [r3, #6]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d10a      	bne.n	8001a84 <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7fe ff52 	bl	8000918 <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a82:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a92:	60da      	str	r2, [r3, #12]
    }

  return;
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <USART1_IRQHandler+0x10>)
 8001aa6:	f7ff ffc0 	bl	8001a2a <usart_main_callback>
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000064 	.word	0x20000064

08001ab4 <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART2_IRQHandler+0x10>)
 8001aba:	f7ff ffb6 	bl	8001a2a <usart_main_callback>
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000054 	.word	0x20000054

08001ac8 <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* CAN EXAMPLES */
  //	example_can_init();

  /* SPI EXAMPLES */
  //  example_spi_transfer_message();
  example_spi_transfer_tft();
 8001acc:	f7fe feda 	bl	8000884 <example_spi_transfer_tft>

  for (;;)
 8001ad0:	e7fe      	b.n	8001ad0 <main+0x8>

08001ad2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <Reset_Handler>:
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopForever+0x2>)
 8001ae2:	4685      	mov	sp, r0
 8001ae4:	f7ff fff5 	bl	8001ad2 <SystemInit>
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <LoopForever+0x6>)
 8001aea:	490d      	ldr	r1, [pc, #52]	; (8001b20 <LoopForever+0xa>)
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <LoopForever+0xe>)
 8001aee:	2300      	movs	r3, #0
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:
 8001af2:	58d4      	ldr	r4, [r2, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:
 8001af8:	18c4      	adds	r4, r0, r3
 8001afa:	428c      	cmp	r4, r1
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <LoopForever+0x12>)
 8001b00:	4c0a      	ldr	r4, [pc, #40]	; (8001b2c <LoopForever+0x16>)
 8001b02:	2300      	movs	r3, #0
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:
 8001b0a:	42a2      	cmp	r2, r4
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>
 8001b0e:	f000 f811 	bl	8001b34 <__libc_init_array>
 8001b12:	f7ff ffd9 	bl	8001ac8 <main>

08001b16 <LoopForever>:
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
 8001b18:	20002800 	.word	0x20002800
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	08001e24 	.word	0x08001e24
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	20000074 	.word	0x20000074

08001b30 <ADC1_2_IRQHandler>:
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>
	...

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	2600      	movs	r6, #0
 8001b38:	4d0c      	ldr	r5, [pc, #48]	; (8001b6c <__libc_init_array+0x38>)
 8001b3a:	4c0d      	ldr	r4, [pc, #52]	; (8001b70 <__libc_init_array+0x3c>)
 8001b3c:	1b64      	subs	r4, r4, r5
 8001b3e:	10a4      	asrs	r4, r4, #2
 8001b40:	42a6      	cmp	r6, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	f000 f81a 	bl	8001b7c <_init>
 8001b48:	2600      	movs	r6, #0
 8001b4a:	4d0a      	ldr	r5, [pc, #40]	; (8001b74 <__libc_init_array+0x40>)
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	; (8001b78 <__libc_init_array+0x44>)
 8001b4e:	1b64      	subs	r4, r4, r5
 8001b50:	10a4      	asrs	r4, r4, #2
 8001b52:	42a6      	cmp	r6, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5c:	4798      	blx	r3
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b66:	4798      	blx	r3
 8001b68:	3601      	adds	r6, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001e1c 	.word	0x08001e1c
 8001b70:	08001e1c 	.word	0x08001e1c
 8001b74:	08001e1c 	.word	0x08001e1c
 8001b78:	08001e20 	.word	0x08001e20

08001b7c <_init>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	bf00      	nop
 8001b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b82:	bc08      	pop	{r3}
 8001b84:	469e      	mov	lr, r3
 8001b86:	4770      	bx	lr

08001b88 <_fini>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr
