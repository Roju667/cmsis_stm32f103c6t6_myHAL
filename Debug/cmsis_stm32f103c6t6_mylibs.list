
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dc8  08000dd0  00010dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dc8  08000dc8  00010dd0  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc8  08000dc8  00010dd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc8  08000dd0  00010dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000000  08000dd0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08000dd0  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f8b  00000000  00000000  00010df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001077  00000000  00000000  00014d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  00015e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  000160f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011044  00000000  00000000  00016338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003cf9  00000000  00000000  0002737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058b0b  00000000  00000000  0002b075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00083b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000924  00000000  00000000  00083bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000db0 	.word	0x08000db0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000db0 	.word	0x08000db0

08000170 <example_can_init>:
#include "stm32f103xx_gpio.h"

#include "gpio_example.h"

void example_can_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af02      	add	r7, sp, #8
	md_can_init_handlers();
 8000176:	f000 f871 	bl	800025c <md_can_init_handlers>
	md_can_init_clock(&hcan1);
 800017a:	480d      	ldr	r0, [pc, #52]	; (80001b0 <example_can_init+0x40>)
 800017c:	f000 f882 	bl	8000284 <md_can_init_clock>
	md_can_change_op_mode(&hcan1, CAN_OPMODE_INIT, 1000);
 8000180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000184:	2100      	movs	r1, #0
 8000186:	480a      	ldr	r0, [pc, #40]	; (80001b0 <example_can_init+0x40>)
 8000188:	f000 f8a2 	bl	80002d0 <md_can_change_op_mode>
	md_can_init_time_quanta(&hcan1, 2, CAN_TIME_QUANTA12, CAN_TIME_QUANTA2, CAN_TIME_QUANTA1);
 800018c:	2300      	movs	r3, #0
 800018e:	9300      	str	r3, [sp, #0]
 8000190:	2301      	movs	r3, #1
 8000192:	220b      	movs	r2, #11
 8000194:	2102      	movs	r1, #2
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <example_can_init+0x40>)
 8000198:	f000 f8c2 	bl	8000320 <md_can_init_time_quanta>
	md_can_change_op_mode(&hcan1, CAN_OPMODE_NORMAL, 1000);
 800019c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001a0:	2101      	movs	r1, #1
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <example_can_init+0x40>)
 80001a4:	f000 f894 	bl	80002d0 <md_can_change_op_mode>

	while(1)
	{
		example_heart_beat();
 80001a8:	f000 f804 	bl	80001b4 <example_heart_beat>
 80001ac:	e7fc      	b.n	80001a8 <example_can_init+0x38>
 80001ae:	bf00      	nop
 80001b0:	2000002c 	.word	0x2000002c

080001b4 <example_heart_beat>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  // init LED
  md_gpio_init_clock(GPIOC);
 80001b8:	480f      	ldr	r0, [pc, #60]	; (80001f8 <example_heart_beat+0x44>)
 80001ba:	f000 f9e5 	bl	8000588 <md_gpio_init_clock>
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 80001be:	2300      	movs	r3, #0
 80001c0:	2201      	movs	r2, #1
 80001c2:	210d      	movs	r1, #13
 80001c4:	480c      	ldr	r0, [pc, #48]	; (80001f8 <example_heart_beat+0x44>)
 80001c6:	f000 fa4b 	bl	8000660 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // configure systick as 1ms
  md_systick_configure_ms();
 80001ca:	f000 fcd3 	bl	8000b74 <md_systick_configure_ms>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	210d      	movs	r1, #13
 80001d2:	4809      	ldr	r0, [pc, #36]	; (80001f8 <example_heart_beat+0x44>)
 80001d4:	f000 fa9d 	bl	8000712 <md_gpio_write_pin>

  md_systick_delay(1000);
 80001d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001dc:	f000 fcea 	bl	8000bb4 <md_systick_delay>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	210d      	movs	r1, #13
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <example_heart_beat+0x44>)
 80001e6:	f000 fa94 	bl	8000712 <md_gpio_write_pin>

  md_systick_delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 fce1 	bl	8000bb4 <md_systick_delay>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40011000 	.word	0x40011000

080001fc <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <md_usart_tc_callback+0x48>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d107      	bne.n	800021e <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <md_usart_tc_callback+0x4c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <md_usart_tc_callback+0x4c>)
 8000216:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <md_usart_tc_callback+0x50>)
 800021a:	2201      	movs	r2, #1
 800021c:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <md_usart_tc_callback+0x54>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d107      	bne.n	8000238 <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <md_usart_tc_callback+0x58>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	4a09      	ldr	r2, [pc, #36]	; (8000254 <md_usart_tc_callback+0x58>)
 8000230:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <md_usart_tc_callback+0x5c>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
    }
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40013800 	.word	0x40013800
 8000248:	20000028 	.word	0x20000028
 800024c:	20000025 	.word	0x20000025
 8000250:	40004400 	.word	0x40004400
 8000254:	20000020 	.word	0x20000020
 8000258:	20000024 	.word	0x20000024

0800025c <md_can_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
void md_can_init_handlers(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  hcan1.p_CANx = CAN1;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <md_can_init_handlers+0x20>)
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <md_can_init_handlers+0x24>)
 8000264:	601a      	str	r2, [r3, #0]
  hcan1.can_error = CAN_ERR_NOERR;
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <md_can_init_handlers+0x20>)
 8000268:	2200      	movs	r2, #0
 800026a:	711a      	strb	r2, [r3, #4]
  hcan1.op_mode = CAN_OPMODE_SLEEP;
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <md_can_init_handlers+0x20>)
 800026e:	2202      	movs	r2, #2
 8000270:	715a      	strb	r2, [r3, #5]
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	2000002c 	.word	0x2000002c
 8000280:	40006400 	.word	0x40006400

08000284 <md_can_init_clock>:
 * Starts clock for CAN and resets the peripheral
 * @param[*p_hCANx] - can struct handler
 * @return - void
 */
void md_can_init_clock(can_handle_t *p_hCANx)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <md_can_init_clock+0x44>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d112      	bne.n	80002bc <md_can_init_clock+0x38>
    {
      RCC_CLOCK_ENABLE_CAN();
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <md_can_init_clock+0x48>)
 8000298:	69db      	ldr	r3, [r3, #28]
 800029a:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <md_can_init_clock+0x48>)
 800029c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002a0:	61d3      	str	r3, [r2, #28]
      SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <md_can_init_clock+0x48>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	4a09      	ldr	r2, [pc, #36]	; (80002cc <md_can_init_clock+0x48>)
 80002a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ac:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <md_can_init_clock+0x48>)
 80002b0:	691b      	ldr	r3, [r3, #16]
 80002b2:	4a06      	ldr	r2, [pc, #24]	; (80002cc <md_can_init_clock+0x48>)
 80002b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80002b8:	6113      	str	r3, [r2, #16]
    }
  return;
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
}
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40006400 	.word	0x40006400
 80002cc:	40021000 	.word	0x40021000

080002d0 <md_can_change_op_mode>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - can_error_t - can error status
 */
can_error_t md_can_change_op_mode(can_handle_t *p_hCANx, can_op_mode_t op_mode,
                                  uint32_t timeout_ms)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	460b      	mov	r3, r1
 80002da:	607a      	str	r2, [r7, #4]
 80002dc:	72fb      	strb	r3, [r7, #11]
  switch (op_mode)
 80002de:	7afb      	ldrb	r3, [r7, #11]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	d012      	beq.n	800030a <md_can_change_op_mode+0x3a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	dc16      	bgt.n	8000316 <md_can_change_op_mode+0x46>
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d002      	beq.n	80002f2 <md_can_change_op_mode+0x22>
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d006      	beq.n	80002fe <md_can_change_op_mode+0x2e>
 80002f0:	e011      	b.n	8000316 <md_can_change_op_mode+0x46>
    {
    case (CAN_OPMODE_INIT):
      {
        return can_enter_init_mode(p_hCANx, timeout_ms);
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f000 f863 	bl	80003c0 <can_enter_init_mode>
 80002fa:	4603      	mov	r3, r0
 80002fc:	e00c      	b.n	8000318 <md_can_change_op_mode+0x48>
      }
    case (CAN_OPMODE_NORMAL):
      {
        return can_enter_normal_mode(p_hCANx, timeout_ms);
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	68f8      	ldr	r0, [r7, #12]
 8000302:	f000 f8a9 	bl	8000458 <can_enter_normal_mode>
 8000306:	4603      	mov	r3, r0
 8000308:	e006      	b.n	8000318 <md_can_change_op_mode+0x48>
      }
    case (CAN_OPMODE_SLEEP):
      {
        return can_enter_sleep_mode(p_hCANx, timeout_ms);
 800030a:	6879      	ldr	r1, [r7, #4]
 800030c:	68f8      	ldr	r0, [r7, #12]
 800030e:	f000 f8ef 	bl	80004f0 <can_enter_sleep_mode>
 8000312:	4603      	mov	r3, r0
 8000314:	e000      	b.n	8000318 <md_can_change_op_mode+0x48>
      }
    default:
      return CAN_ERR_SWITCH_MODE;
 8000316:	2303      	movs	r3, #3
    }
}
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <md_can_init_time_quanta>:
 */
can_error_t md_can_init_time_quanta(can_handle_t *p_hCANx, uint16_t prescaler,
                                    can_time_quanta_t quanta_ts1,
                                    can_time_quanta_t quanta_ts2,
                                    can_time_quanta_t quanta_sjw)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	4608      	mov	r0, r1
 800032a:	4611      	mov	r1, r2
 800032c:	461a      	mov	r2, r3
 800032e:	4603      	mov	r3, r0
 8000330:	807b      	strh	r3, [r7, #2]
 8000332:	460b      	mov	r3, r1
 8000334:	707b      	strb	r3, [r7, #1]
 8000336:	4613      	mov	r3, r2
 8000338:	703b      	strb	r3, [r7, #0]
  // check if values are not exceeded
  if (quanta_ts2 > CAN_TIME_QUANTA8 || quanta_sjw > CAN_TIME_QUANTA4)
 800033a:	783b      	ldrb	r3, [r7, #0]
 800033c:	2b07      	cmp	r3, #7
 800033e:	d802      	bhi.n	8000346 <md_can_init_time_quanta+0x26>
 8000340:	7c3b      	ldrb	r3, [r7, #16]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d904      	bls.n	8000350 <md_can_init_time_quanta+0x30>
    {
      p_hCANx->can_error = CAN_ERR_INIT_QUANTA;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2204      	movs	r2, #4
 800034a:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_QUANTA;
 800034c:	2304      	movs	r3, #4
 800034e:	e032      	b.n	80003b6 <md_can_init_time_quanta+0x96>
    }

  if (prescaler > 511)
 8000350:	887b      	ldrh	r3, [r7, #2]
 8000352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000356:	d304      	bcc.n	8000362 <md_can_init_time_quanta+0x42>
    {
      p_hCANx->can_error = CAN_ERR_INIT_BAUD;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2205      	movs	r2, #5
 800035c:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_BAUD;
 800035e:	2305      	movs	r3, #5
 8000360:	e029      	b.n	80003b6 <md_can_init_time_quanta+0x96>
    }

  // init prescaler and quantas
  p_hCANx->p_CANx->BTR |= (prescaler << CAN_BTR_BRP_Pos);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	69d9      	ldr	r1, [r3, #28]
 8000368:	887a      	ldrh	r2, [r7, #2]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	430a      	orrs	r2, r1
 8000370:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_ts1 << CAN_BTR_TS1_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	69da      	ldr	r2, [r3, #28]
 8000378:	787b      	ldrb	r3, [r7, #1]
 800037a:	041b      	lsls	r3, r3, #16
 800037c:	4619      	mov	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	430a      	orrs	r2, r1
 8000384:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_ts2 << CAN_BTR_TS2_Pos);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	69da      	ldr	r2, [r3, #28]
 800038c:	783b      	ldrb	r3, [r7, #0]
 800038e:	051b      	lsls	r3, r3, #20
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	430a      	orrs	r2, r1
 8000398:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_sjw << CAN_BTR_SJW_Pos);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	69da      	ldr	r2, [r3, #28]
 80003a0:	7c3b      	ldrb	r3, [r7, #16]
 80003a2:	061b      	lsls	r3, r3, #24
 80003a4:	4619      	mov	r1, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	61da      	str	r2, [r3, #28]

  p_hCANx->can_error = CAN_ERR_NOERR;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2200      	movs	r2, #0
 80003b2:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <can_enter_init_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_init_mode(can_handle_t *p_hCANx,
                                       uint32_t timeout_ms)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f042 0201 	orr.w	r2, r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f022 0202 	bic.w	r2, r2, #2
 80003ec:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80003ee:	e00c      	b.n	800040a <can_enter_init_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80003f0:	f000 fbd6 	bl	8000ba0 <md_systick_get_tick>
 80003f4:	4602      	mov	r2, r0
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d204      	bcs.n	800040a <can_enter_init_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 8000406:	2301      	movs	r3, #1
 8000408:	e022      	b.n	8000450 <can_enter_init_mode+0x90>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0eb      	beq.n	80003f0 <can_enter_init_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8000418:	e00c      	b.n	8000434 <can_enter_init_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 800041a:	f000 fbc1 	bl	8000ba0 <md_systick_get_tick>
 800041e:	4602      	mov	r2, r0
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	429a      	cmp	r2, r3
 8000428:	d204      	bcs.n	8000434 <can_enter_init_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2202      	movs	r2, #2
 800042e:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8000430:	2302      	movs	r3, #2
 8000432:	e00d      	b.n	8000450 <can_enter_init_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1eb      	bne.n	800041a <can_enter_init_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_INIT;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2200      	movs	r2, #0
 800044c:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 800044e:	2300      	movs	r3, #0
}
 8000450:	4618      	mov	r0, r3
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <can_enter_normal_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_normal_mode(can_handle_t *p_hCANx,
                                         uint32_t timeout_ms)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f022 0201 	bic.w	r2, r2, #1
 8000474:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f022 0202 	bic.w	r2, r2, #2
 8000484:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8000486:	e00c      	b.n	80004a2 <can_enter_normal_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8000488:	f000 fb8a 	bl	8000ba0 <md_systick_get_tick>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	429a      	cmp	r2, r3
 8000496:	d204      	bcs.n	80004a2 <can_enter_normal_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2201      	movs	r2, #1
 800049c:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 800049e:	2301      	movs	r3, #1
 80004a0:	e022      	b.n	80004e8 <can_enter_normal_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1eb      	bne.n	8000488 <can_enter_normal_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80004b0:	e00c      	b.n	80004cc <can_enter_normal_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80004b2:	f000 fb75 	bl	8000ba0 <md_systick_get_tick>
 80004b6:	4602      	mov	r2, r0
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d204      	bcs.n	80004cc <can_enter_normal_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2202      	movs	r2, #2
 80004c6:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 80004c8:	2302      	movs	r3, #2
 80004ca:	e00d      	b.n	80004e8 <can_enter_normal_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1eb      	bne.n	80004b2 <can_enter_normal_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_NORMAL;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2201      	movs	r2, #1
 80004de:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <can_enter_sleep_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_sleep_mode(can_handle_t *p_hCANx,
                                        uint32_t timeout_ms)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f022 0201 	bic.w	r2, r2, #1
 800050c:	601a      	str	r2, [r3, #0]
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f042 0202 	orr.w	r2, r2, #2
 800051c:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 800051e:	e00c      	b.n	800053a <can_enter_sleep_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8000520:	f000 fb3e 	bl	8000ba0 <md_systick_get_tick>
 8000524:	4602      	mov	r2, r0
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	d204      	bcs.n	800053a <can_enter_sleep_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2201      	movs	r2, #1
 8000534:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 8000536:	2301      	movs	r3, #1
 8000538:	e022      	b.n	8000580 <can_enter_sleep_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1eb      	bne.n	8000520 <can_enter_sleep_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8000548:	e00c      	b.n	8000564 <can_enter_sleep_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 800054a:	f000 fb29 	bl	8000ba0 <md_systick_get_tick>
 800054e:	4602      	mov	r2, r0
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d204      	bcs.n	8000564 <can_enter_sleep_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2202      	movs	r2, #2
 800055e:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8000560:	2302      	movs	r3, #2
 8000562:	e00d      	b.n	8000580 <can_enter_sleep_mode+0x90>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0eb      	beq.n	800054a <can_enter_sleep_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_SLEEP;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2202      	movs	r2, #2
 8000576:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <md_gpio_init_clock+0xc8>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d112      	bne.n	80005be <md_gpio_init_clock+0x36>
    {
      RCC_CLOCK_ENABLE_IOPA();
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <md_gpio_init_clock+0xcc>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <md_gpio_init_clock+0xcc>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005b6:	f023 0304 	bic.w	r3, r3, #4
 80005ba:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 80005bc:	e043      	b.n	8000646 <md_gpio_init_clock+0xbe>
  else if (p_GPIOx == GPIOB)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a25      	ldr	r2, [pc, #148]	; (8000658 <md_gpio_init_clock+0xd0>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d112      	bne.n	80005ec <md_gpio_init_clock+0x64>
      RCC_CLOCK_ENABLE_IOPB();
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a22      	ldr	r2, [pc, #136]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005e4:	f023 0308 	bic.w	r3, r3, #8
 80005e8:	60d3      	str	r3, [r2, #12]
  return;
 80005ea:	e02c      	b.n	8000646 <md_gpio_init_clock+0xbe>
  else if (p_GPIOx == GPIOC)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <md_gpio_init_clock+0xd4>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d112      	bne.n	800061a <md_gpio_init_clock+0x92>
      RCC_CLOCK_ENABLE_IOPC();
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <md_gpio_init_clock+0xcc>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <md_gpio_init_clock+0xcc>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <md_gpio_init_clock+0xcc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <md_gpio_init_clock+0xcc>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <md_gpio_init_clock+0xcc>)
 8000612:	f023 0310 	bic.w	r3, r3, #16
 8000616:	60d3      	str	r3, [r2, #12]
  return;
 8000618:	e015      	b.n	8000646 <md_gpio_init_clock+0xbe>
  else if (p_GPIOx)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d012      	beq.n	8000646 <md_gpio_init_clock+0xbe>
      RCC_CLOCK_ENABLE_IOPD();
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <md_gpio_init_clock+0xcc>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <md_gpio_init_clock+0xcc>)
 8000626:	f043 0320 	orr.w	r3, r3, #32
 800062a:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <md_gpio_init_clock+0xcc>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <md_gpio_init_clock+0xcc>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <md_gpio_init_clock+0xcc>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <md_gpio_init_clock+0xcc>)
 800063e:	f023 0320 	bic.w	r3, r3, #32
 8000642:	60d3      	str	r3, [r2, #12]
  return;
 8000644:	bf00      	nop
 8000646:	bf00      	nop
}
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40010800 	.word	0x40010800
 8000654:	40021000 	.word	0x40021000
 8000658:	40010c00 	.word	0x40010c00
 800065c:	40011000 	.word	0x40011000

08000660 <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	4608      	mov	r0, r1
 800066a:	4611      	mov	r1, r2
 800066c:	461a      	mov	r2, r3
 800066e:	4603      	mov	r3, r0
 8000670:	70fb      	strb	r3, [r7, #3]
 8000672:	460b      	mov	r3, r1
 8000674:	70bb      	strb	r3, [r7, #2]
 8000676:	4613      	mov	r3, r2
 8000678:	707b      	strb	r3, [r7, #1]
  // choose between CRL/CRH
  if (pin_number < 8)
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	2b07      	cmp	r3, #7
 800067e:	d820      	bhi.n	80006c2 <md_gpio_configure_output+0x62>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	78fa      	ldrb	r2, [r7, #3]
 8000686:	0092      	lsls	r2, r2, #2
 8000688:	210f      	movs	r1, #15
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	401a      	ands	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	78b9      	ldrb	r1, [r7, #2]
 800069c:	78fa      	ldrb	r2, [r7, #3]
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	7879      	ldrb	r1, [r7, #1]
 80006b0:	78fa      	ldrb	r2, [r7, #3]
 80006b2:	0092      	lsls	r2, r2, #2
 80006b4:	3202      	adds	r2, #2
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 80006c0:	e023      	b.n	800070a <md_gpio_configure_output+0xaa>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	78fa      	ldrb	r2, [r7, #3]
 80006c8:	3a08      	subs	r2, #8
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	210f      	movs	r1, #15
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	401a      	ands	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	78b9      	ldrb	r1, [r7, #2]
 80006e0:	78fa      	ldrb	r2, [r7, #3]
 80006e2:	3a08      	subs	r2, #8
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	431a      	orrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	7879      	ldrb	r1, [r7, #1]
 80006f6:	78fa      	ldrb	r2, [r7, #3]
 80006f8:	3a08      	subs	r2, #8
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	3202      	adds	r2, #2
 80006fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000702:	431a      	orrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	605a      	str	r2, [r3, #4]
  return;
 8000708:	bf00      	nop
}
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]
 800071e:	4613      	mov	r3, r2
 8000720:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8000722:	78bb      	ldrb	r3, [r7, #2]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d107      	bne.n	8000738 <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2201      	movs	r2, #1
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000736:	e00a      	b.n	800074e <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8000738:	78bb      	ldrb	r3, [r7, #2]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d107      	bne.n	800074e <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2201      	movs	r2, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	615a      	str	r2, [r3, #20]
  return;
 800074c:	bf00      	nop
 800074e:	bf00      	nop
}
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <md_rcc_get_sysclk+0x34>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f003 030c 	and.w	r3, r3, #12
 8000764:	2b08      	cmp	r3, #8
 8000766:	d00a      	beq.n	800077e <md_rcc_get_sysclk+0x26>
 8000768:	2b08      	cmp	r3, #8
 800076a:	d80c      	bhi.n	8000786 <md_rcc_get_sysclk+0x2e>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <md_rcc_get_sysclk+0x1e>
 8000770:	2b04      	cmp	r3, #4
 8000772:	d002      	beq.n	800077a <md_rcc_get_sysclk+0x22>
 8000774:	e007      	b.n	8000786 <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <md_rcc_get_sysclk+0x38>)
 8000778:	e006      	b.n	8000788 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <md_rcc_get_sysclk+0x38>)
 800077c:	e004      	b.n	8000788 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 800077e:	f000 f947 	bl	8000a10 <rcc_calculate_pll_sysclk>
 8000782:	4603      	mov	r3, r0
 8000784:	e000      	b.n	8000788 <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	007a1200 	.word	0x007a1200

08000794 <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 800079a:	f7ff ffdd 	bl	8000758 <md_rcc_get_sysclk>
 800079e:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 80007a0:	f000 f856 	bl	8000850 <rcc_get_ahb_prescaler>
 80007a4:	4603      	mov	r3, r0
 80007a6:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 80007c2:	f7ff ffe7 	bl	8000794 <md_rcc_get_hclk>
 80007c6:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f896 	bl	80008fc <rcc_get_apb_prescaler>
 80007d0:	4603      	mov	r3, r0
 80007d2:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff ffe4 	bl	80007b8 <md_rcc_get_pclk>
 80007f0:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 80007f2:	f000 f94b 	bl	8000a8c <rcc_get_adc_prescaler>
 80007f6:	4603      	mov	r3, r0
 80007f8:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 8000812:	f7ff ffa1 	bl	8000758 <md_rcc_get_sysclk>
 8000816:	4602      	mov	r2, r0
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 800081c:	f7ff ffba 	bl	8000794 <md_rcc_get_hclk>
 8000820:	4602      	mov	r2, r0
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff ffc6 	bl	80007b8 <md_rcc_get_pclk>
 800082c:	4602      	mov	r2, r0
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ffc0 	bl	80007b8 <md_rcc_get_pclk>
 8000838:	4602      	mov	r2, r0
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 800083e:	f7ff ffd1 	bl	80007e4 <md_rcc_get_adcclk>
 8000842:	4602      	mov	r2, r0
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	611a      	str	r2, [r3, #16]

  return;
 8000848:	bf00      	nop
}
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <rcc_get_ahb_prescaler+0xa8>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b0f      	cmp	r3, #15
 8000868:	d83f      	bhi.n	80008ea <rcc_get_ahb_prescaler+0x9a>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <rcc_get_ahb_prescaler+0x20>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008eb 	.word	0x080008eb
 8000878:	080008eb 	.word	0x080008eb
 800087c:	080008eb 	.word	0x080008eb
 8000880:	080008eb 	.word	0x080008eb
 8000884:	080008eb 	.word	0x080008eb
 8000888:	080008eb 	.word	0x080008eb
 800088c:	080008eb 	.word	0x080008eb
 8000890:	080008b7 	.word	0x080008b7
 8000894:	080008bd 	.word	0x080008bd
 8000898:	080008c3 	.word	0x080008c3
 800089c:	080008c9 	.word	0x080008c9
 80008a0:	080008cf 	.word	0x080008cf
 80008a4:	080008d5 	.word	0x080008d5
 80008a8:	080008db 	.word	0x080008db
 80008ac:	080008e3 	.word	0x080008e3
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
      break;
 80008b4:	e019      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	607b      	str	r3, [r7, #4]
      break;
 80008ba:	e016      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	607b      	str	r3, [r7, #4]
      break;
 80008c0:	e013      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 80008c2:	2308      	movs	r3, #8
 80008c4:	607b      	str	r3, [r7, #4]
      break;
 80008c6:	e010      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 80008c8:	2310      	movs	r3, #16
 80008ca:	607b      	str	r3, [r7, #4]
      break;
 80008cc:	e00d      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	607b      	str	r3, [r7, #4]
      break;
 80008d2:	e00a      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	607b      	str	r3, [r7, #4]
      break;
 80008d8:	e007      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 80008da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008de:	607b      	str	r3, [r7, #4]
      break;
 80008e0:	e003      	b.n	80008ea <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 80008e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e6:	607b      	str	r3, [r7, #4]
      break;
 80008e8:	bf00      	nop
  }

  return ahb_prescaler;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	b29b      	uxth	r3, r3
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	40021000 	.word	0x40021000

080008fc <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d002      	beq.n	8000912 <rcc_get_apb_prescaler+0x16>
 800090c:	2b02      	cmp	r3, #2
 800090e:	d008      	beq.n	8000922 <rcc_get_apb_prescaler+0x26>
 8000910:	e00f      	b.n	8000932 <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <rcc_get_apb_prescaler+0x90>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	72fb      	strb	r3, [r7, #11]
      break;
 8000920:	e007      	b.n	8000932 <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <rcc_get_apb_prescaler+0x90>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	0adb      	lsrs	r3, r3, #11
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	72fb      	strb	r3, [r7, #11]
      break;
 8000930:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d822      	bhi.n	800097e <rcc_get_apb_prescaler+0x82>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <rcc_get_apb_prescaler+0x44>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000961 	.word	0x08000961
 8000944:	0800097f 	.word	0x0800097f
 8000948:	0800097f 	.word	0x0800097f
 800094c:	0800097f 	.word	0x0800097f
 8000950:	08000967 	.word	0x08000967
 8000954:	0800096d 	.word	0x0800096d
 8000958:	08000973 	.word	0x08000973
 800095c:	08000979 	.word	0x08000979
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
      break;
 8000964:	e00b      	b.n	800097e <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
      break;
 800096a:	e008      	b.n	800097e <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
      break;
 8000970:	e005      	b.n	800097e <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 8000972:	2308      	movs	r3, #8
 8000974:	60fb      	str	r3, [r7, #12]
      break;
 8000976:	e002      	b.n	800097e <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	60fb      	str	r3, [r7, #12]
      break;
 800097c:	bf00      	nop
  }

  return apb_prescaler;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	b29b      	uxth	r3, r3
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000

08000990 <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <rcc_get_pll_multiplier+0x7c>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	0c9b      	lsrs	r3, r3, #18
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	3b02      	subs	r3, #2
 80009a8:	2b0b      	cmp	r3, #11
 80009aa:	d829      	bhi.n	8000a00 <rcc_get_pll_multiplier+0x70>
 80009ac:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <rcc_get_pll_multiplier+0x24>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009e5 	.word	0x080009e5
 80009b8:	080009e9 	.word	0x080009e9
 80009bc:	080009ed 	.word	0x080009ed
 80009c0:	080009f1 	.word	0x080009f1
 80009c4:	080009f5 	.word	0x080009f5
 80009c8:	080009f9 	.word	0x080009f9
 80009cc:	08000a01 	.word	0x08000a01
 80009d0:	08000a01 	.word	0x08000a01
 80009d4:	08000a01 	.word	0x08000a01
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	08000a01 	.word	0x08000a01
 80009e0:	080009fd 	.word	0x080009fd
    case (RCC_PLL1_MUL_X4):
      return 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	e00c      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 80009e8:	2305      	movs	r3, #5
 80009ea:	e00a      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 80009ec:	2306      	movs	r3, #6
 80009ee:	e008      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	e006      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	e004      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 80009f8:	2309      	movs	r3, #9
 80009fa:	e002      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 80009fc:	230d      	movs	r3, #13
 80009fe:	e000      	b.n	8000a02 <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000

08000a10 <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 8000a16:	f7ff ffbb 	bl	8000990 <rcc_get_pll_multiplier>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <rcc_calculate_pll_sysclk+0x70>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <rcc_calculate_pll_sysclk+0x70>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <rcc_calculate_pll_sysclk+0x3a>
 8000a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a46:	d006      	beq.n	8000a56 <rcc_calculate_pll_sysclk+0x46>
 8000a48:	e00e      	b.n	8000a68 <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <rcc_calculate_pll_sysclk+0x74>)
 8000a4e:	fb02 f303 	mul.w	r3, r2, r3
 8000a52:	60bb      	str	r3, [r7, #8]
      break;
 8000a54:	e008      	b.n	8000a68 <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <rcc_calculate_pll_sysclk+0x78>)
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	60bb      	str	r3, [r7, #8]
      break;
 8000a66:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b0d      	cmp	r3, #13
 8000a6c:	d102      	bne.n	8000a74 <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 8000a74:	68bb      	ldr	r3, [r7, #8]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	003d0900 	.word	0x003d0900
 8000a88:	007a1200 	.word	0x007a1200

08000a8c <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <rcc_get_adc_prescaler+0x4c>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	0b9b      	lsrs	r3, r3, #14
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d812      	bhi.n	8000acc <rcc_get_adc_prescaler+0x40>
 8000aa6:	a201      	add	r2, pc, #4	; (adr r2, 8000aac <rcc_get_adc_prescaler+0x20>)
 8000aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aac:	08000abd 	.word	0x08000abd
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000ac5 	.word	0x08000ac5
 8000ab8:	08000ac9 	.word	0x08000ac9
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	e006      	b.n	8000ace <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e004      	b.n	8000ace <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 8000ac4:	2306      	movs	r3, #6
 8000ac6:	e002      	b.n	8000ace <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	e000      	b.n	8000ace <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 8000acc:	2300      	movs	r3, #0

}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ffc2 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fe44 	bl	800080a <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <md_systick_configure_ms+0x28>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	099b      	lsrs	r3, r3, #6
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffcf 	bl	8000b30 <SysTick_Config>

  return;
 8000b92:	bf00      	nop
}
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	10624dd3 	.word	0x10624dd3

08000ba0 <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <md_systick_get_tick+0x10>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	2000001c 	.word	0x2000001c

08000bb4 <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 8000bbc:	f7ff fff0 	bl	8000ba0 <md_systick_get_tick>
 8000bc0:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffec 	bl	8000ba0 <md_systick_get_tick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <md_systick_delay+0x10>
    ;
  return;
 8000bd4:	bf00      	nop
}
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Handler+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <SysTick_Handler+0x18>)
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2000001c 	.word	0x2000001c

08000bf8 <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	88da      	ldrh	r2, [r3, #6]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d20f      	bcs.n	8000c3e <usart_txe_callback+0x34>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	88d2      	ldrh	r2, [r2, #6]
 8000c26:	4413      	add	r3, r2
 8000c28:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	88db      	ldrh	r3, [r3, #6]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	80da      	strh	r2, [r3, #6]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 8000c3c:	e00b      	b.n	8000c56 <usart_txe_callback+0x4c>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c4c:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	735a      	strb	r2, [r3, #13]
  return;
 8000c54:	bf00      	nop
}
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d009      	beq.n	8000c88 <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7b5b      	ldrb	r3, [r3, #13]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d105      	bne.n	8000c88 <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffbb 	bl	8000bf8 <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffc1 	bl	8000c0a <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d019      	beq.n	8000cca <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	88da      	ldrh	r2, [r3, #6]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	889b      	ldrh	r3, [r3, #4]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d10a      	bne.n	8000cb8 <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff faaa 	bl	80001fc <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cb6:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cc6:	60da      	str	r2, [r3, #12]
    }

  return;
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
}
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USART1_IRQHandler+0x10>)
 8000cda:	f7ff ffc0 	bl	8000c5e <usart_main_callback>
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000044 	.word	0x20000044

08000ce8 <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <USART2_IRQHandler+0x10>)
 8000cee:	f7ff ffb6 	bl	8000c5e <usart_main_callback>
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000034 	.word	0x20000034

08000cfc <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  // example_usart_configure_baud()
  // example_usart_send_polling_2usarts();
  // example_usart_send_irq_2usarts();

	/* CAN EXAMPLES */
	example_can_init();
 8000d00:	f7ff fa36 	bl	8000170 <example_can_init>

  for (;;)
 8000d04:	e7fe      	b.n	8000d04 <main+0x8>

08000d06 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d18:	f7ff fff5 	bl	8000d06 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f000 f811 	bl	8000d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d46:	f7ff ffd9 	bl	8000cfc <main>

08000d4a <LoopForever>:

LoopForever:
    b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d58:	08000dd0 	.word	0x08000dd0
  ldr r2, =_sbss
 8000d5c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d60:	20000054 	.word	0x20000054

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <__libc_init_array>:
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	4d0c      	ldr	r5, [pc, #48]	; (8000da0 <__libc_init_array+0x38>)
 8000d6e:	4c0d      	ldr	r4, [pc, #52]	; (8000da4 <__libc_init_array+0x3c>)
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	10a4      	asrs	r4, r4, #2
 8000d74:	42a6      	cmp	r6, r4
 8000d76:	d109      	bne.n	8000d8c <__libc_init_array+0x24>
 8000d78:	f000 f81a 	bl	8000db0 <_init>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	4d0a      	ldr	r5, [pc, #40]	; (8000da8 <__libc_init_array+0x40>)
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <__libc_init_array+0x44>)
 8000d82:	1b64      	subs	r4, r4, r5
 8000d84:	10a4      	asrs	r4, r4, #2
 8000d86:	42a6      	cmp	r6, r4
 8000d88:	d105      	bne.n	8000d96 <__libc_init_array+0x2e>
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
 8000d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d90:	4798      	blx	r3
 8000d92:	3601      	adds	r6, #1
 8000d94:	e7ee      	b.n	8000d74 <__libc_init_array+0xc>
 8000d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d9a:	4798      	blx	r3
 8000d9c:	3601      	adds	r6, #1
 8000d9e:	e7f2      	b.n	8000d86 <__libc_init_array+0x1e>
 8000da0:	08000dc8 	.word	0x08000dc8
 8000da4:	08000dc8 	.word	0x08000dc8
 8000da8:	08000dc8 	.word	0x08000dc8
 8000dac:	08000dcc 	.word	0x08000dcc

08000db0 <_init>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr

08000dbc <_fini>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	bf00      	nop
 8000dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc2:	bc08      	pop	{r3}
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	4770      	bx	lr
