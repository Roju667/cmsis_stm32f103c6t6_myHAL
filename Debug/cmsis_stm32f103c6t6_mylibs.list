
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cdc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e1c  08001e1c  00011e24  2**0
                  CONTENTS
  4 .ARM          00000000  08001e1c  08001e1c  00011e24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e1c  08001e24  00011e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08001e24  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001e24  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011e24  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cdd  00000000  00000000  00011e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c6b  00000000  00000000  00014b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00015798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  000159d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010e41  00000000  00000000  00015b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f25  00000000  00000000  000269d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000585f7  00000000  00000000  000298f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00081eed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000098c  00000000  00000000  00081f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001df4 	.word	0x08001df4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001df4 	.word	0x08001df4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	3a01      	subs	r2, #1
 8000a66:	bf28      	it	cs
 8000a68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a6c:	d2ed      	bcs.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_fmul>:
 8000bc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd6:	ea92 0f0c 	teqne	r2, ip
 8000bda:	ea93 0f0c 	teqne	r3, ip
 8000bde:	d06f      	beq.n	8000cc0 <__aeabi_fmul+0xf8>
 8000be0:	441a      	add	r2, r3
 8000be2:	ea80 0c01 	eor.w	ip, r0, r1
 8000be6:	0240      	lsls	r0, r0, #9
 8000be8:	bf18      	it	ne
 8000bea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bee:	d01e      	beq.n	8000c2e <__aeabi_fmul+0x66>
 8000bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000c00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c08:	bf3e      	ittt	cc
 8000c0a:	0049      	lslcc	r1, r1, #1
 8000c0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c10:	005b      	lslcc	r3, r3, #1
 8000c12:	ea40 0001 	orr.w	r0, r0, r1
 8000c16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1a:	2afd      	cmp	r2, #253	; 0xfd
 8000c1c:	d81d      	bhi.n	8000c5a <__aeabi_fmul+0x92>
 8000c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	4770      	bx	lr
 8000c2e:	f090 0f00 	teq	r0, #0
 8000c32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	0249      	lsleq	r1, r1, #9
 8000c3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c42:	3a7f      	subs	r2, #127	; 0x7f
 8000c44:	bfc2      	ittt	gt
 8000c46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4e:	4770      	bxgt	lr
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	dc5d      	bgt.n	8000d18 <__aeabi_fmul+0x150>
 8000c5c:	f112 0f19 	cmn.w	r2, #25
 8000c60:	bfdc      	itt	le
 8000c62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c66:	4770      	bxle	lr
 8000c68:	f1c2 0200 	rsb	r2, r2, #0
 8000c6c:	0041      	lsls	r1, r0, #1
 8000c6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c72:	f1c2 0220 	rsb	r2, r2, #32
 8000c76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c7e:	f140 0000 	adc.w	r0, r0, #0
 8000c82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c86:	bf08      	it	eq
 8000c88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8c:	4770      	bx	lr
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0040      	lsleq	r0, r0, #1
 8000c9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c9e:	3a01      	subeq	r2, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xce>
 8000ca2:	ea40 000c 	orr.w	r0, r0, ip
 8000ca6:	f093 0f00 	teq	r3, #0
 8000caa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cae:	bf02      	ittt	eq
 8000cb0:	0049      	lsleq	r1, r1, #1
 8000cb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cb6:	3b01      	subeq	r3, #1
 8000cb8:	d0f9      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000cba:	ea41 010c 	orr.w	r1, r1, ip
 8000cbe:	e78f      	b.n	8000be0 <__aeabi_fmul+0x18>
 8000cc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc4:	ea92 0f0c 	teq	r2, ip
 8000cc8:	bf18      	it	ne
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d00a      	beq.n	8000ce6 <__aeabi_fmul+0x11e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1d8      	bne.n	8000c8e <__aeabi_fmul+0xc6>
 8000cdc:	ea80 0001 	eor.w	r0, r0, r1
 8000ce0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	bf17      	itett	ne
 8000cec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf0:	4608      	moveq	r0, r1
 8000cf2:	f091 0f00 	teqne	r1, #0
 8000cf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfa:	d014      	beq.n	8000d26 <__aeabi_fmul+0x15e>
 8000cfc:	ea92 0f0c 	teq	r2, ip
 8000d00:	d101      	bne.n	8000d06 <__aeabi_fmul+0x13e>
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	d10f      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d06:	ea93 0f0c 	teq	r3, ip
 8000d0a:	d103      	bne.n	8000d14 <__aeabi_fmul+0x14c>
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	bf18      	it	ne
 8000d10:	4608      	movne	r0, r1
 8000d12:	d108      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d14:	ea80 0001 	eor.w	r0, r0, r1
 8000d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fdiv>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d069      	beq.n	8000e1c <__aeabi_fdiv+0xec>
 8000d48:	eba2 0203 	sub.w	r2, r2, r3
 8000d4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_fdiv+0x98>
 8000d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf38      	it	cc
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d76:	428b      	cmp	r3, r1
 8000d78:	bf24      	itt	cs
 8000d7a:	1a5b      	subcs	r3, r3, r1
 8000d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d84:	bf24      	itt	cs
 8000d86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d92:	bf24      	itt	cs
 8000d94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da0:	bf24      	itt	cs
 8000da2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000da6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	bf18      	it	ne
 8000dae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db2:	d1e0      	bne.n	8000d76 <__aeabi_fdiv+0x46>
 8000db4:	2afd      	cmp	r2, #253	; 0xfd
 8000db6:	f63f af50 	bhi.w	8000c5a <__aeabi_fmul+0x92>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd0:	327f      	adds	r2, #127	; 0x7f
 8000dd2:	bfc2      	ittt	gt
 8000dd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ddc:	4770      	bxgt	lr
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	3a01      	subs	r2, #1
 8000de8:	e737      	b.n	8000c5a <__aeabi_fmul+0x92>
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xc2>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fdiv+0xda>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e795      	b.n	8000d48 <__aeabi_fdiv+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d108      	bne.n	8000e38 <__aeabi_fdiv+0x108>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	f47f af7d 	bne.w	8000d26 <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	f47f af70 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e776      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e38:	ea93 0f0c 	teq	r3, ip
 8000e3c:	d104      	bne.n	8000e48 <__aeabi_fdiv+0x118>
 8000e3e:	024b      	lsls	r3, r1, #9
 8000e40:	f43f af4c 	beq.w	8000cdc <__aeabi_fmul+0x114>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e76e      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1ca      	bne.n	8000dea <__aeabi_fdiv+0xba>
 8000e54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e58:	f47f af5c 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e60:	f47f af3c 	bne.w	8000cdc <__aeabi_fmul+0x114>
 8000e64:	e75f      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e66:	bf00      	nop

08000e68 <__gesf2>:
 8000e68:	f04f 3cff 	mov.w	ip, #4294967295
 8000e6c:	e006      	b.n	8000e7c <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__lesf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	e002      	b.n	8000e7c <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__cmpsf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e8c:	bf18      	it	ne
 8000e8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e92:	d011      	beq.n	8000eb8 <__cmpsf2+0x40>
 8000e94:	b001      	add	sp, #4
 8000e96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9a:	bf18      	it	ne
 8000e9c:	ea90 0f01 	teqne	r0, r1
 8000ea0:	bf58      	it	pl
 8000ea2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ea6:	bf88      	it	hi
 8000ea8:	17c8      	asrhi	r0, r1, #31
 8000eaa:	bf38      	it	cc
 8000eac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb0:	bf18      	it	ne
 8000eb2:	f040 0001 	orrne.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	d102      	bne.n	8000ec4 <__cmpsf2+0x4c>
 8000ebe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec2:	d105      	bne.n	8000ed0 <__cmpsf2+0x58>
 8000ec4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec8:	d1e4      	bne.n	8000e94 <__cmpsf2+0x1c>
 8000eca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ece:	d0e1      	beq.n	8000e94 <__cmpsf2+0x1c>
 8000ed0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_cfrcmple>:
 8000ed8:	4684      	mov	ip, r0
 8000eda:	4608      	mov	r0, r1
 8000edc:	4661      	mov	r1, ip
 8000ede:	e7ff      	b.n	8000ee0 <__aeabi_cfcmpeq>

08000ee0 <__aeabi_cfcmpeq>:
 8000ee0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee2:	f7ff ffc9 	bl	8000e78 <__cmpsf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	bf48      	it	mi
 8000eea:	f110 0f00 	cmnmi.w	r0, #0
 8000eee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef0 <__aeabi_fcmpeq>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff fff4 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000ef8:	bf0c      	ite	eq
 8000efa:	2001      	moveq	r0, #1
 8000efc:	2000      	movne	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_fcmplt>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffea 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f0c:	bf34      	ite	cc
 8000f0e:	2001      	movcc	r0, #1
 8000f10:	2000      	movcs	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmple>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffe0 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f20:	bf94      	ite	ls
 8000f22:	2001      	movls	r0, #1
 8000f24:	2000      	movhi	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmpge>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffd2 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f34:	bf94      	ite	ls
 8000f36:	2001      	movls	r0, #1
 8000f38:	2000      	movhi	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmpgt>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffc8 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f48:	bf34      	ite	cc
 8000f4a:	2001      	movcc	r0, #1
 8000f4c:	2000      	movcs	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_f2uiz>:
 8000f54:	0042      	lsls	r2, r0, #1
 8000f56:	d20e      	bcs.n	8000f76 <__aeabi_f2uiz+0x22>
 8000f58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f5c:	d30b      	bcc.n	8000f76 <__aeabi_f2uiz+0x22>
 8000f5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f66:	d409      	bmi.n	8000f7c <__aeabi_f2uiz+0x28>
 8000f68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f70:	fa23 f002 	lsr.w	r0, r3, r2
 8000f74:	4770      	bx	lr
 8000f76:	f04f 0000 	mov.w	r0, #0
 8000f7a:	4770      	bx	lr
 8000f7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f80:	d101      	bne.n	8000f86 <__aeabi_f2uiz+0x32>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	d102      	bne.n	8000f8c <__aeabi_f2uiz+0x38>
 8000f86:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8a:	4770      	bx	lr
 8000f8c:	f04f 0000 	mov.w	r0, #0
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <example_heart_beat>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  // init LED
  md_gpio_init_clock(GPIOC);
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <example_heart_beat+0x44>)
 8000f9a:	f000 f855 	bl	8001048 <md_gpio_init_clock>
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	210d      	movs	r1, #13
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <example_heart_beat+0x44>)
 8000fa6:	f000 f8bb 	bl	8001120 <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // configure systick as 1ms
  md_systick_configure_ms();
 8000faa:	f000 fc71 	bl	8001890 <md_systick_configure_ms>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	210d      	movs	r1, #13
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <example_heart_beat+0x44>)
 8000fb4:	f000 f97d 	bl	80012b2 <md_gpio_write_pin>

  md_systick_delay(1000);
 8000fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbc:	f000 fc88 	bl	80018d0 <md_systick_delay>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	210d      	movs	r1, #13
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <example_heart_beat+0x44>)
 8000fc6:	f000 f974 	bl	80012b2 <md_gpio_write_pin>

  md_systick_delay(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fce:	f000 fc7f 	bl	80018d0 <md_systick_delay>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40011000 	.word	0x40011000

08000fdc <example_usart_configure_baud>:
#include "stm32f103xx_usart.h"
#include "stm32f103xx_gpio.h"
#include "stm32f103xx_rcc.h"

void example_usart_configure_baud(void)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
	// configure pll baud rate
	  md_rcc_configure_prescalers(RCC_AHB_PRESCALER_NODIV, RCC_APB_PRESCALER_DIV2,
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fa0d 	bl	8001408 <md_rcc_configure_prescalers>
	                              RCC_APB_PRESCALER_NODIV, RCC_ADC_PRESCALER_DIV6);

	  md_rcc_configure_sysclk(RCC_SYSCLK_SOURCE_PLL, RCC_PLL_SOURCE_HSE,
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f000 f97f 	bl	80012f8 <md_rcc_configure_sysclk>
	                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);

	  //init usart

	  md_usart_init_handlers();
 8000ffa:	f000 fc8b 	bl	8001914 <md_usart_init_handlers>

	  md_usart_init_clock(&husart1);
 8000ffe:	4810      	ldr	r0, [pc, #64]	; (8001040 <example_usart_configure_baud+0x64>)
 8001000:	f000 fca4 	bl	800194c <md_usart_init_clock>

	  md_usart_init_gpio(&husart1);
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <example_usart_configure_baud+0x64>)
 8001006:	f000 fce1 	bl	80019cc <md_usart_init_gpio>

          md_usart_init_basic(&husart1, USART_WORD_LENGHT_8BIT,
 800100a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <example_usart_configure_baud+0x64>)
 8001014:	f000 fd90 	bl	8001b38 <md_usart_init_basic>
                              USART_STOP_BITS_1, 9600);

          uint8_t databuffer[16] = "Test 123123 \n\r";
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <example_usart_configure_baud+0x68>)
 800101a:	463c      	mov	r4, r7
 800101c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101e:	c407      	stmia	r4!, {r0, r1, r2}
 8001020:	8023      	strh	r3, [r4, #0]
 8001022:	3402      	adds	r4, #2
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	7023      	strb	r3, [r4, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
          example_heart_beat();
 800102c:	f7ff ffb2 	bl	8000f94 <example_heart_beat>
          md_usart_tx_polling(&husart1, databuffer, 16, 10000);
 8001030:	4639      	mov	r1, r7
 8001032:	f242 7310 	movw	r3, #10000	; 0x2710
 8001036:	2210      	movs	r2, #16
 8001038:	4801      	ldr	r0, [pc, #4]	; (8001040 <example_usart_configure_baud+0x64>)
 800103a:	f000 fdb2 	bl	8001ba2 <md_usart_tx_polling>
          example_heart_beat();
 800103e:	e7f5      	b.n	800102c <example_usart_configure_baud+0x50>
 8001040:	20000020 	.word	0x20000020
 8001044:	08001e0c 	.word	0x08001e0c

08001048 <md_gpio_init_clock>:
/*
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a2f      	ldr	r2, [pc, #188]	; (8001110 <md_gpio_init_clock+0xc8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d112      	bne.n	800107e <md_gpio_init_clock+0x36>
    RCC_CLOCK_ENABLE_IOPA();
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <md_gpio_init_clock+0xcc>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <md_gpio_init_clock+0xcc>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
    SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <md_gpio_init_clock+0xcc>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <md_gpio_init_clock+0xcc>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <md_gpio_init_clock+0xcc>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <md_gpio_init_clock+0xcc>)
 8001076:	f023 0304 	bic.w	r3, r3, #4
 800107a:	60d3      	str	r3, [r2, #12]
    RCC_CLOCK_ENABLE_IOPD();
    SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
  }

  return;
 800107c:	e043      	b.n	8001106 <md_gpio_init_clock+0xbe>
  } else if (p_GPIOx == GPIOB) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <md_gpio_init_clock+0xd0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d112      	bne.n	80010ac <md_gpio_init_clock+0x64>
    RCC_CLOCK_ENABLE_IOPB();
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <md_gpio_init_clock+0xcc>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <md_gpio_init_clock+0xcc>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6193      	str	r3, [r2, #24]
    SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <md_gpio_init_clock+0xcc>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <md_gpio_init_clock+0xcc>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010a4:	f023 0308 	bic.w	r3, r3, #8
 80010a8:	60d3      	str	r3, [r2, #12]
  return;
 80010aa:	e02c      	b.n	8001106 <md_gpio_init_clock+0xbe>
  } else if (p_GPIOx == GPIOC) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a1b      	ldr	r2, [pc, #108]	; (800111c <md_gpio_init_clock+0xd4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d112      	bne.n	80010da <md_gpio_init_clock+0x92>
    RCC_CLOCK_ENABLE_IOPC();
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6193      	str	r3, [r2, #24]
    SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4a10      	ldr	r2, [pc, #64]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010d2:	f023 0310 	bic.w	r3, r3, #16
 80010d6:	60d3      	str	r3, [r2, #12]
  return;
 80010d8:	e015      	b.n	8001106 <md_gpio_init_clock+0xbe>
  } else if (p_GPIOx) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d012      	beq.n	8001106 <md_gpio_init_clock+0xbe>
    RCC_CLOCK_ENABLE_IOPD();
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	6193      	str	r3, [r2, #24]
    SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <md_gpio_init_clock+0xcc>)
 80010fe:	f023 0320 	bic.w	r3, r3, #32
 8001102:	60d3      	str	r3, [r2, #12]
  return;
 8001104:	bf00      	nop
 8001106:	bf00      	nop
}
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010800 	.word	0x40010800
 8001114:	40021000 	.word	0x40021000
 8001118:	40010c00 	.word	0x40010c00
 800111c:	40011000 	.word	0x40011000

08001120 <md_gpio_configure_output>:
 * @return - void
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4603      	mov	r3, r0
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	460b      	mov	r3, r1
 8001134:	70bb      	strb	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	707b      	strb	r3, [r7, #1]
  // choose between CRL/CRH
  if (pin_number < 8) {
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d820      	bhi.n	8001182 <md_gpio_configure_output+0x62>
    // clear config and mode bits
    p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	210f      	movs	r1, #15
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	43d2      	mvns	r2, r2
 8001150:	401a      	ands	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]

    // set mode and config
    p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	78b9      	ldrb	r1, [r7, #2]
 800115c:	78fa      	ldrb	r2, [r7, #3]
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
    p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	7879      	ldrb	r1, [r7, #1]
 8001170:	78fa      	ldrb	r2, [r7, #3]
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	3202      	adds	r2, #2
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	601a      	str	r2, [r3, #0]
    // set mode and config
    p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
    p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
  }

  return;
 8001180:	e023      	b.n	80011ca <md_gpio_configure_output+0xaa>
    p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	3a08      	subs	r2, #8
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	210f      	movs	r1, #15
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	43d2      	mvns	r2, r2
 8001194:	401a      	ands	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	605a      	str	r2, [r3, #4]
    p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	78b9      	ldrb	r1, [r7, #2]
 80011a0:	78fa      	ldrb	r2, [r7, #3]
 80011a2:	3a08      	subs	r2, #8
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	605a      	str	r2, [r3, #4]
    p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	7879      	ldrb	r1, [r7, #1]
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	3a08      	subs	r2, #8
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	3202      	adds	r2, #2
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	605a      	str	r2, [r3, #4]
  return;
 80011c8:	bf00      	nop
}
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <md_gpio_configure_input>:
 * @param[input_config] - input config enum @gpio_input_config
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config) {
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	70fb      	strb	r3, [r7, #3]
 80011de:	4613      	mov	r3, r2
 80011e0:	70bb      	strb	r3, [r7, #2]
  // choose between CRL/CRH
  if (pin_number < 8) {
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d825      	bhi.n	8001234 <md_gpio_configure_input+0x62>
    // clear config and mode bits
    p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	210f      	movs	r1, #15
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	43d2      	mvns	r2, r2
 80011f8:	401a      	ands	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]

    // set config
    if (input_config > GPIO_INPUT_FLOATING) {
 80011fe:	78bb      	ldrb	r3, [r7, #2]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d90b      	bls.n	800121c <md_gpio_configure_input+0x4a>
      p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	78fa      	ldrb	r2, [r7, #3]
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	3202      	adds	r2, #2
 800120e:	2102      	movs	r1, #2
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e033      	b.n	8001284 <md_gpio_configure_input+0xb2>
    } else {
      p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	78b9      	ldrb	r1, [r7, #2]
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	3202      	adds	r2, #2
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e027      	b.n	8001284 <md_gpio_configure_input+0xb2>
    }

  } else {
    // clear config and mode bits
    p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	3a08      	subs	r2, #8
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	210f      	movs	r1, #15
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	43d2      	mvns	r2, r2
 8001246:	401a      	ands	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	605a      	str	r2, [r3, #4]

    // set config
    if (input_config > GPIO_INPUT_FLOATING) {
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d90c      	bls.n	800126c <md_gpio_configure_input+0x9a>
      p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	78fa      	ldrb	r2, [r7, #3]
 8001258:	3a08      	subs	r2, #8
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	3202      	adds	r2, #2
 800125e:	2102      	movs	r1, #2
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	e00b      	b.n	8001284 <md_gpio_configure_input+0xb2>
    } else {
      p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	78b9      	ldrb	r1, [r7, #2]
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	3a08      	subs	r2, #8
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	3202      	adds	r2, #2
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	605a      	str	r2, [r3, #4]
    }
  }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP) {
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <md_gpio_configure_input+0xc8>
    p_GPIOx->BSRR = (0x01 << pin_number);
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	2201      	movs	r2, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	611a      	str	r2, [r3, #16]
  } else {
    p_GPIOx->BRR = (0x01 << pin_number);
  }

  return;
 8001298:	e007      	b.n	80012aa <md_gpio_configure_input+0xd8>
    p_GPIOx->BRR = (0x01 << pin_number);
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	615a      	str	r2, [r3, #20]
  return;
 80012a8:	bf00      	nop
}
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <md_gpio_write_pin>:
 * @param[pin_number] - pin number enum @gpio_pin_number
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value) {
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET) {
 80012c2:	78bb      	ldrb	r3, [r7, #2]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d107      	bne.n	80012d8 <md_gpio_write_pin+0x26>
    p_GPIOx->BSRR = (0x01 << pin_number);
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2201      	movs	r2, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	611a      	str	r2, [r3, #16]
  } else if (value == GPIO_PIN_RESET) {
    p_GPIOx->BRR = (0x01 << pin_number);
  }

  return;
 80012d6:	e00a      	b.n	80012ee <md_gpio_write_pin+0x3c>
  } else if (value == GPIO_PIN_RESET) {
 80012d8:	78bb      	ldrb	r3, [r7, #2]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <md_gpio_write_pin+0x3c>
    p_GPIOx->BRR = (0x01 << pin_number);
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	2201      	movs	r2, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]
  return;
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
}
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <md_rcc_configure_sysclk>:
 * @param[hse_div] - pll1 hse division factor @rcc_hse_div
 * @return - void
 */
void md_rcc_configure_sysclk(rcc_sysclk_source_t sysclk_source,
                             rcc_pll_source_t pll_source,
                             rcc_pll1_mul_t pll1_mul, rcc_hse_div_t hse_div) {
 80012f8:	b490      	push	{r4, r7}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4604      	mov	r4, r0
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4623      	mov	r3, r4
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	4603      	mov	r3, r0
 800130c:	71bb      	strb	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	717b      	strb	r3, [r7, #5]
 8001312:	4613      	mov	r3, r2
 8001314:	713b      	strb	r3, [r7, #4]
  // enable HSI
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSI ||
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <md_rcc_configure_sysclk+0x2a>
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <md_rcc_configure_sysclk+0x44>
      pll_source == RCC_PLL_SOURCE_HSI) {
    SET_BIT(RCC->CR, RCC_CR_HSION);
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a37      	ldr	r2, [pc, #220]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]
    // wait until HSI is ready
    while (!(RCC->CR & RCC_CR_HSIRDY))
 800132e:	bf00      	nop
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f9      	beq.n	8001330 <md_rcc_configure_sysclk+0x38>
      ;
  }

  // enable HSE
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSE ||
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <md_rcc_configure_sysclk+0x50>
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d10c      	bne.n	8001362 <md_rcc_configure_sysclk+0x6a>
      pll_source == RCC_PLL_SOURCE_HSE) {
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001348:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
    // wait until HSE is ready
    while (!(RCC->CR & RCC_CR_HSERDY))
 8001354:	bf00      	nop
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f9      	beq.n	8001356 <md_rcc_configure_sysclk+0x5e>
      ;
  }

  // configure PLL
  if (sysclk_source == RCC_SYSCLK_SOURCE_PLL) {
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d139      	bne.n	80013dc <md_rcc_configure_sysclk+0xe4>
    // choose PLL source and multiplier
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a25      	ldr	r2, [pc, #148]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll_source << RCC_CFGR_PLLSRC_Pos);
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	79ba      	ldrb	r2, [r7, #6]
 800137a:	0412      	lsls	r2, r2, #16
 800137c:	4611      	mov	r1, r2
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001380:	430b      	orrs	r3, r1
 8001382:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 800138a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800138e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll1_mul << RCC_CFGR_PLLMULL_Pos);
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	797a      	ldrb	r2, [r7, #5]
 8001396:	0492      	lsls	r2, r2, #18
 8001398:	4611      	mov	r1, r2
 800139a:	4a1a      	ldr	r2, [pc, #104]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 800139c:	430b      	orrs	r3, r1
 800139e:	6053      	str	r3, [r2, #4]

    // if source is HSE choose prediv
    if (pll_source == RCC_PLL_SOURCE_HSE) {
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10d      	bne.n	80013c2 <md_rcc_configure_sysclk+0xca>
      RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80013b0:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (hse_div << RCC_CFGR_PLLXTPRE_Pos);
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	793a      	ldrb	r2, [r7, #4]
 80013b8:	0452      	lsls	r2, r2, #17
 80013ba:	4611      	mov	r1, r2
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013be:	430b      	orrs	r3, r1
 80013c0:	6053      	str	r3, [r2, #4]
    }

    // enable PLL
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013cc:	6013      	str	r3, [r2, #0]
    // wait until PLL is ready
    while (!(RCC->CR & RCC_CR_PLLRDY))
 80013ce:	bf00      	nop
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f9      	beq.n	80013d0 <md_rcc_configure_sysclk+0xd8>
      ;
  }

  // change sysclk source
  RCC->CFGR |= (sysclk_source << RCC_CFGR_SW_Pos);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]

   //wait until sys clock is switched
   while (!(RCC->CFGR & (sysclk_source << 2U)))
 80013e8:	bf00      	nop
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <md_rcc_configure_sysclk+0x10c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f8      	beq.n	80013ea <md_rcc_configure_sysclk+0xf2>
      ;

  return;
 80013f8:	bf00      	nop
}
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc90      	pop	{r4, r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <md_rcc_configure_prescalers>:
 * @return - void
 */
void md_rcc_configure_prescalers(rcc_ahb_prescaler_t ahb_prescaler,
                                 rcc_apb_prescaler_t apb1_prescaler,
                                 rcc_apb_prescaler_t apb2_prescaler,
                                 rcc_adc_prescaler_t adc_prescaler) {
 8001408:	b490      	push	{r4, r7}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	4603      	mov	r3, r0
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	460b      	mov	r3, r1
 8001420:	717b      	strb	r3, [r7, #5]
 8001422:	4613      	mov	r3, r2
 8001424:	713b      	strb	r3, [r7, #4]
  // configure ahb prescaler
  RCC->CFGR |= (ahb_prescaler << RCC_CFGR_HPRE_Pos);
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	4611      	mov	r1, r2
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001432:	430b      	orrs	r3, r1
 8001434:	6053      	str	r3, [r2, #4]

  // configure apb1/apb2 prescalers
  RCC->CFGR |= (apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	79ba      	ldrb	r2, [r7, #6]
 800143c:	0212      	lsls	r2, r2, #8
 800143e:	4611      	mov	r1, r2
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001442:	430b      	orrs	r3, r1
 8001444:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	797a      	ldrb	r2, [r7, #5]
 800144c:	02d2      	lsls	r2, r2, #11
 800144e:	4611      	mov	r1, r2
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001452:	430b      	orrs	r3, r1
 8001454:	6053      	str	r3, [r2, #4]

  // configure adc prescaler
  RCC->CFGR |= (adc_prescaler << RCC_CFGR_ADCPRE_Pos);
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	793a      	ldrb	r2, [r7, #4]
 800145c:	0392      	lsls	r2, r2, #14
 800145e:	4611      	mov	r1, r2
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <md_rcc_configure_prescalers+0x68>)
 8001462:	430b      	orrs	r3, r1
 8001464:	6053      	str	r3, [r2, #4]

  return;
 8001466:	bf00      	nop
}
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bc90      	pop	{r4, r7}
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000

08001474 <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <md_rcc_get_sysclk+0x34>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d00a      	beq.n	800149a <md_rcc_get_sysclk+0x26>
 8001484:	2b08      	cmp	r3, #8
 8001486:	d80c      	bhi.n	80014a2 <md_rcc_get_sysclk+0x2e>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <md_rcc_get_sysclk+0x1e>
 800148c:	2b04      	cmp	r3, #4
 800148e:	d002      	beq.n	8001496 <md_rcc_get_sysclk+0x22>
 8001490:	e007      	b.n	80014a2 <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <md_rcc_get_sysclk+0x38>)
 8001494:	e006      	b.n	80014a4 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <md_rcc_get_sysclk+0x38>)
 8001498:	e004      	b.n	80014a4 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 800149a:	f000 f947 	bl	800172c <rcc_calculate_pll_sysclk>
 800149e:	4603      	mov	r3, r0
 80014a0:	e000      	b.n	80014a4 <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	007a1200 	.word	0x007a1200

080014b0 <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 80014b6:	f7ff ffdd 	bl	8001474 <md_rcc_get_sysclk>
 80014ba:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 80014bc:	f000 f856 	bl	800156c <rcc_get_ahb_prescaler>
 80014c0:	4603      	mov	r3, r0
 80014c2:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 80014de:	f7ff ffe7 	bl	80014b0 <md_rcc_get_hclk>
 80014e2:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f896 	bl	8001618 <rcc_get_apb_prescaler>
 80014ec:	4603      	mov	r3, r0
 80014ee:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff ffe4 	bl	80014d4 <md_rcc_get_pclk>
 800150c:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 800150e:	f000 f94b 	bl	80017a8 <rcc_get_adc_prescaler>
 8001512:	4603      	mov	r3, r0
 8001514:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 800152e:	f7ff ffa1 	bl	8001474 <md_rcc_get_sysclk>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8001538:	f7ff ffba 	bl	80014b0 <md_rcc_get_hclk>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff ffc6 	bl	80014d4 <md_rcc_get_pclk>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 800154e:	2002      	movs	r0, #2
 8001550:	f7ff ffc0 	bl	80014d4 <md_rcc_get_pclk>
 8001554:	4602      	mov	r2, r0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 800155a:	f7ff ffd1 	bl	8001500 <md_rcc_get_adcclk>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]

  return;
 8001564:	bf00      	nop
}
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <rcc_get_ahb_prescaler+0xa8>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d83f      	bhi.n	8001606 <rcc_get_ahb_prescaler+0x9a>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <rcc_get_ahb_prescaler+0x20>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	080015cd 	.word	0x080015cd
 8001590:	08001607 	.word	0x08001607
 8001594:	08001607 	.word	0x08001607
 8001598:	08001607 	.word	0x08001607
 800159c:	08001607 	.word	0x08001607
 80015a0:	08001607 	.word	0x08001607
 80015a4:	08001607 	.word	0x08001607
 80015a8:	08001607 	.word	0x08001607
 80015ac:	080015d3 	.word	0x080015d3
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015df 	.word	0x080015df
 80015b8:	080015e5 	.word	0x080015e5
 80015bc:	080015eb 	.word	0x080015eb
 80015c0:	080015f1 	.word	0x080015f1
 80015c4:	080015f7 	.word	0x080015f7
 80015c8:	080015ff 	.word	0x080015ff
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
      break;
 80015d0:	e019      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	607b      	str	r3, [r7, #4]
      break;
 80015d6:	e016      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 80015d8:	2304      	movs	r3, #4
 80015da:	607b      	str	r3, [r7, #4]
      break;
 80015dc:	e013      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 80015de:	2308      	movs	r3, #8
 80015e0:	607b      	str	r3, [r7, #4]
      break;
 80015e2:	e010      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 80015e4:	2310      	movs	r3, #16
 80015e6:	607b      	str	r3, [r7, #4]
      break;
 80015e8:	e00d      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	607b      	str	r3, [r7, #4]
      break;
 80015ee:	e00a      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	607b      	str	r3, [r7, #4]
      break;
 80015f4:	e007      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 80015f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fa:	607b      	str	r3, [r7, #4]
      break;
 80015fc:	e003      	b.n	8001606 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 80015fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001602:	607b      	str	r3, [r7, #4]
      break;
 8001604:	bf00      	nop
  }

  return ahb_prescaler;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	b29b      	uxth	r3, r3
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000

08001618 <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d002      	beq.n	800162e <rcc_get_apb_prescaler+0x16>
 8001628:	2b02      	cmp	r3, #2
 800162a:	d008      	beq.n	800163e <rcc_get_apb_prescaler+0x26>
 800162c:	e00f      	b.n	800164e <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <rcc_get_apb_prescaler+0x90>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	72fb      	strb	r3, [r7, #11]
      break;
 800163c:	e007      	b.n	800164e <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <rcc_get_apb_prescaler+0x90>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	72fb      	strb	r3, [r7, #11]
      break;
 800164c:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	2b07      	cmp	r3, #7
 8001652:	d822      	bhi.n	800169a <rcc_get_apb_prescaler+0x82>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <rcc_get_apb_prescaler+0x44>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800167d 	.word	0x0800167d
 8001660:	0800169b 	.word	0x0800169b
 8001664:	0800169b 	.word	0x0800169b
 8001668:	0800169b 	.word	0x0800169b
 800166c:	08001683 	.word	0x08001683
 8001670:	08001689 	.word	0x08001689
 8001674:	0800168f 	.word	0x0800168f
 8001678:	08001695 	.word	0x08001695
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 800167c:	2301      	movs	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
      break;
 8001680:	e00b      	b.n	800169a <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
      break;
 8001686:	e008      	b.n	800169a <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
      break;
 800168c:	e005      	b.n	800169a <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 800168e:	2308      	movs	r3, #8
 8001690:	60fb      	str	r3, [r7, #12]
      break;
 8001692:	e002      	b.n	800169a <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 8001694:	2310      	movs	r3, #16
 8001696:	60fb      	str	r3, [r7, #12]
      break;
 8001698:	bf00      	nop
  }

  return apb_prescaler;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	b29b      	uxth	r3, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000

080016ac <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <rcc_get_pll_multiplier+0x7c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3b02      	subs	r3, #2
 80016c4:	2b0b      	cmp	r3, #11
 80016c6:	d829      	bhi.n	800171c <rcc_get_pll_multiplier+0x70>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <rcc_get_pll_multiplier+0x24>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	08001701 	.word	0x08001701
 80016d4:	08001705 	.word	0x08001705
 80016d8:	08001709 	.word	0x08001709
 80016dc:	0800170d 	.word	0x0800170d
 80016e0:	08001711 	.word	0x08001711
 80016e4:	08001715 	.word	0x08001715
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	0800171d 	.word	0x0800171d
 80016f0:	0800171d 	.word	0x0800171d
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	0800171d 	.word	0x0800171d
 80016fc:	08001719 	.word	0x08001719
    case (RCC_PLL1_MUL_X4):
      return 4;
 8001700:	2304      	movs	r3, #4
 8001702:	e00c      	b.n	800171e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 8001704:	2305      	movs	r3, #5
 8001706:	e00a      	b.n	800171e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8001708:	2306      	movs	r3, #6
 800170a:	e008      	b.n	800171e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 800170c:	2307      	movs	r3, #7
 800170e:	e006      	b.n	800171e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 8001710:	2308      	movs	r3, #8
 8001712:	e004      	b.n	800171e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 8001714:	2309      	movs	r3, #9
 8001716:	e002      	b.n	800171e <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8001718:	230d      	movs	r3, #13
 800171a:	e000      	b.n	800171e <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 8001732:	f7ff ffbb 	bl	80016ac <rcc_get_pll_multiplier>
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <rcc_calculate_pll_sysclk+0x70>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 800174e:	2302      	movs	r3, #2
 8001750:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <rcc_calculate_pll_sysclk+0x70>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <rcc_calculate_pll_sysclk+0x3a>
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d006      	beq.n	8001772 <rcc_calculate_pll_sysclk+0x46>
 8001764:	e00e      	b.n	8001784 <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <rcc_calculate_pll_sysclk+0x74>)
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	60bb      	str	r3, [r7, #8]
      break;
 8001770:	e008      	b.n	8001784 <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <rcc_calculate_pll_sysclk+0x78>)
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	60bb      	str	r3, [r7, #8]
      break;
 8001782:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b0d      	cmp	r3, #13
 8001788:	d102      	bne.n	8001790 <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 8001790:	68bb      	ldr	r3, [r7, #8]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	003d0900 	.word	0x003d0900
 80017a4:	007a1200 	.word	0x007a1200

080017a8 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <rcc_get_adc_prescaler+0x4c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	0b9b      	lsrs	r3, r3, #14
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d812      	bhi.n	80017e8 <rcc_get_adc_prescaler+0x40>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <rcc_get_adc_prescaler+0x20>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017e5 	.word	0x080017e5
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	e006      	b.n	80017ea <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 80017dc:	2304      	movs	r3, #4
 80017de:	e004      	b.n	80017ea <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 80017e0:	2306      	movs	r3, #6
 80017e2:	e002      	b.n	80017ea <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 80017e4:	2308      	movs	r3, #8
 80017e6:	e000      	b.n	80017ea <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 80017e8:	2300      	movs	r3, #0

}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ffc2 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <md_systick_configure_ms>:
#include "stm32f103xx_systick.h"

static volatile uint32_t systick;

void md_systick_configure_ms(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
	rcc_clock_freqs_t freqs;

	md_rcc_get_frequencies(&freqs);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe44 	bl	8001526 <md_rcc_get_frequencies>

	SysTick_Config(freqs.hclk/1000);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <md_systick_configure_ms+0x28>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffcf 	bl	800184c <SysTick_Config>

	return;
 80018ae:	bf00      	nop
}
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <md_systick_get_tick>:

uint32_t md_systick_get_tick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	return systick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <md_systick_get_tick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	2000001c 	.word	0x2000001c

080018d0 <md_systick_delay>:

void md_systick_delay(uint32_t miliseconds)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	uint32_t delay = md_systick_get_tick();
 80018d8:	f7ff fff0 	bl	80018bc <md_systick_get_tick>
 80018dc:	60f8      	str	r0, [r7, #12]
	while(md_systick_get_tick() - delay < miliseconds)
 80018de:	bf00      	nop
 80018e0:	f7ff ffec 	bl	80018bc <md_systick_get_tick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <md_systick_delay+0x10>
		;
	return;
 80018f0:	bf00      	nop
}
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <SysTick_Handler>:

void SysTick_Handler (void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	systick++;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Handler+0x18>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a03      	ldr	r2, [pc, #12]	; (8001910 <SysTick_Handler+0x18>)
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000001c 	.word	0x2000001c

08001914 <md_usart_init_handlers>:
 * Init handler adresses
 * @param[void]
 * @return - void
 */
void md_usart_init_handlers(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
#if MD_USING_USART1
  husart1.p_USARTx = USART1;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <md_usart_init_handlers+0x30>)
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <md_usart_init_handlers+0x34>)
 800191c:	601a      	str	r2, [r3, #0]
  husart1.usart_error = USART_ERR_NOERR;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <md_usart_init_handlers+0x30>)
 8001920:	2200      	movs	r2, #0
 8001922:	721a      	strb	r2, [r3, #8]
  husart1.tx_buffer_count = 0;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <md_usart_init_handlers+0x30>)
 8001926:	2200      	movs	r2, #0
 8001928:	80da      	strh	r2, [r3, #6]
  husart1.tx_buffer_len = 0;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <md_usart_init_handlers+0x30>)
 800192c:	2200      	movs	r2, #0
 800192e:	809a      	strh	r2, [r3, #4]
  husart1.usart_rx_status = USART_RX_IDLE;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <md_usart_init_handlers+0x30>)
 8001932:	2200      	movs	r2, #0
 8001934:	729a      	strb	r2, [r3, #10]
  husart1.usart_tx_status = USART_TX_IDLE;
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <md_usart_init_handlers+0x30>)
 8001938:	2200      	movs	r2, #0
 800193a:	725a      	strb	r2, [r3, #9]
  husart2.tx_buffer_count = 0;
  husart2.tx_buffer_len = 0;
  husart2.usart_rx_status = USART_RX_IDLE;
  husart2.usart_tx_status = USART_TX_IDLE;
#endif // MD_USING_USART2
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000020 	.word	0x20000020
 8001948:	40013800 	.word	0x40013800

0800194c <md_usart_init_clock>:
 * Starts clock for USART and resets the peripheral
 * @param[*pUSARTx] - usartx base address
 * @return - void
 */
void md_usart_init_clock(usart_handle_t *p_hUSARTx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <md_usart_init_clock+0x74>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d112      	bne.n	8001984 <md_usart_init_clock+0x38>
    {
      RCC_CLOCK_ENABLE_USART1();
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <md_usart_init_clock+0x78>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <md_usart_init_clock+0x78>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_USART1RST);
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <md_usart_init_clock+0x78>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <md_usart_init_clock+0x78>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_USART1RST);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <md_usart_init_clock+0x78>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <md_usart_init_clock+0x78>)
 800197c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001980:	60d3      	str	r3, [r2, #12]
    {
      RCC_CLOCK_ENABLE_USART2();
      SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_USART2RST);
      CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_USART2RST);
    }
  return;
 8001982:	e017      	b.n	80019b4 <md_usart_init_clock+0x68>
  else if (p_hUSARTx->p_USARTx == USART2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <md_usart_init_clock+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d112      	bne.n	80019b4 <md_usart_init_clock+0x68>
      RCC_CLOCK_ENABLE_USART2();
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <md_usart_init_clock+0x78>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <md_usart_init_clock+0x78>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	61d3      	str	r3, [r2, #28]
      SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_USART2RST);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <md_usart_init_clock+0x78>)
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <md_usart_init_clock+0x78>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_USART2RST);
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <md_usart_init_clock+0x78>)
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <md_usart_init_clock+0x78>)
 80019ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80019b0:	6113      	str	r3, [r2, #16]
  return;
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
}
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40004400 	.word	0x40004400

080019cc <md_usart_init_gpio>:
 * Init gpio pins for usart
 * @param[*pUSARTx] - usartx base address
 * @return - void
 */
void md_usart_init_gpio(usart_handle_t *p_hUSARTx)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <md_usart_init_gpio+0x60>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10e      	bne.n	80019fc <md_usart_init_gpio+0x30>
    {
      // init clock
      md_gpio_init_clock(GPIOA);
 80019de:	4814      	ldr	r0, [pc, #80]	; (8001a30 <md_usart_init_gpio+0x64>)
 80019e0:	f7ff fb32 	bl	8001048 <md_gpio_init_clock>

      // tx - PA9 / REMAP : PB6
      md_gpio_configure_output(GPIOA, GPIO_PIN_9, GPIO_SPEED_50MHZ,
 80019e4:	2302      	movs	r3, #2
 80019e6:	2203      	movs	r2, #3
 80019e8:	2109      	movs	r1, #9
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <md_usart_init_gpio+0x64>)
 80019ec:	f7ff fb98 	bl	8001120 <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      // rx - PA10 / REMAP : PB7
      md_gpio_configure_input(GPIOA, GPIO_PIN_10, GPIO_INPUT_PULLUP);
 80019f0:	2202      	movs	r2, #2
 80019f2:	210a      	movs	r1, #10
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <md_usart_init_gpio+0x64>)
 80019f6:	f7ff fbec 	bl	80011d2 <md_gpio_configure_input>
      // GPIO_OUTPUT_AF_PP);

      // cts - hardware flow control PA0
      // md_gpio_configure_input(GPIOA, GPIO_PIN_1, GPIO_INPUT_PULLUP);
    }
}
 80019fa:	e012      	b.n	8001a22 <md_usart_init_gpio+0x56>
  else if (p_hUSARTx->p_USARTx == USART2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <md_usart_init_gpio+0x68>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10d      	bne.n	8001a22 <md_usart_init_gpio+0x56>
      md_gpio_init_clock(GPIOA);
 8001a06:	480a      	ldr	r0, [pc, #40]	; (8001a30 <md_usart_init_gpio+0x64>)
 8001a08:	f7ff fb1e 	bl	8001048 <md_gpio_init_clock>
      md_gpio_configure_output(GPIOA, GPIO_PIN_2, GPIO_SPEED_50MHZ,
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	2203      	movs	r2, #3
 8001a10:	2102      	movs	r1, #2
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <md_usart_init_gpio+0x64>)
 8001a14:	f7ff fb84 	bl	8001120 <md_gpio_configure_output>
      md_gpio_configure_input(GPIOA, GPIO_PIN_3, GPIO_INPUT_PULLUP);
 8001a18:	2202      	movs	r2, #2
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <md_usart_init_gpio+0x64>)
 8001a1e:	f7ff fbd8 	bl	80011d2 <md_gpio_configure_input>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40010800 	.word	0x40010800
 8001a34:	40004400 	.word	0x40004400

08001a38 <md_usart_set_baud_rate>:
 * @param[*pUSARTx] - usartx base address
 * @param[baud_rate] - baud rate
 * @return - void
 */
void md_usart_set_baud_rate(usart_handle_t *p_hUSARTx, uint32_t baud_rate)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t pclk_freq;
  uint32_t div_mantissa, div_fraction;
  float f_div_fraction;

  // get clock frequency
  if (p_hUSARTx->p_USARTx == USART1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <md_usart_set_baud_rate+0xf0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d104      	bne.n	8001a56 <md_usart_set_baud_rate+0x1e>
    {
      pclk_freq = md_rcc_get_pclk(2);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7ff fd41 	bl	80014d4 <md_rcc_get_pclk>
 8001a52:	6178      	str	r0, [r7, #20]
 8001a54:	e008      	b.n	8001a68 <md_usart_set_baud_rate+0x30>
    }
  else if (p_hUSARTx->p_USARTx == USART2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <md_usart_set_baud_rate+0xf4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d103      	bne.n	8001a68 <md_usart_set_baud_rate+0x30>
    {
      pclk_freq = md_rcc_get_pclk(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fd37 	bl	80014d4 <md_rcc_get_pclk>
 8001a66:	6178      	str	r0, [r7, #20]
    }

  // calculate mantissa/fraction
  div_mantissa = (pclk_freq / (baud_rate * 16));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	613b      	str	r3, [r7, #16]

  // **_START_SHAME_FLOAT_ZONE
  f_div_fraction = ((float)pclk_freq / (baud_rate * 16));
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7ff f84f 	bl	8000b18 <__aeabi_ui2f>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f849 	bl	8000b18 <__aeabi_ui2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff f950 	bl	8000d30 <__aeabi_fdiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
  f_div_fraction = round((f_div_fraction - div_mantissa) / 0.0625);
 8001a94:	6938      	ldr	r0, [r7, #16]
 8001a96:	f7ff f83f 	bl	8000b18 <__aeabi_ui2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7fe ff88 	bl	80009b4 <__aeabi_fsub>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fcc6 	bl	8000438 <__aeabi_f2d>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <md_usart_set_baud_rate+0xf8>)
 8001ab2:	f7fe fe43 	bl	800073c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f000 f951 	bl	8001d64 <round>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7fe ff1f 	bl	800090c <__aeabi_d2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	60fb      	str	r3, [r7, #12]

  // if fraction is more than 0,9375 then round it up to 1 and add to mantissa
  if (f_div_fraction > 15)
 8001ad2:	4918      	ldr	r1, [pc, #96]	; (8001b34 <md_usart_set_baud_rate+0xfc>)
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff fa33 	bl	8000f40 <__aeabi_fcmpgt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <md_usart_set_baud_rate+0xb4>
    {
      f_div_fraction = 0;
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
      div_mantissa++;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
    }

  div_fraction = f_div_fraction;
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7ff fa31 	bl	8000f54 <__aeabi_f2uiz>
 8001af2:	4603      	mov	r3, r0
 8001af4:	60bb      	str	r3, [r7, #8]

  // **_STOP_SHAME_FLOAT_ZONE

  // clear register
  p_hUSARTx->p_USARTx->BRR = 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]

  // write new values
  p_hUSARTx->p_USARTx->BRR |= (div_mantissa << USART_BRR_DIV_Mantissa_Pos);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	011a      	lsls	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
  p_hUSARTx->p_USARTx->BRR |= (div_fraction << USART_BRR_DIV_Fraction_Pos);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]

  return;
 8001b20:	bf00      	nop
}
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	3fb00000 	.word	0x3fb00000
 8001b34:	41700000 	.word	0x41700000

08001b38 <md_usart_init_basic>:
 * @return - void
 */
void md_usart_init_basic(usart_handle_t *p_hUSARTx,
                         usart_word_lenght_t word_lenght,
                         usart_stop_bits_t stop_bits, uint32_t baud_rate)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	72fb      	strb	r3, [r7, #11]
 8001b46:	4613      	mov	r3, r2
 8001b48:	72bb      	strb	r3, [r7, #10]
  // Enable Usart
  p_hUSARTx->p_USARTx->CR1 |= USART_CR1_UE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b58:	60da      	str	r2, [r3, #12]

  // Define word lenght
  p_hUSARTx->p_USARTx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	031b      	lsls	r3, r3, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	60da      	str	r2, [r3, #12]

  // Program the number of stop bits
  p_hUSARTx->p_USARTx->CR2 &= ~(USART_CR2_STOP_Msk);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b7c:	611a      	str	r2, [r3, #16]
  p_hUSARTx->p_USARTx->CR2 |= (stop_bits << USART_CR2_STOP_Pos);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	7abb      	ldrb	r3, [r7, #10]
 8001b86:	031b      	lsls	r3, r3, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	611a      	str	r2, [r3, #16]

  md_usart_set_baud_rate(p_hUSARTx, baud_rate);
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff ff4f 	bl	8001a38 <md_usart_set_baud_rate>

  return;
 8001b9a:	bf00      	nop
}
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <md_usart_tx_polling>:
 * @return - status @usart_status
 */
usart_error_t md_usart_tx_polling(usart_handle_t *p_hUSARTx,
                                  uint8_t *p_data_buffer, uint16_t lenght,
                                  uint32_t timeout_ms)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t bytes_to_send = lenght;
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	82fb      	strh	r3, [r7, #22]
  uint32_t time_tick;
  // enable transmitter
  p_hUSARTx->p_USARTx->CR1 |= USART_CR1_TE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0208 	orr.w	r2, r2, #8
 8001bc4:	60da      	str	r2, [r3, #12]

  // check if we are not doing anything else
  if (p_hUSARTx->usart_tx_status == USART_TX_IDLE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	7a5b      	ldrb	r3, [r3, #9]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d14d      	bne.n	8001c6a <md_usart_tx_polling+0xc8>
    {
      // change usart tx status
      p_hUSARTx->usart_tx_status = USART_TX_POLLING;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	725a      	strb	r2, [r3, #9]

      while (bytes_to_send != 0)
 8001bd4:	e045      	b.n	8001c62 <md_usart_tx_polling+0xc0>
        {
          // wait until TDR register is empty
          time_tick = md_systick_get_tick();
 8001bd6:	f7ff fe71 	bl	80018bc <md_systick_get_tick>
 8001bda:	6138      	str	r0, [r7, #16]
          while (!(p_hUSARTx->p_USARTx->SR & USART_SR_TXE))
 8001bdc:	e00f      	b.n	8001bfe <md_usart_tx_polling+0x5c>
            {
              if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001bde:	f7ff fe6d 	bl	80018bc <md_systick_get_tick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d207      	bcs.n	8001bfe <md_usart_tx_polling+0x5c>
                {
                  p_hUSARTx->usart_error = USART_ERR_TIMEOUT_TXE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	721a      	strb	r2, [r3, #8]
                  p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	725a      	strb	r2, [r3, #9]
                  return USART_ERR_TIMEOUT_TXE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e03e      	b.n	8001c7c <md_usart_tx_polling+0xda>
          while (!(p_hUSARTx->p_USARTx->SR & USART_SR_TXE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0e8      	beq.n	8001bde <md_usart_tx_polling+0x3c>
                }
            }

          // put data in DR register
          p_hUSARTx->p_USARTx->DR = p_data_buffer[lenght - bytes_to_send];
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	8afb      	ldrh	r3, [r7, #22]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4413      	add	r3, r2
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]

          if (bytes_to_send == 1)
 8001c20:	8afb      	ldrh	r3, [r7, #22]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d11a      	bne.n	8001c5c <md_usart_tx_polling+0xba>
            {
              // wait until TC is set
              time_tick = md_systick_get_tick();
 8001c26:	f7ff fe49 	bl	80018bc <md_systick_get_tick>
 8001c2a:	6138      	str	r0, [r7, #16]
              while (!(p_hUSARTx->p_USARTx->SR & USART_SR_TC))
 8001c2c:	e00f      	b.n	8001c4e <md_usart_tx_polling+0xac>
                {
                  if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8001c2e:	f7ff fe45 	bl	80018bc <md_systick_get_tick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d207      	bcs.n	8001c4e <md_usart_tx_polling+0xac>
                    {
                      p_hUSARTx->usart_error = USART_ERR_TIMEOUT_TC;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2202      	movs	r2, #2
 8001c42:	721a      	strb	r2, [r3, #8]
                      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	725a      	strb	r2, [r3, #9]
                      return USART_ERR_TIMEOUT_TC;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e016      	b.n	8001c7c <md_usart_tx_polling+0xda>
              while (!(p_hUSARTx->p_USARTx->SR & USART_SR_TC))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0e8      	beq.n	8001c2e <md_usart_tx_polling+0x8c>
                    }
                }
            }
          bytes_to_send--;
 8001c5c:	8afb      	ldrh	r3, [r7, #22]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	82fb      	strh	r3, [r7, #22]
      while (bytes_to_send != 0)
 8001c62:	8afb      	ldrh	r3, [r7, #22]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1b6      	bne.n	8001bd6 <md_usart_tx_polling+0x34>
 8001c68:	e004      	b.n	8001c74 <md_usart_tx_polling+0xd2>
        }
    }
  else
    {
      p_hUSARTx->usart_error = USART_ERR_TX_COLLISION;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	721a      	strb	r2, [r3, #8]
      return USART_ERR_TX_COLLISION;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e003      	b.n	8001c7c <md_usart_tx_polling+0xda>
    }

  p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	725a      	strb	r2, [r3, #9]
  return USART_ERR_NOERR;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <md_usart_main_callback>:
__weak void md_usart_tx_done_callback(usart_handle_t *p_hUSARTx) {}

static void usart_txe_empty_callback(usart_handle_t *p_hUSARTx) {}

static void md_usart_main_callback(usart_handle_t *p_hUSARTx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  // transmit register empty
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
    {
      // user function
    }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { md_usart_main_callback(&husart1); }
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <USART1_IRQHandler+0x10>)
 8001ca2:	f7ff ffef 	bl	8001c84 <md_usart_main_callback>
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000020 	.word	0x20000020

08001cb0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    /* Loop forever */
    // example_gpio_toggle_led();
    // example_rcc_configure_pll();
	example_usart_configure_baud();
 8001cb4:	f7ff f992 	bl	8000fdc <example_usart_configure_baud>

    for (;;)
 8001cb8:	e7fe      	b.n	8001cb8 <main+0x8>

08001cba <SystemInit>:
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
	...

08001cc8 <Reset_Handler>:
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopForever+0x2>)
 8001cca:	4685      	mov	sp, r0
 8001ccc:	f7ff fff5 	bl	8001cba <SystemInit>
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <LoopForever+0x6>)
 8001cd2:	490d      	ldr	r1, [pc, #52]	; (8001d08 <LoopForever+0xa>)
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <LoopForever+0xe>)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:
 8001cda:	58d4      	ldr	r4, [r2, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:
 8001ce0:	18c4      	adds	r4, r0, r3
 8001ce2:	428c      	cmp	r4, r1
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <LoopForever+0x12>)
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	; (8001d14 <LoopForever+0x16>)
 8001cea:	2300      	movs	r3, #0
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:
 8001cf2:	42a2      	cmp	r2, r4
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>
 8001cf6:	f000 f811 	bl	8001d1c <__libc_init_array>
 8001cfa:	f7ff ffd9 	bl	8001cb0 <main>

08001cfe <LoopForever>:
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
 8001d00:	20002800 	.word	0x20002800
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	08001e24 	.word	0x08001e24
 8001d10:	20000000 	.word	0x20000000
 8001d14:	2000002c 	.word	0x2000002c

08001d18 <ADC1_2_IRQHandler>:
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <__libc_init_array>:
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	2600      	movs	r6, #0
 8001d20:	4d0c      	ldr	r5, [pc, #48]	; (8001d54 <__libc_init_array+0x38>)
 8001d22:	4c0d      	ldr	r4, [pc, #52]	; (8001d58 <__libc_init_array+0x3c>)
 8001d24:	1b64      	subs	r4, r4, r5
 8001d26:	10a4      	asrs	r4, r4, #2
 8001d28:	42a6      	cmp	r6, r4
 8001d2a:	d109      	bne.n	8001d40 <__libc_init_array+0x24>
 8001d2c:	f000 f862 	bl	8001df4 <_init>
 8001d30:	2600      	movs	r6, #0
 8001d32:	4d0a      	ldr	r5, [pc, #40]	; (8001d5c <__libc_init_array+0x40>)
 8001d34:	4c0a      	ldr	r4, [pc, #40]	; (8001d60 <__libc_init_array+0x44>)
 8001d36:	1b64      	subs	r4, r4, r5
 8001d38:	10a4      	asrs	r4, r4, #2
 8001d3a:	42a6      	cmp	r6, r4
 8001d3c:	d105      	bne.n	8001d4a <__libc_init_array+0x2e>
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
 8001d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d44:	4798      	blx	r3
 8001d46:	3601      	adds	r6, #1
 8001d48:	e7ee      	b.n	8001d28 <__libc_init_array+0xc>
 8001d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d4e:	4798      	blx	r3
 8001d50:	3601      	adds	r6, #1
 8001d52:	e7f2      	b.n	8001d3a <__libc_init_array+0x1e>
 8001d54:	08001e1c 	.word	0x08001e1c
 8001d58:	08001e1c 	.word	0x08001e1c
 8001d5c:	08001e1c 	.word	0x08001e1c
 8001d60:	08001e20 	.word	0x08001e20

08001d64 <round>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8001d6a:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8001d6e:	2c13      	cmp	r4, #19
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4606      	mov	r6, r0
 8001d76:	460d      	mov	r5, r1
 8001d78:	dc19      	bgt.n	8001dae <round+0x4a>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	da09      	bge.n	8001d92 <round+0x2e>
 8001d7e:	3401      	adds	r4, #1
 8001d80:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001d84:	d103      	bne.n	8001d8e <round+0x2a>
 8001d86:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001d8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001d8e:	2200      	movs	r2, #0
 8001d90:	e02a      	b.n	8001de8 <round+0x84>
 8001d92:	4917      	ldr	r1, [pc, #92]	; (8001df0 <round+0x8c>)
 8001d94:	4121      	asrs	r1, r4
 8001d96:	ea03 0001 	and.w	r0, r3, r1
 8001d9a:	4302      	orrs	r2, r0
 8001d9c:	d010      	beq.n	8001dc0 <round+0x5c>
 8001d9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001da2:	fa42 f404 	asr.w	r4, r2, r4
 8001da6:	4423      	add	r3, r4
 8001da8:	ea23 0301 	bic.w	r3, r3, r1
 8001dac:	e7ef      	b.n	8001d8e <round+0x2a>
 8001dae:	2c33      	cmp	r4, #51	; 0x33
 8001db0:	dd09      	ble.n	8001dc6 <round+0x62>
 8001db2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001db6:	d103      	bne.n	8001dc0 <round+0x5c>
 8001db8:	f7fe f9e0 	bl	800017c <__adddf3>
 8001dbc:	4606      	mov	r6, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8001dce:	40f8      	lsrs	r0, r7
 8001dd0:	4202      	tst	r2, r0
 8001dd2:	d0f5      	beq.n	8001dc0 <round+0x5c>
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001dda:	fa01 f404 	lsl.w	r4, r1, r4
 8001dde:	1912      	adds	r2, r2, r4
 8001de0:	bf28      	it	cs
 8001de2:	185b      	addcs	r3, r3, r1
 8001de4:	ea22 0200 	bic.w	r2, r2, r0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	e7e6      	b.n	8001dbc <round+0x58>
 8001dee:	bf00      	nop
 8001df0:	000fffff 	.word	0x000fffff

08001df4 <_init>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr

08001e00 <_fini>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr
