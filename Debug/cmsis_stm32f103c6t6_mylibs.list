
cmsis_stm32f103c6t6_mylibs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001500  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001638  08001638  00011640  2**0
                  CONTENTS
  4 .ARM          00000000  08001638  08001638  00011640  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001638  08001640  00011640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001638  08001638  00011638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800163c  0800163c  0001163c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000000  08001640  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001640  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011640  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000478c  00000000  00000000  00011669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001161  00000000  00000000  00015df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00016f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000278  00000000  00000000  00017278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011081  00000000  00000000  000174f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003fef  00000000  00000000  00028571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058d98  00000000  00000000  0002c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000852f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a10  00000000  00000000  0008534c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001618 	.word	0x08001618

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001618 	.word	0x08001618

08000170 <example_can_init>:
#include "stm32f103xx_systick.h"

#include "gpio_example.h"

void example_can_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b090      	sub	sp, #64	; 0x40
 8000174:	af02      	add	r7, sp, #8
  // configure systick
  md_systick_configure_ms();
 8000176:	f001 f931 	bl	80013dc <md_systick_configure_ms>
  // configure rcc to get 32 Mhz on APB1 (CAN bus)

  rcc_clock_freqs_t frequencies = {0};
 800017a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	611a      	str	r2, [r3, #16]

  // configure frequencies - no prescaler on buses + pll on mul 4x
  md_rcc_configure_prescalers(RCC_AHB_PRESCALER_NODIV, RCC_APB_PRESCALER_NODIV,
 800018a:	2302      	movs	r3, #2
 800018c:	2200      	movs	r2, #0
 800018e:	2100      	movs	r1, #0
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fedf 	bl	8000f54 <md_rcc_configure_prescalers>
                              RCC_APB_PRESCALER_NODIV, RCC_ADC_PRESCALER_DIV6);
  md_rcc_configure_sysclk(RCC_SYSCLK_SOURCE_PLL, RCC_PLL_SOURCE_HSE,
 8000196:	2300      	movs	r3, #0
 8000198:	2202      	movs	r2, #2
 800019a:	2101      	movs	r1, #1
 800019c:	2002      	movs	r0, #2
 800019e:	f000 fe51 	bl	8000e44 <md_rcc_configure_sysclk>
                          RCC_PLL1_MUL_X4, RCC_HSE_DIV_NODIV);
  md_rcc_get_frequencies(&frequencies);
 80001a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 ff63 	bl	8001072 <md_rcc_get_frequencies>

  // init low level - handler/clock/gpio
  md_can_init_handlers();
 80001ac:	f000 f8b4 	bl	8000318 <md_can_init_handlers>
  md_can_init_clock(&hcan1);
 80001b0:	482c      	ldr	r0, [pc, #176]	; (8000264 <example_can_init+0xf4>)
 80001b2:	f000 f8c5 	bl	8000340 <md_can_init_clock>
  md_gpio_init_clock(GPIOA);
 80001b6:	482c      	ldr	r0, [pc, #176]	; (8000268 <example_can_init+0xf8>)
 80001b8:	f000 fcec 	bl	8000b94 <md_gpio_init_clock>
  md_can_init_gpio(&hcan1);
 80001bc:	4829      	ldr	r0, [pc, #164]	; (8000264 <example_can_init+0xf4>)
 80001be:	f000 f8e5 	bl	800038c <md_can_init_gpio>

  // can time quanta configuartion
  can_quanta_init_t time_quanta;
  time_quanta.prescaler = 2;
 80001c2:	2302      	movs	r3, #2
 80001c4:	83bb      	strh	r3, [r7, #28]
  time_quanta.quanta_ts1 = CAN_TIME_QUANTA13;
 80001c6:	230c      	movs	r3, #12
 80001c8:	77bb      	strb	r3, [r7, #30]
  time_quanta.quanta_ts2 = CAN_TIME_QUANTA2;
 80001ca:	2301      	movs	r3, #1
 80001cc:	77fb      	strb	r3, [r7, #31]
  time_quanta.quanta_sjw = CAN_TIME_QUANTA1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	f887 3020 	strb.w	r3, [r7, #32]

  // can basic configuration
  can_basic_init_t basic_init;
  basic_init.auto_bus_off = false;
 80001d4:	2300      	movs	r3, #0
 80001d6:	75bb      	strb	r3, [r7, #22]
  basic_init.debug_freeze = false;
 80001d8:	2300      	movs	r3, #0
 80001da:	753b      	strb	r3, [r7, #20]
  basic_init.time_triggered_comm = false;
 80001dc:	2300      	movs	r3, #0
 80001de:	757b      	strb	r3, [r7, #21]
  basic_init.auto_wake_up = true;
 80001e0:	2301      	movs	r3, #1
 80001e2:	75fb      	strb	r3, [r7, #23]
  basic_init.auto_retransmit = true;
 80001e4:	2301      	movs	r3, #1
 80001e6:	763b      	strb	r3, [r7, #24]
  basic_init.rx_fifo_lock = false;
 80001e8:	2300      	movs	r3, #0
 80001ea:	767b      	strb	r3, [r7, #25]
  basic_init.tx_fifo_prio = false;
 80001ec:	2300      	movs	r3, #0
 80001ee:	76bb      	strb	r3, [r7, #26]

  // enter init mode
  md_can_change_op_mode(&hcan1, CAN_OPMODE_INIT, 1000);
 80001f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f4:	2100      	movs	r1, #0
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <example_can_init+0xf4>)
 80001f8:	f000 f8e6 	bl	80003c8 <md_can_change_op_mode>
  md_can_init_basic(&hcan1, basic_init);
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <example_can_init+0xf4>)
 8000206:	f000 f97e 	bl	8000506 <md_can_init_basic>
  md_can_init_time_quanta(&hcan1, time_quanta);
 800020a:	f107 031c 	add.w	r3, r7, #28
 800020e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000212:	4814      	ldr	r0, [pc, #80]	; (8000264 <example_can_init+0xf4>)
 8000214:	f000 f900 	bl	8000418 <md_can_init_time_quanta>
  md_can_enter_test_mode(&hcan1, CAN_TESTMODE_SILENTLOOPBACK);
 8000218:	2102      	movs	r1, #2
 800021a:	4812      	ldr	r0, [pc, #72]	; (8000264 <example_can_init+0xf4>)
 800021c:	f000 fa12 	bl	8000644 <md_can_enter_test_mode>
  // exit init mode
  md_can_change_op_mode(&hcan1, CAN_OPMODE_NORMAL, 1000);
 8000220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000224:	2101      	movs	r1, #1
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <example_can_init+0xf4>)
 8000228:	f000 f8ce 	bl	80003c8 <md_can_change_op_mode>

  // send message
  can_frame_t frame;
  frame.data_lenght = 8;
 800022c:	2308      	movs	r3, #8
 800022e:	743b      	strb	r3, [r7, #16]
  frame.id = 35;
 8000230:	2323      	movs	r3, #35	; 0x23
 8000232:	60fb      	str	r3, [r7, #12]
  frame.id_extended = false;
 8000234:	2300      	movs	r3, #0
 8000236:	747b      	strb	r3, [r7, #17]
  frame.remote = false;
 8000238:	2300      	movs	r3, #0
 800023a:	74bb      	strb	r3, [r7, #18]

  uint8_t mailbox_number;
  uint8_t databuffer[8] = "cantest1";
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <example_can_init+0xfc>)
 800023e:	463b      	mov	r3, r7
 8000240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000244:	e883 0003 	stmia.w	r3, {r0, r1}

  md_can_write_mailbox(&hcan1, frame, databuffer,&mailbox_number);
 8000248:	463a      	mov	r2, r7
 800024a:	f107 030b 	add.w	r3, r7, #11
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	4613      	mov	r3, r2
 8000252:	f107 020c 	add.w	r2, r7, #12
 8000256:	ca06      	ldmia	r2, {r1, r2}
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <example_can_init+0xf4>)
 800025a:	f000 fa47 	bl	80006ec <md_can_write_mailbox>

  while (1)
    {
      example_heart_beat();
 800025e:	f000 f807 	bl	8000270 <example_heart_beat>
 8000262:	e7fc      	b.n	800025e <example_can_init+0xee>
 8000264:	2000002c 	.word	0x2000002c
 8000268:	40010800 	.word	0x40010800
 800026c:	08001630 	.word	0x08001630

08000270 <example_heart_beat>:

#define LED1_GPIO_PORT GPIOC
#define LED1_GPIO_PIN GPIO_PIN_13

void example_heart_beat(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  // init LED
  md_gpio_init_clock(GPIOC);
 8000274:	480f      	ldr	r0, [pc, #60]	; (80002b4 <example_heart_beat+0x44>)
 8000276:	f000 fc8d 	bl	8000b94 <md_gpio_init_clock>
  md_gpio_configure_output(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_SPEED_10MHZ,
 800027a:	2300      	movs	r3, #0
 800027c:	2201      	movs	r2, #1
 800027e:	210d      	movs	r1, #13
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <example_heart_beat+0x44>)
 8000282:	f000 fcf3 	bl	8000c6c <md_gpio_configure_output>
                           GPIO_OUTPUT_PP);

  // configure systick as 1ms
  md_systick_configure_ms();
 8000286:	f001 f8a9 	bl	80013dc <md_systick_configure_ms>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	210d      	movs	r1, #13
 800028e:	4809      	ldr	r0, [pc, #36]	; (80002b4 <example_heart_beat+0x44>)
 8000290:	f000 fdb5 	bl	8000dfe <md_gpio_write_pin>

  md_systick_delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f001 f8c0 	bl	800141c <md_systick_delay>

  md_gpio_write_pin(LED1_GPIO_PORT, LED1_GPIO_PIN, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	210d      	movs	r1, #13
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <example_heart_beat+0x44>)
 80002a2:	f000 fdac 	bl	8000dfe <md_gpio_write_pin>

  md_systick_delay(1000);
 80002a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002aa:	f001 f8b7 	bl	800141c <md_systick_delay>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40011000 	.word	0x40011000

080002b8 <md_usart_tc_callback>:
      md_usart_tx_polling(&husart2, databuffer2, 64, 1000);
    }
}

void md_usart_tc_callback(usart_handle_t *p_hUSARTx)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  if (p_hUSARTx->p_USARTx == USART1)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <md_usart_tc_callback+0x48>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d107      	bne.n	80002da <md_usart_tc_callback+0x22>
    {
      transmission_counter_usart1++;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <md_usart_tc_callback+0x4c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <md_usart_tc_callback+0x4c>)
 80002d2:	6013      	str	r3, [r2, #0]
      start_new_transmit1 = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <md_usart_tc_callback+0x50>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
    }

  if (p_hUSARTx->p_USARTx == USART2)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <md_usart_tc_callback+0x54>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d107      	bne.n	80002f4 <md_usart_tc_callback+0x3c>
    {
      transmission_counter_usart2++;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <md_usart_tc_callback+0x58>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <md_usart_tc_callback+0x58>)
 80002ec:	6013      	str	r3, [r2, #0]
      start_new_transmit2 = 1;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <md_usart_tc_callback+0x5c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
    }
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40013800 	.word	0x40013800
 8000304:	20000028 	.word	0x20000028
 8000308:	20000025 	.word	0x20000025
 800030c:	40004400 	.word	0x40004400
 8000310:	20000020 	.word	0x20000020
 8000314:	20000024 	.word	0x20000024

08000318 <md_can_init_handlers>:
 * Init handler structures
 * @param[void]
 * @return - void
 */
void md_can_init_handlers(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  hcan1.p_CANx = CAN1;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <md_can_init_handlers+0x20>)
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <md_can_init_handlers+0x24>)
 8000320:	601a      	str	r2, [r3, #0]
  hcan1.can_error = CAN_ERR_NOERR;
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <md_can_init_handlers+0x20>)
 8000324:	2200      	movs	r2, #0
 8000326:	711a      	strb	r2, [r3, #4]
  hcan1.op_mode = CAN_OPMODE_SLEEP;
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <md_can_init_handlers+0x20>)
 800032a:	2202      	movs	r2, #2
 800032c:	715a      	strb	r2, [r3, #5]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	2000002c 	.word	0x2000002c
 800033c:	40006400 	.word	0x40006400

08000340 <md_can_init_clock>:
 * Starts clock for CAN and resets the peripheral
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
void md_can_init_clock(can_handle_t *p_hCANx)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <md_can_init_clock+0x44>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d112      	bne.n	8000378 <md_can_init_clock+0x38>
    {
      RCC_CLOCK_ENABLE_CAN();
 8000352:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <md_can_init_clock+0x48>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a0c      	ldr	r2, [pc, #48]	; (8000388 <md_can_init_clock+0x48>)
 8000358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035c:	61d3      	str	r3, [r2, #28]
      SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <md_can_init_clock+0x48>)
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	4a09      	ldr	r2, [pc, #36]	; (8000388 <md_can_init_clock+0x48>)
 8000364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000368:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_CAN1RST);
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <md_can_init_clock+0x48>)
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	4a06      	ldr	r2, [pc, #24]	; (8000388 <md_can_init_clock+0x48>)
 8000370:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000374:	6113      	str	r3, [r2, #16]
    }
  return;
 8000376:	bf00      	nop
 8000378:	bf00      	nop
}
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40006400 	.word	0x40006400
 8000388:	40021000 	.word	0x40021000

0800038c <md_can_init_gpio>:
 * Init gpio pins for can bus
 * @param[*p_hCANx] - can struct handler @can_handler
 * @return - void
 */
void md_can_init_gpio(can_handle_t *p_hCANx)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx == CAN1)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a09      	ldr	r2, [pc, #36]	; (80003c0 <md_can_init_gpio+0x34>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d10b      	bne.n	80003b6 <md_can_init_gpio+0x2a>
    {
      // CAN TX PA12, REMAP : PB8
      md_gpio_configure_output(GPIOA, GPIO_PIN_12, GPIO_SPEED_50MHZ,
 800039e:	2302      	movs	r3, #2
 80003a0:	2203      	movs	r2, #3
 80003a2:	210c      	movs	r1, #12
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <md_can_init_gpio+0x38>)
 80003a6:	f000 fc61 	bl	8000c6c <md_gpio_configure_output>
                               GPIO_OUTPUT_AF_PP);

      // CAN RX PA11, REMAP : PB9
      md_gpio_configure_input(GPIOA, GPIO_PIN_11, GPIO_INPUT_FLOATING);
 80003aa:	2201      	movs	r2, #1
 80003ac:	210b      	movs	r1, #11
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <md_can_init_gpio+0x38>)
 80003b0:	f000 fcb5 	bl	8000d1e <md_gpio_configure_input>
    }
  return;
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
}
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40006400 	.word	0x40006400
 80003c4:	40010800 	.word	0x40010800

080003c8 <md_can_change_op_mode>:
 * @param[timeout_ms] - timeout in miliseconds
 * @return - can_error_t - can error status
 */
can_error_t md_can_change_op_mode(can_handle_t *p_hCANx, can_op_mode_t op_mode,
                                  uint32_t timeout_ms)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	460b      	mov	r3, r1
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	72fb      	strb	r3, [r7, #11]
  switch (op_mode)
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d012      	beq.n	8000402 <md_can_change_op_mode+0x3a>
 80003dc:	2b02      	cmp	r3, #2
 80003de:	dc16      	bgt.n	800040e <md_can_change_op_mode+0x46>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <md_can_change_op_mode+0x22>
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d006      	beq.n	80003f6 <md_can_change_op_mode+0x2e>
 80003e8:	e011      	b.n	800040e <md_can_change_op_mode+0x46>
    {
    case (CAN_OPMODE_INIT):
      {
        return can_enter_init_mode(p_hCANx, timeout_ms);
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	f000 fac7 	bl	8000980 <can_enter_init_mode>
 80003f2:	4603      	mov	r3, r0
 80003f4:	e00c      	b.n	8000410 <md_can_change_op_mode+0x48>
      }
    case (CAN_OPMODE_NORMAL):
      {
        return can_enter_normal_mode(p_hCANx, timeout_ms);
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f000 fb0d 	bl	8000a18 <can_enter_normal_mode>
 80003fe:	4603      	mov	r3, r0
 8000400:	e006      	b.n	8000410 <md_can_change_op_mode+0x48>
      }
    case (CAN_OPMODE_SLEEP):
      {
        return can_enter_sleep_mode(p_hCANx, timeout_ms);
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	68f8      	ldr	r0, [r7, #12]
 8000406:	f000 fb53 	bl	8000ab0 <can_enter_sleep_mode>
 800040a:	4603      	mov	r3, r0
 800040c:	e000      	b.n	8000410 <md_can_change_op_mode+0x48>
      }
    default:
      return CAN_ERR_SWITCH_MODE;
 800040e:	2303      	movs	r3, #3
    }
}
 8000410:	4618      	mov	r0, r3
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <md_can_init_time_quanta>:
 * quanta quanta_sjw - number of quanta for synchronization MAX 4 quanta
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_time_quanta(can_handle_t *p_hCANx,
                                    can_quanta_init_t quanta_init)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	e883 0006 	stmia.w	r3, {r1, r2}
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	795b      	ldrb	r3, [r3, #5]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <md_can_init_time_quanta+0x1a>
    {
      return CAN_ERR_WRONG_MDOE;
 800042e:	2304      	movs	r3, #4
 8000430:	e064      	b.n	80004fc <md_can_init_time_quanta+0xe4>
    }

  // check if values are not exceeded
  if (quanta_init.quanta_ts2 > CAN_TIME_QUANTA8 ||
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b07      	cmp	r3, #7
 8000436:	d802      	bhi.n	800043e <md_can_init_time_quanta+0x26>
      quanta_init.quanta_sjw > CAN_TIME_QUANTA4)
 8000438:	7a3b      	ldrb	r3, [r7, #8]
  if (quanta_init.quanta_ts2 > CAN_TIME_QUANTA8 ||
 800043a:	2b03      	cmp	r3, #3
 800043c:	d904      	bls.n	8000448 <md_can_init_time_quanta+0x30>
    {
      p_hCANx->can_error = CAN_ERR_INIT_QUANTA;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	2205      	movs	r2, #5
 8000442:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_QUANTA;
 8000444:	2305      	movs	r3, #5
 8000446:	e059      	b.n	80004fc <md_can_init_time_quanta+0xe4>
    }

  if (quanta_init.prescaler > 511 || quanta_init.prescaler < 1)
 8000448:	88bb      	ldrh	r3, [r7, #4]
 800044a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800044e:	d202      	bcs.n	8000456 <md_can_init_time_quanta+0x3e>
 8000450:	88bb      	ldrh	r3, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d104      	bne.n	8000460 <md_can_init_time_quanta+0x48>
    {
      p_hCANx->can_error = CAN_ERR_INIT_BAUD;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2206      	movs	r2, #6
 800045a:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_INIT_BAUD;
 800045c:	2306      	movs	r3, #6
 800045e:	e04d      	b.n	80004fc <md_can_init_time_quanta+0xe4>
    }

  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_BRP_Msk);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	6812      	ldr	r2, [r2, #0]
 800046a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800046e:	f023 0303 	bic.w	r3, r3, #3
 8000472:	61d3      	str	r3, [r2, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_TS1_Msk);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000482:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_TS2_Msk);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	69da      	ldr	r2, [r3, #28]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000492:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR &= ~(CAN_BTR_SJW_Msk);
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	69da      	ldr	r2, [r3, #28]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80004a2:	61da      	str	r2, [r3, #28]

  // init prescaler and quantas
  p_hCANx->p_CANx->BTR |= ((quanta_init.prescaler - 1) << CAN_BTR_BRP_Pos);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	69da      	ldr	r2, [r3, #28]
 80004aa:	88bb      	ldrh	r3, [r7, #4]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	430a      	orrs	r2, r1
 80004b6:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_init.quanta_ts1 << CAN_BTR_TS1_Pos);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	69da      	ldr	r2, [r3, #28]
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	041b      	lsls	r3, r3, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_init.quanta_ts2 << CAN_BTR_TS2_Pos);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	69da      	ldr	r2, [r3, #28]
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	051b      	lsls	r3, r3, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	430a      	orrs	r2, r1
 80004de:	61da      	str	r2, [r3, #28]
  p_hCANx->p_CANx->BTR |= (quanta_init.quanta_sjw << CAN_BTR_SJW_Pos);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	69da      	ldr	r2, [r3, #28]
 80004e6:	7a3b      	ldrb	r3, [r7, #8]
 80004e8:	061b      	lsls	r3, r3, #24
 80004ea:	4619      	mov	r1, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	430a      	orrs	r2, r1
 80004f2:	61da      	str	r2, [r3, #28]

  p_hCANx->can_error = CAN_ERR_NOERR;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2200      	movs	r2, #0
 80004f8:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <md_can_init_basic>:
 * @param[basic_init] - @can_basic_init
 * @return - can_error_t - can error status
 */
can_error_t md_can_init_basic(can_handle_t *p_hCANx,
                              can_basic_init_t basic_init)
{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	e883 0006 	stmia.w	r3, {r1, r2}
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <md_can_init_basic+0x1a>
    {
      return CAN_ERR_WRONG_MDOE;
 800051c:	2304      	movs	r3, #4
 800051e:	e08c      	b.n	800063a <md_can_init_basic+0x134>
    }

  // set or reset all the configuration flags
  if (basic_init.debug_freeze == true)
 8000520:	793b      	ldrb	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d008      	beq.n	8000538 <md_can_init_basic+0x32>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_DBF);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	e007      	b.n	8000548 <md_can_init_basic+0x42>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_DBF);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000546:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.time_triggered_comm == true)
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d008      	beq.n	8000560 <md_can_init_basic+0x5a>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TTCM);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e007      	b.n	8000570 <md_can_init_basic+0x6a>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TTCM);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800056e:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.auto_bus_off == true)
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d008      	beq.n	8000588 <md_can_init_basic+0x82>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_ABOM);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e007      	b.n	8000598 <md_can_init_basic+0x92>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_ABOM);
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000596:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.auto_wake_up == true)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d008      	beq.n	80005b0 <md_can_init_basic+0xaa>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_AWUM);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f042 0220 	orr.w	r2, r2, #32
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e007      	b.n	80005c0 <md_can_init_basic+0xba>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_AWUM);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f022 0220 	bic.w	r2, r2, #32
 80005be:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.auto_retransmit == true)
 80005c0:	7a3b      	ldrb	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d008      	beq.n	80005d8 <md_can_init_basic+0xd2>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_NART);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f042 0210 	orr.w	r2, r2, #16
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	e007      	b.n	80005e8 <md_can_init_basic+0xe2>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_NART);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f022 0210 	bic.w	r2, r2, #16
 80005e6:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.rx_fifo_lock == true)
 80005e8:	7a7b      	ldrb	r3, [r7, #9]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d008      	beq.n	8000600 <md_can_init_basic+0xfa>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_RFLM);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f042 0208 	orr.w	r2, r2, #8
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	e007      	b.n	8000610 <md_can_init_basic+0x10a>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_RFLM);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f022 0208 	bic.w	r2, r2, #8
 800060e:	601a      	str	r2, [r3, #0]
    }

  if (basic_init.tx_fifo_prio == true)
 8000610:	7abb      	ldrb	r3, [r7, #10]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <md_can_init_basic+0x122>
    {
      SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TXFP);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f042 0204 	orr.w	r2, r2, #4
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	e007      	b.n	8000638 <md_can_init_basic+0x132>
    }
  else
    {
      CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_TXFP);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f022 0204 	bic.w	r2, r2, #4
 8000636:	601a      	str	r2, [r3, #0]
    }

  return CAN_ERR_NOERR;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <md_can_enter_test_mode>:
 * @param[test_mode] - @can_test_mode
 * @return - can_error_t - can error status
 */
can_error_t md_can_enter_test_mode(can_handle_t *p_hCANx,
                                   can_test_mode_t test_mode)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
  // check if init mode
  if (p_hCANx->op_mode != CAN_OPMODE_INIT)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <md_can_enter_test_mode+0x18>
    {
      return CAN_ERR_WRONG_MDOE;
 8000658:	2304      	movs	r3, #4
 800065a:	e042      	b.n	80006e2 <md_can_enter_test_mode+0x9e>
    }

  switch (test_mode)
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d028      	beq.n	80006b4 <md_can_enter_test_mode+0x70>
 8000662:	2b02      	cmp	r3, #2
 8000664:	dc37      	bgt.n	80006d6 <md_can_enter_test_mode+0x92>
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <md_can_enter_test_mode+0x2c>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d011      	beq.n	8000692 <md_can_enter_test_mode+0x4e>
 800066e:	e032      	b.n	80006d6 <md_can_enter_test_mode+0x92>
    {
    case (CAN_TESTMODE_SILENT):
      SET_BIT(p_hCANx->p_CANx->BTR, CAN_BTR_SILM);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800067e:	61da      	str	r2, [r3, #28]
      CLEAR_BIT(p_hCANx->p_CANx->BTR, CAN_BTR_LBKM);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	69da      	ldr	r2, [r3, #28]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800068e:	61da      	str	r2, [r3, #28]
      break;
 8000690:	e023      	b.n	80006da <md_can_enter_test_mode+0x96>

    case (CAN_TESTMODE_LOOPBACK):
      SET_BIT(p_hCANx->p_CANx->BTR, CAN_BTR_LBKM);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80006a0:	61da      	str	r2, [r3, #28]
      CLEAR_BIT(p_hCANx->p_CANx->BTR, CAN_BTR_SILM);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006b0:	61da      	str	r2, [r3, #28]
      break;
 80006b2:	e012      	b.n	80006da <md_can_enter_test_mode+0x96>

    case (CAN_TESTMODE_SILENTLOOPBACK):
      SET_BIT(p_hCANx->p_CANx->BTR, CAN_BTR_LBKM);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69da      	ldr	r2, [r3, #28]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80006c2:	61da      	str	r2, [r3, #28]
      SET_BIT(p_hCANx->p_CANx->BTR, CAN_BTR_SILM);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	69da      	ldr	r2, [r3, #28]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006d2:	61da      	str	r2, [r3, #28]
      break;
 80006d4:	e001      	b.n	80006da <md_can_enter_test_mode+0x96>

    default:
      return CAN_ERR_SWITCH_MODE;
 80006d6:	2303      	movs	r3, #3
 80006d8:	e003      	b.n	80006e2 <md_can_enter_test_mode+0x9e>
    }

  p_hCANx->op_mode = CAN_OPMODE_TEST;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2203      	movs	r2, #3
 80006de:	715a      	strb	r2, [r3, #5]
  return CAN_ERR_NOERR;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <md_can_write_mailbox>:
 * @param[p_mailbox_number] - pointer to variable that will hold mailbox number that were used
 * @return - can_error_t - can error status
 */
can_error_t md_can_write_mailbox(can_handle_t *p_hCANx, can_frame_t frame,
                                 uint8_t *p_databuffer, uint8_t *p_mailbox_number)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	1d38      	adds	r0, r7, #4
 80006f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80006fa:	603b      	str	r3, [r7, #0]
  uint8_t mailbox = can_get_empty_mailbox(p_hCANx);
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 fa23 	bl	8000b48 <can_get_empty_mailbox>
 8000702:	4603      	mov	r3, r0
 8000704:	75bb      	strb	r3, [r7, #22]

  // check if there is an empty mailbox
  if (mailbox == CAN_MAILBOX_NOMAILBOX)
 8000706:	7dbb      	ldrb	r3, [r7, #22]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d107      	bne.n	800071c <md_can_write_mailbox+0x30>
    {
	  *p_mailbox_number = CAN_MAILBOX_NOMAILBOX;
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	2203      	movs	r2, #3
 8000710:	701a      	strb	r2, [r3, #0]
	  p_hCANx->can_error = CAN_ERR_TX_NO_MAILBOX;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2208      	movs	r2, #8
 8000716:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_TX_NO_MAILBOX;
 8000718:	2308      	movs	r3, #8
 800071a:	e12b      	b.n	8000974 <md_can_write_mailbox+0x288>
    }

  // check if maximum lenghts is not exceeded
  if (frame.data_lenght > 8)
 800071c:	7a3b      	ldrb	r3, [r7, #8]
 800071e:	2b08      	cmp	r3, #8
 8000720:	d904      	bls.n	800072c <md_can_write_mailbox+0x40>
    {
	  p_hCANx->can_error = CAN_ERR_TX_DATA_EXCEEDED;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2207      	movs	r2, #7
 8000726:	711a      	strb	r2, [r3, #4]
      return CAN_ERR_TX_DATA_EXCEEDED;
 8000728:	2307      	movs	r3, #7
 800072a:	e123      	b.n	8000974 <md_can_write_mailbox+0x288>
    }

  // write id and choose standard/extended
  if (frame.id_extended == false)
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	f083 0301 	eor.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d031      	beq.n	800079c <md_can_write_mailbox+0xb0>
    {
      CLEAR_BIT(p_hCANx->p_CANx->sTxMailBox[mailbox].TIR, CAN_TI0R_IDE);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	7dbb      	ldrb	r3, [r7, #22]
 800073e:	3318      	adds	r3, #24
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	4413      	add	r3, r2
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6819      	ldr	r1, [r3, #0]
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	f022 0204 	bic.w	r2, r2, #4
 8000750:	3318      	adds	r3, #24
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	440b      	add	r3, r1
 8000756:	601a      	str	r2, [r3, #0]
      p_hCANx->p_CANx->sTxMailBox[mailbox].TIR &= ~(CAN_TI0R_STID_Msk);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	7dbb      	ldrb	r3, [r7, #22]
 800075e:	3318      	adds	r3, #24
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	7dbb      	ldrb	r3, [r7, #22]
 800076c:	f3c2 0214 	ubfx	r2, r2, #0, #21
 8000770:	3318      	adds	r3, #24
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	440b      	add	r3, r1
 8000776:	601a      	str	r2, [r3, #0]
      p_hCANx->p_CANx->sTxMailBox[mailbox].TIR |=
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	7dbb      	ldrb	r3, [r7, #22]
 800077e:	3318      	adds	r3, #24
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	4413      	add	r3, r2
 8000784:	6818      	ldr	r0, [r3, #0]
          ((frame.id & 0x07FF) << CAN_TI0R_STID_Pos);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	055a      	lsls	r2, r3, #21
      p_hCANx->p_CANx->sTxMailBox[mailbox].TIR |=
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	7dbb      	ldrb	r3, [r7, #22]
 8000790:	4302      	orrs	r2, r0
 8000792:	3318      	adds	r3, #24
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	440b      	add	r3, r1
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e033      	b.n	8000804 <md_can_write_mailbox+0x118>
    }
  else if (frame.id_extended == true)
 800079c:	7a7b      	ldrb	r3, [r7, #9]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d030      	beq.n	8000804 <md_can_write_mailbox+0x118>
    {
      SET_BIT(p_hCANx->p_CANx->sTxMailBox[mailbox].TIR, CAN_TI0R_IDE);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	7dbb      	ldrb	r3, [r7, #22]
 80007a8:	3318      	adds	r3, #24
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	4413      	add	r3, r2
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	7dbb      	ldrb	r3, [r7, #22]
 80007b6:	f042 0204 	orr.w	r2, r2, #4
 80007ba:	3318      	adds	r3, #24
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	440b      	add	r3, r1
 80007c0:	601a      	str	r2, [r3, #0]
      p_hCANx->p_CANx->sTxMailBox[mailbox].TIR &= ~(CAN_TI0R_EXID_Msk);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	7dbb      	ldrb	r3, [r7, #22]
 80007c8:	3318      	adds	r3, #24
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	4413      	add	r3, r2
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	7dba      	ldrb	r2, [r7, #22]
 80007d6:	4b69      	ldr	r3, [pc, #420]	; (800097c <md_can_write_mailbox+0x290>)
 80007d8:	4003      	ands	r3, r0
 80007da:	3218      	adds	r2, #24
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	440a      	add	r2, r1
 80007e0:	6013      	str	r3, [r2, #0]
      p_hCANx->p_CANx->sTxMailBox[mailbox].TIR |=
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	7dbb      	ldrb	r3, [r7, #22]
 80007e8:	3318      	adds	r3, #24
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	4413      	add	r3, r2
 80007ee:	6818      	ldr	r0, [r3, #0]
          ((frame.id & 0x1FFFFFFF) << CAN_TI0R_EXID_Pos);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	00da      	lsls	r2, r3, #3
      p_hCANx->p_CANx->sTxMailBox[mailbox].TIR |=
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
 80007fa:	4302      	orrs	r2, r0
 80007fc:	3318      	adds	r3, #24
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	440b      	add	r3, r1
 8000802:	601a      	str	r2, [r3, #0]
    }

  // set data lenght
  p_hCANx->p_CANx->sTxMailBox[mailbox].TDTR &= ~(CAN_TDT0R_DLC_Msk);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	7dbb      	ldrb	r3, [r7, #22]
 800080a:	3318      	adds	r3, #24
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	4413      	add	r3, r2
 8000810:	3304      	adds	r3, #4
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	7dbb      	ldrb	r3, [r7, #22]
 800081a:	f022 020f 	bic.w	r2, r2, #15
 800081e:	3318      	adds	r3, #24
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3304      	adds	r3, #4
 8000826:	601a      	str	r2, [r3, #0]
  p_hCANx->p_CANx->sTxMailBox[mailbox].TDTR |=
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	7dbb      	ldrb	r3, [r7, #22]
 800082e:	3318      	adds	r3, #24
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4413      	add	r3, r2
 8000834:	3304      	adds	r3, #4
 8000836:	681a      	ldr	r2, [r3, #0]
      (frame.data_lenght << CAN_TDT0R_DLC_Pos);
 8000838:	7a3b      	ldrb	r3, [r7, #8]
 800083a:	4618      	mov	r0, r3
  p_hCANx->p_CANx->sTxMailBox[mailbox].TDTR |=
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	7dbb      	ldrb	r3, [r7, #22]
 8000842:	4302      	orrs	r2, r0
 8000844:	3318      	adds	r3, #24
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3304      	adds	r3, #4
 800084c:	601a      	str	r2, [r3, #0]

  // prepare remote or data msg
  if(frame.remote == true)
 800084e:	7abb      	ldrb	r3, [r7, #10]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d010      	beq.n	8000876 <md_can_write_mailbox+0x18a>
  {
	  SET_BIT(p_hCANx->p_CANx->sTxMailBox[mailbox].TIR, CAN_TI0R_RTR);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	7dbb      	ldrb	r3, [r7, #22]
 800085a:	3318      	adds	r3, #24
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	7dbb      	ldrb	r3, [r7, #22]
 8000868:	f042 0202 	orr.w	r2, r2, #2
 800086c:	3318      	adds	r3, #24
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	440b      	add	r3, r1
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	e067      	b.n	8000946 <md_can_write_mailbox+0x25a>
  }else
  {
	  CLEAR_BIT(p_hCANx->p_CANx->sTxMailBox[mailbox].TIR, CAN_TI0R_RTR);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	7dbb      	ldrb	r3, [r7, #22]
 800087c:	3318      	adds	r3, #24
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4413      	add	r3, r2
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	7dbb      	ldrb	r3, [r7, #22]
 800088a:	f022 0202 	bic.w	r2, r2, #2
 800088e:	3318      	adds	r3, #24
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	440b      	add	r3, r1
 8000894:	601a      	str	r2, [r3, #0]
	  // clear data registers
	  p_hCANx->p_CANx->sTxMailBox[mailbox].TDLR = 0;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	4413      	add	r3, r2
 80008a0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
	  p_hCANx->p_CANx->sTxMailBox[mailbox].TDHR = 0;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	7dbb      	ldrb	r3, [r7, #22]
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	4413      	add	r3, r2
 80008b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]

	  // write data to registers
	  for (uint8_t i = 0; i < frame.data_lenght; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	75fb      	strb	r3, [r7, #23]
 80008be:	e03e      	b.n	800093e <md_can_write_mailbox+0x252>
	    {
	      if (i < 4)
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d81b      	bhi.n	80008fe <md_can_write_mailbox+0x212>
	        {
	          p_hCANx->p_CANx->sTxMailBox[mailbox].TDLR |=
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	7dbb      	ldrb	r3, [r7, #22]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	4413      	add	r3, r2
 80008d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008d4:	681a      	ldr	r2, [r3, #0]
	              (p_databuffer[i] << (i * 8));
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
 80008d8:	6839      	ldr	r1, [r7, #0]
 80008da:	440b      	add	r3, r1
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	4618      	mov	r0, r3
	          p_hCANx->p_CANx->sTxMailBox[mailbox].TDLR |=
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	4302      	orrs	r2, r0
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	440b      	add	r3, r1
 80008f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e01c      	b.n	8000938 <md_can_write_mailbox+0x24c>
	        }
	      else
	        {
	          p_hCANx->p_CANx->sTxMailBox[mailbox].TDHR |=
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	7dbb      	ldrb	r3, [r7, #22]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4413      	add	r3, r2
 8000908:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800090c:	681a      	ldr	r2, [r3, #0]
	              (p_databuffer[i] << ((i % 4) * 8));
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	6839      	ldr	r1, [r7, #0]
 8000912:	440b      	add	r3, r1
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	4618      	mov	r0, r3
	          p_hCANx->p_CANx->sTxMailBox[mailbox].TDHR |=
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	7dbb      	ldrb	r3, [r7, #22]
 800092c:	4302      	orrs	r2, r0
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	440b      	add	r3, r1
 8000932:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000936:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < frame.data_lenght; i++)
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	3301      	adds	r3, #1
 800093c:	75fb      	strb	r3, [r7, #23]
 800093e:	7a3b      	ldrb	r3, [r7, #8]
 8000940:	7dfa      	ldrb	r2, [r7, #23]
 8000942:	429a      	cmp	r2, r3
 8000944:	d3bc      	bcc.n	80008c0 <md_can_write_mailbox+0x1d4>
	        }
	    }
  }

  // request transmission
  *p_mailbox_number = mailbox;
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	7dba      	ldrb	r2, [r7, #22]
 800094a:	701a      	strb	r2, [r3, #0]
  SET_BIT(p_hCANx->p_CANx->sTxMailBox[mailbox].TIR, CAN_TI0R_TXRQ);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	3318      	adds	r3, #24
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4413      	add	r3, r2
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6819      	ldr	r1, [r3, #0]
 800095e:	7dbb      	ldrb	r3, [r7, #22]
 8000960:	f042 0201 	orr.w	r2, r2, #1
 8000964:	3318      	adds	r3, #24
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	440b      	add	r3, r1
 800096a:	601a      	str	r2, [r3, #0]
  p_hCANx->can_error = CAN_ERR_NOERR;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2200      	movs	r2, #0
 8000970:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	ffe00007 	.word	0xffe00007

08000980 <can_enter_init_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_init_mode(can_handle_t *p_hCANx,
                                       uint32_t timeout_ms)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f042 0201 	orr.w	r2, r2, #1
 800099c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0202 	bic.w	r2, r2, #2
 80009ac:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80009ae:	e00c      	b.n	80009ca <can_enter_init_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80009b0:	f000 fd2a 	bl	8001408 <md_systick_get_tick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d204      	bcs.n	80009ca <can_enter_init_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2201      	movs	r2, #1
 80009c4:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e022      	b.n	8000a10 <can_enter_init_mode+0x90>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_INAK))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0eb      	beq.n	80009b0 <can_enter_init_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80009d8:	e00c      	b.n	80009f4 <can_enter_init_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 80009da:	f000 fd15 	bl	8001408 <md_systick_get_tick>
 80009de:	4602      	mov	r2, r0
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d204      	bcs.n	80009f4 <can_enter_init_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2202      	movs	r2, #2
 80009ee:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	e00d      	b.n	8000a10 <can_enter_init_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1eb      	bne.n	80009da <can_enter_init_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_INIT;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <can_enter_normal_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_normal_mode(can_handle_t *p_hCANx,
                                         uint32_t timeout_ms)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0201 	bic.w	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0202 	bic.w	r2, r2, #2
 8000a44:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8000a46:	e00c      	b.n	8000a62 <can_enter_normal_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8000a48:	f000 fcde 	bl	8001408 <md_systick_get_tick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d204      	bcs.n	8000a62 <can_enter_normal_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e022      	b.n	8000aa8 <can_enter_normal_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1eb      	bne.n	8000a48 <can_enter_normal_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8000a70:	e00c      	b.n	8000a8c <can_enter_normal_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8000a72:	f000 fcc9 	bl	8001408 <md_systick_get_tick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d204      	bcs.n	8000a8c <can_enter_normal_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2202      	movs	r2, #2
 8000a86:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e00d      	b.n	8000aa8 <can_enter_normal_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_SLAK)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1eb      	bne.n	8000a72 <can_enter_normal_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_NORMAL;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <can_enter_sleep_mode>:
 * @param[timeout_ms] - timeout in miliseonds
 * @return - can_error_t - can error status
 */
static can_error_t can_enter_sleep_mode(can_handle_t *p_hCANx,
                                        uint32_t timeout_ms)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t time_tick = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  // request entering init mode
  CLEAR_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_INRQ);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f022 0201 	bic.w	r2, r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
  SET_BIT(p_hCANx->p_CANx->MCR, CAN_MCR_SLEEP);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0202 	orr.w	r2, r2, #2
 8000adc:	601a      	str	r2, [r3, #0]

  // wait init mode enter is acknowledged
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8000ade:	e00c      	b.n	8000afa <can_enter_sleep_mode+0x4a>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8000ae0:	f000 fc92 	bl	8001408 <md_systick_get_tick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d204      	bcs.n	8000afa <can_enter_sleep_mode+0x4a>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_INAK;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_INAK;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e022      	b.n	8000b40 <can_enter_sleep_mode+0x90>
  while (p_hCANx->p_CANx->MSR & CAN_MSR_INAK)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1eb      	bne.n	8000ae0 <can_enter_sleep_mode+0x30>
        }
    }

  // wait sleep mode exit is acknowledged
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8000b08:	e00c      	b.n	8000b24 <can_enter_sleep_mode+0x74>
    {
      if ((md_systick_get_tick() - time_tick) > timeout_ms)
 8000b0a:	f000 fc7d 	bl	8001408 <md_systick_get_tick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d204      	bcs.n	8000b24 <can_enter_sleep_mode+0x74>
        {
          p_hCANx->can_error = CAN_ERR_TIMEOUT_SLAK;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	711a      	strb	r2, [r3, #4]
          return CAN_ERR_TIMEOUT_SLAK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	e00d      	b.n	8000b40 <can_enter_sleep_mode+0x90>
  while (!(p_hCANx->p_CANx->MSR & CAN_MSR_SLAK))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0eb      	beq.n	8000b0a <can_enter_sleep_mode+0x5a>
        }
    }

  // change operation mode status
  p_hCANx->op_mode = CAN_OPMODE_SLEEP;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2202      	movs	r2, #2
 8000b36:	715a      	strb	r2, [r3, #5]

  p_hCANx->can_error = CAN_ERR_NOERR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	711a      	strb	r2, [r3, #4]
  return CAN_ERR_NOERR;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <can_get_empty_mailbox>:
 * return mailbox number that can be used to send a new message
 * @param[*p_hCANx] - @can_handler
 * @return - mailbox number
 */
can_mailbox_t can_get_empty_mailbox(can_handle_t *p_hCANx)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if (p_hCANx->p_CANx->TSR & CAN_TSR_TME0)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <can_get_empty_mailbox+0x1a>
    {
      return CAN_MAILBOX0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e012      	b.n	8000b88 <can_get_empty_mailbox+0x40>
    }
  else if (p_hCANx->p_CANx->TSR & CAN_TSR_TME1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <can_get_empty_mailbox+0x2c>
    {
      return CAN_MAILBOX1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e009      	b.n	8000b88 <can_get_empty_mailbox+0x40>
    }
  else if (p_hCANx->p_CANx->TSR & CAN_TSR_TME2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <can_get_empty_mailbox+0x3e>
    {
      return CAN_MAILBOX2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	e000      	b.n	8000b88 <can_get_empty_mailbox+0x40>
    }
  else
    {
      return CAN_MAILBOX_NOMAILBOX;
 8000b86:	2303      	movs	r3, #3
    }
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <md_gpio_init_clock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void md_gpio_init_clock(GPIO_TypeDef *p_GPIOx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if (p_GPIOx == GPIOA)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <md_gpio_init_clock+0xc8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d112      	bne.n	8000bca <md_gpio_init_clock+0x36>
    {
      RCC_CLOCK_ENABLE_IOPA();
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPARST);
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bc2:	f023 0304 	bic.w	r3, r3, #4
 8000bc6:	60d3      	str	r3, [r2, #12]
      RCC_CLOCK_ENABLE_IOPD();
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
    }

  return;
 8000bc8:	e043      	b.n	8000c52 <md_gpio_init_clock+0xbe>
  else if (p_GPIOx == GPIOB)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <md_gpio_init_clock+0xd0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d112      	bne.n	8000bf8 <md_gpio_init_clock+0x64>
      RCC_CLOCK_ENABLE_IOPB();
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPBRST);
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000bf0:	f023 0308 	bic.w	r3, r3, #8
 8000bf4:	60d3      	str	r3, [r2, #12]
  return;
 8000bf6:	e02c      	b.n	8000c52 <md_gpio_init_clock+0xbe>
  else if (p_GPIOx == GPIOC)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <md_gpio_init_clock+0xd4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d112      	bne.n	8000c26 <md_gpio_init_clock+0x92>
      RCC_CLOCK_ENABLE_IOPC();
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPCRST);
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c1e:	f023 0310 	bic.w	r3, r3, #16
 8000c22:	60d3      	str	r3, [r2, #12]
  return;
 8000c24:	e015      	b.n	8000c52 <md_gpio_init_clock+0xbe>
  else if (p_GPIOx)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d012      	beq.n	8000c52 <md_gpio_init_clock+0xbe>
      RCC_CLOCK_ENABLE_IOPD();
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6193      	str	r3, [r2, #24]
      SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c3e:	f043 0320 	orr.w	r3, r3, #32
 8000c42:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_IOPDRST);
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <md_gpio_init_clock+0xcc>)
 8000c4a:	f023 0320 	bic.w	r3, r3, #32
 8000c4e:	60d3      	str	r3, [r2, #12]
  return;
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
}
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40011000 	.word	0x40011000

08000c6c <md_gpio_configure_output>:
 */
void md_gpio_configure_output(GPIO_TypeDef *p_GPIOx,
                              gpio_pin_number_t pin_number,
                              gpio_speed_t output_speed,
                              gpio_ouput_config_t output_conifg)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	4608      	mov	r0, r1
 8000c76:	4611      	mov	r1, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	70fb      	strb	r3, [r7, #3]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70bb      	strb	r3, [r7, #2]
 8000c82:	4613      	mov	r3, r2
 8000c84:	707b      	strb	r3, [r7, #1]
  // choose between CRL/CRH
  if (pin_number < 8)
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d820      	bhi.n	8000cce <md_gpio_configure_output+0x62>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	78fa      	ldrb	r2, [r7, #3]
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	210f      	movs	r1, #15
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	43d2      	mvns	r2, r2
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]

      // set mode and config
      p_GPIOx->CRL |= (output_speed << (pin_number * 4));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	78b9      	ldrb	r1, [r7, #2]
 8000ca8:	78fa      	ldrb	r2, [r7, #3]
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
      p_GPIOx->CRL |= (output_conifg << ((pin_number * 4) + 2));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7879      	ldrb	r1, [r7, #1]
 8000cbc:	78fa      	ldrb	r2, [r7, #3]
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	3202      	adds	r2, #2
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
      // set mode and config
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
    }

  return;
 8000ccc:	e023      	b.n	8000d16 <md_gpio_configure_output+0xaa>
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	78fa      	ldrb	r2, [r7, #3]
 8000cd4:	3a08      	subs	r2, #8
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	210f      	movs	r1, #15
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	43d2      	mvns	r2, r2
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_speed << ((pin_number - 8) * 4));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	78b9      	ldrb	r1, [r7, #2]
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	3a08      	subs	r2, #8
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	605a      	str	r2, [r3, #4]
      p_GPIOx->CRH |= (output_conifg << (((pin_number - 8) * 4) + 2));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	7879      	ldrb	r1, [r7, #1]
 8000d02:	78fa      	ldrb	r2, [r7, #3]
 8000d04:	3a08      	subs	r2, #8
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	3202      	adds	r2, #2
 8000d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	605a      	str	r2, [r3, #4]
  return;
 8000d14:	bf00      	nop
}
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <md_gpio_configure_input>:
 * @return - void
 */
void md_gpio_configure_input(GPIO_TypeDef *p_GPIOx,
                             gpio_pin_number_t pin_number,
                             gpio_input_config input_config)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	70fb      	strb	r3, [r7, #3]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	70bb      	strb	r3, [r7, #2]
  // choose between CRL/CRH
  if (pin_number < 8)
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d825      	bhi.n	8000d80 <md_gpio_configure_input+0x62>
    {
      // clear config and mode bits
      p_GPIOx->CRL &= ~(0x0F << (pin_number * 4));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000d4a:	78bb      	ldrb	r3, [r7, #2]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d90b      	bls.n	8000d68 <md_gpio_configure_input+0x4a>
        {
          p_GPIOx->CRL |= (GPIO_INPUT_PULLUP << ((pin_number * 4) + 2));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	3202      	adds	r2, #2
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e033      	b.n	8000dd0 <md_gpio_configure_input+0xb2>
        }
      else
        {
          p_GPIOx->CRL |= (input_config << ((pin_number * 4) + 2));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	78b9      	ldrb	r1, [r7, #2]
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	3202      	adds	r2, #2
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e027      	b.n	8000dd0 <md_gpio_configure_input+0xb2>
        }
    }
  else
    {
      // clear config and mode bits
      p_GPIOx->CRH &= ~(0x0F << ((pin_number - 8) * 4));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	3a08      	subs	r2, #8
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	605a      	str	r2, [r3, #4]

      // set config
      if (input_config > GPIO_INPUT_FLOATING)
 8000d98:	78bb      	ldrb	r3, [r7, #2]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d90c      	bls.n	8000db8 <md_gpio_configure_input+0x9a>
        {
          p_GPIOx->CRH |= (GPIO_INPUT_PULLUP << (((pin_number - 8) * 4) + 2));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	3a08      	subs	r2, #8
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	3202      	adds	r2, #2
 8000daa:	2102      	movs	r1, #2
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	e00b      	b.n	8000dd0 <md_gpio_configure_input+0xb2>
        }
      else
        {
          p_GPIOx->CRH |= (input_config << (((pin_number - 8) * 4) + 2));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	78b9      	ldrb	r1, [r7, #2]
 8000dbe:	78fa      	ldrb	r2, [r7, #3]
 8000dc0:	3a08      	subs	r2, #8
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	3202      	adds	r2, #2
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	605a      	str	r2, [r3, #4]
        }
    }

  // set or reset ouput register - pullup must have 1 in ODR
  if (input_config == GPIO_INPUT_PULLUP)
 8000dd0:	78bb      	ldrb	r3, [r7, #2]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d107      	bne.n	8000de6 <md_gpio_configure_input+0xc8>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	611a      	str	r2, [r3, #16]
  else
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000de4:	e007      	b.n	8000df6 <md_gpio_configure_input+0xd8>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	2201      	movs	r2, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	615a      	str	r2, [r3, #20]
  return;
 8000df4:	bf00      	nop
}
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <md_gpio_write_pin>:
 * @param[value] - GPIO_PIN_SET/GPIO_PIN_RESET
 * @return - void
 */
void md_gpio_write_pin(GPIO_TypeDef *p_GPIOx, gpio_pin_number_t pin_number,
                       uint8_t value)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	70bb      	strb	r3, [r7, #2]
  if (value == GPIO_PIN_SET)
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d107      	bne.n	8000e24 <md_gpio_write_pin+0x26>
    {
      p_GPIOx->BSRR = (0x01 << pin_number);
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	2201      	movs	r2, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
  else if (value == GPIO_PIN_RESET)
    {
      p_GPIOx->BRR = (0x01 << pin_number);
    }

  return;
 8000e22:	e00a      	b.n	8000e3a <md_gpio_write_pin+0x3c>
  else if (value == GPIO_PIN_RESET)
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d107      	bne.n	8000e3a <md_gpio_write_pin+0x3c>
      p_GPIOx->BRR = (0x01 << pin_number);
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	615a      	str	r2, [r3, #20]
  return;
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
}
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <md_rcc_configure_sysclk>:
 * @param[hse_div] - pll1 hse division factor @rcc_hse_div
 * @return - void
 */
void md_rcc_configure_sysclk(rcc_sysclk_source_t sysclk_source,
                             rcc_pll_source_t pll_source,
                             rcc_pll1_mul_t pll1_mul, rcc_hse_div_t hse_div) {
 8000e44:	b490      	push	{r4, r7}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	4603      	mov	r3, r0
 8000e58:	71bb      	strb	r3, [r7, #6]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	717b      	strb	r3, [r7, #5]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	713b      	strb	r3, [r7, #4]
  // enable HSI
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSI ||
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <md_rcc_configure_sysclk+0x2a>
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <md_rcc_configure_sysclk+0x44>
      pll_source == RCC_PLL_SOURCE_HSI) {
    SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a37      	ldr	r2, [pc, #220]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6013      	str	r3, [r2, #0]
    // wait until HSI is ready
    while (!(RCC->CR & RCC_CR_HSIRDY))
 8000e7a:	bf00      	nop
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f9      	beq.n	8000e7c <md_rcc_configure_sysclk+0x38>
      ;
  }

  // enable HSE
  if (sysclk_source == RCC_SYSCLK_SOURCE_HSE ||
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d002      	beq.n	8000e94 <md_rcc_configure_sysclk+0x50>
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10c      	bne.n	8000eae <md_rcc_configure_sysclk+0x6a>
      pll_source == RCC_PLL_SOURCE_HSE) {
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e94:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
    // wait until HSE is ready
    while (!(RCC->CR & RCC_CR_HSERDY))
 8000ea0:	bf00      	nop
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <md_rcc_configure_sysclk+0x5e>
      ;
  }

  // configure PLL
  if (sysclk_source == RCC_SYSCLK_SOURCE_PLL) {
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d139      	bne.n	8000f28 <md_rcc_configure_sysclk+0xe4>
    // choose PLL source and multiplier
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebe:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll_source << RCC_CFGR_PLLSRC_Pos);
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	79ba      	ldrb	r2, [r7, #6]
 8000ec6:	0412      	lsls	r2, r2, #16
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ed6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000eda:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (pll1_mul << RCC_CFGR_PLLMULL_Pos);
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	797a      	ldrb	r2, [r7, #5]
 8000ee2:	0492      	lsls	r2, r2, #18
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6053      	str	r3, [r2, #4]

    // if source is HSE choose prediv
    if (pll_source == RCC_PLL_SOURCE_HSE) {
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d10d      	bne.n	8000f0e <md_rcc_configure_sysclk+0xca>
      RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000ef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efc:	6053      	str	r3, [r2, #4]
      RCC->CFGR |= (hse_div << RCC_CFGR_PLLXTPRE_Pos);
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	793a      	ldrb	r2, [r7, #4]
 8000f04:	0452      	lsls	r2, r2, #17
 8000f06:	4611      	mov	r1, r2
 8000f08:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	6053      	str	r3, [r2, #4]
    }

    // enable PLL
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f18:	6013      	str	r3, [r2, #0]
    // wait until PLL is ready
    while (!(RCC->CR & RCC_CR_PLLRDY))
 8000f1a:	bf00      	nop
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f9      	beq.n	8000f1c <md_rcc_configure_sysclk+0xd8>
      ;
  }

  // change sysclk source
  RCC->CFGR |= (sysclk_source << RCC_CFGR_SW_Pos);
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]

   //wait until sys clock is switched
   while (!(RCC->CFGR & (sysclk_source << 2U)))
 8000f34:	bf00      	nop
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <md_rcc_configure_sysclk+0x10c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	79fa      	ldrb	r2, [r7, #7]
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f8      	beq.n	8000f36 <md_rcc_configure_sysclk+0xf2>
      ;

  return;
 8000f44:	bf00      	nop
}
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc90      	pop	{r4, r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <md_rcc_configure_prescalers>:
 * @return - void
 */
void md_rcc_configure_prescalers(rcc_ahb_prescaler_t ahb_prescaler,
                                 rcc_apb_prescaler_t apb1_prescaler,
                                 rcc_apb_prescaler_t apb2_prescaler,
                                 rcc_adc_prescaler_t adc_prescaler) {
 8000f54:	b490      	push	{r4, r7}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	4611      	mov	r1, r2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4623      	mov	r3, r4
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	4603      	mov	r3, r0
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	717b      	strb	r3, [r7, #5]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	713b      	strb	r3, [r7, #4]
  // configure ahb prescaler
  RCC->CFGR |= (ahb_prescaler << RCC_CFGR_HPRE_Pos);
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	6053      	str	r3, [r2, #4]

  // configure apb1/apb2 prescalers
  RCC->CFGR |= (apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	0212      	lsls	r2, r2, #8
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	797a      	ldrb	r2, [r7, #5]
 8000f98:	02d2      	lsls	r2, r2, #11
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	6053      	str	r3, [r2, #4]

  // configure adc prescaler
  RCC->CFGR |= (adc_prescaler << RCC_CFGR_ADCPRE_Pos);
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	793a      	ldrb	r2, [r7, #4]
 8000fa8:	0392      	lsls	r2, r2, #14
 8000faa:	4611      	mov	r1, r2
 8000fac:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <md_rcc_configure_prescalers+0x68>)
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6053      	str	r3, [r2, #4]

  return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc90      	pop	{r4, r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <md_rcc_get_sysclk>:
 * Get system clock frequency depending on selected source
 * HSI/HSE speed must be predefined @rcc_oscillators_frequencies
 * @param[void]
 * @return - void
 */
uint32_t md_rcc_get_sysclk(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  // Calculate sysclk depending on source
  switch (RCC->CFGR & RCC_CFGR_SWS) {
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <md_rcc_get_sysclk+0x34>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d00a      	beq.n	8000fe6 <md_rcc_get_sysclk+0x26>
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d80c      	bhi.n	8000fee <md_rcc_get_sysclk+0x2e>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <md_rcc_get_sysclk+0x1e>
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d002      	beq.n	8000fe2 <md_rcc_get_sysclk+0x22>
 8000fdc:	e007      	b.n	8000fee <md_rcc_get_sysclk+0x2e>
    case (RCC_CFGR_SWS_HSI):
      return RCC_HSI_FREQUENCY;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <md_rcc_get_sysclk+0x38>)
 8000fe0:	e006      	b.n	8000ff0 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_HSE):
      return RCC_HSE_FREQUENCY;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <md_rcc_get_sysclk+0x38>)
 8000fe4:	e004      	b.n	8000ff0 <md_rcc_get_sysclk+0x30>
      break;

    case (RCC_CFGR_SWS_PLL):
      return rcc_calculate_pll_sysclk();
 8000fe6:	f000 f947 	bl	8001278 <rcc_calculate_pll_sysclk>
 8000fea:	4603      	mov	r3, r0
 8000fec:	e000      	b.n	8000ff0 <md_rcc_get_sysclk+0x30>
      break;
  }

  return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	007a1200 	.word	0x007a1200

08000ffc <md_rcc_get_hclk>:
/*
 * Calculate ahb clock frequency
 * @param[void]
 * @return - hclk frequency
 */
uint32_t md_rcc_get_hclk(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  uint32_t sysclk = md_rcc_get_sysclk();
 8001002:	f7ff ffdd 	bl	8000fc0 <md_rcc_get_sysclk>
 8001006:	6078      	str	r0, [r7, #4]
  uint16_t ahb_prescaler = rcc_get_ahb_prescaler();
 8001008:	f000 f856 	bl	80010b8 <rcc_get_ahb_prescaler>
 800100c:	4603      	mov	r3, r0
 800100e:	807b      	strh	r3, [r7, #2]
  return sysclk / ahb_prescaler;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <md_rcc_get_pclk>:
/*
 * Calculate apb clock frequency
 * @param[pclk_x] - 1/2 pclk number
 * @return - pclk frequency
 */
uint32_t md_rcc_get_pclk(uint8_t pclk_x) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  uint32_t hclk = md_rcc_get_hclk();
 800102a:	f7ff ffe7 	bl	8000ffc <md_rcc_get_hclk>
 800102e:	60f8      	str	r0, [r7, #12]
  uint8_t apb_prescaler = rcc_get_apb_prescaler(pclk_x);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f896 	bl	8001164 <rcc_get_apb_prescaler>
 8001038:	4603      	mov	r3, r0
 800103a:	72fb      	strb	r3, [r7, #11]
  return hclk / apb_prescaler;
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <md_rcc_get_adcclk>:
 * Calculate adc clock frequency
 * @param[void]
 * @return - adcclk frequency
 */
uint32_t md_rcc_get_adcclk(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	uint32_t pclk2 = md_rcc_get_pclk(2);
 8001052:	2002      	movs	r0, #2
 8001054:	f7ff ffe4 	bl	8001020 <md_rcc_get_pclk>
 8001058:	6078      	str	r0, [r7, #4]
	uint8_t adc_prescaler = rcc_get_adc_prescaler();
 800105a:	f000 f94b 	bl	80012f4 <rcc_get_adc_prescaler>
 800105e:	4603      	mov	r3, r0
 8001060:	70fb      	strb	r3, [r7, #3]
	return pclk2/adc_prescaler;
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <md_rcc_get_frequencies>:
/*
 * Save all the clock frequencies in clock_freqs struct
 * @param[*p_clock_freqs] - pointer to frequencies struct
 * @return - void
 */
void md_rcc_get_frequencies(rcc_clock_freqs_t *p_clock_freqs) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  p_clock_freqs->sysclk = md_rcc_get_sysclk();
 800107a:	f7ff ffa1 	bl	8000fc0 <md_rcc_get_sysclk>
 800107e:	4602      	mov	r2, r0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]
  p_clock_freqs->hclk = md_rcc_get_hclk();
 8001084:	f7ff ffba 	bl	8000ffc <md_rcc_get_hclk>
 8001088:	4602      	mov	r2, r0
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]
  p_clock_freqs->pclk1 = md_rcc_get_pclk(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ffc6 	bl	8001020 <md_rcc_get_pclk>
 8001094:	4602      	mov	r2, r0
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	609a      	str	r2, [r3, #8]
  p_clock_freqs->pclk2 = md_rcc_get_pclk(2);
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff ffc0 	bl	8001020 <md_rcc_get_pclk>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60da      	str	r2, [r3, #12]
  p_clock_freqs->adcclk = md_rcc_get_adcclk();
 80010a6:	f7ff ffd1 	bl	800104c <md_rcc_get_adcclk>
 80010aa:	4602      	mov	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]

  return;
 80010b0:	bf00      	nop
}
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <rcc_get_ahb_prescaler>:
/*
 * Change bit value from ahb prescaler register to uint number
 * @param[void]
 * @return - ahb_prescaler value
 */
static uint16_t rcc_get_ahb_prescaler(void) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  uint32_t ahb_prescaler;
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_HPRE_Pos) & 0x0F;
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <rcc_get_ahb_prescaler+0xa8>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	70fb      	strb	r3, [r7, #3]

  // convert bit code to prescaler value
  switch (bitvalue) {
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d83f      	bhi.n	8001152 <rcc_get_ahb_prescaler+0x9a>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <rcc_get_ahb_prescaler+0x20>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	08001119 	.word	0x08001119
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001153 	.word	0x08001153
 80010e4:	08001153 	.word	0x08001153
 80010e8:	08001153 	.word	0x08001153
 80010ec:	08001153 	.word	0x08001153
 80010f0:	08001153 	.word	0x08001153
 80010f4:	08001153 	.word	0x08001153
 80010f8:	0800111f 	.word	0x0800111f
 80010fc:	08001125 	.word	0x08001125
 8001100:	0800112b 	.word	0x0800112b
 8001104:	08001131 	.word	0x08001131
 8001108:	08001137 	.word	0x08001137
 800110c:	0800113d 	.word	0x0800113d
 8001110:	08001143 	.word	0x08001143
 8001114:	0800114b 	.word	0x0800114b
    case (RCC_AHB_PRESCALER_NODIV):
      ahb_prescaler = 1;
 8001118:	2301      	movs	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
      break;
 800111c:	e019      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV2):
      ahb_prescaler = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	607b      	str	r3, [r7, #4]
      break;
 8001122:	e016      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV4):
      ahb_prescaler = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	607b      	str	r3, [r7, #4]
      break;
 8001128:	e013      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV8):
      ahb_prescaler = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	607b      	str	r3, [r7, #4]
      break;
 800112e:	e010      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV16):
      ahb_prescaler = 16;
 8001130:	2310      	movs	r3, #16
 8001132:	607b      	str	r3, [r7, #4]
      break;
 8001134:	e00d      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV64):
      ahb_prescaler = 64;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	607b      	str	r3, [r7, #4]
      break;
 800113a:	e00a      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV128):
      ahb_prescaler = 128;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	607b      	str	r3, [r7, #4]
      break;
 8001140:	e007      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV256):
      ahb_prescaler = 256;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	607b      	str	r3, [r7, #4]
      break;
 8001148:	e003      	b.n	8001152 <rcc_get_ahb_prescaler+0x9a>
    case (RCC_AHB_PRESCALER_DIV512):
      ahb_prescaler = 512;
 800114a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114e:	607b      	str	r3, [r7, #4]
      break;
 8001150:	bf00      	nop
  }

  return ahb_prescaler;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b29b      	uxth	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000

08001164 <rcc_get_apb_prescaler>:
/*
 * Change bit value from apb prescaler register to uint number
 * @param[void]
 * @return - apb_prescaler value
 */
static uint16_t rcc_get_apb_prescaler(uint8_t pclk) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  uint32_t apb_prescaler;
  uint8_t bitvalue;

  // get bit value from register
  switch (pclk) {
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d002      	beq.n	800117a <rcc_get_apb_prescaler+0x16>
 8001174:	2b02      	cmp	r3, #2
 8001176:	d008      	beq.n	800118a <rcc_get_apb_prescaler+0x26>
 8001178:	e00f      	b.n	800119a <rcc_get_apb_prescaler+0x36>
    case (1):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE1_Pos) & 0x07;
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <rcc_get_apb_prescaler+0x90>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	0a1b      	lsrs	r3, r3, #8
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	72fb      	strb	r3, [r7, #11]
      break;
 8001188:	e007      	b.n	800119a <rcc_get_apb_prescaler+0x36>
    case (2):
      bitvalue = (RCC->CFGR >> RCC_CFGR_PPRE2_Pos) & 0x07;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <rcc_get_apb_prescaler+0x90>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	0adb      	lsrs	r3, r3, #11
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	72fb      	strb	r3, [r7, #11]
      break;
 8001198:	bf00      	nop
  }

  // convert bit code to prescaler value
  switch (bitvalue) {
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d822      	bhi.n	80011e6 <rcc_get_apb_prescaler+0x82>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <rcc_get_apb_prescaler+0x44>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011c9 	.word	0x080011c9
 80011ac:	080011e7 	.word	0x080011e7
 80011b0:	080011e7 	.word	0x080011e7
 80011b4:	080011e7 	.word	0x080011e7
 80011b8:	080011cf 	.word	0x080011cf
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011db 	.word	0x080011db
 80011c4:	080011e1 	.word	0x080011e1
    case (RCC_APB_PRESCALER_NODIV):
      apb_prescaler = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
      break;
 80011cc:	e00b      	b.n	80011e6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV2):
      apb_prescaler = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60fb      	str	r3, [r7, #12]
      break;
 80011d2:	e008      	b.n	80011e6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV4):
      apb_prescaler = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
      break;
 80011d8:	e005      	b.n	80011e6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV8):
      apb_prescaler = 8;
 80011da:	2308      	movs	r3, #8
 80011dc:	60fb      	str	r3, [r7, #12]
      break;
 80011de:	e002      	b.n	80011e6 <rcc_get_apb_prescaler+0x82>
    case (RCC_APB_PRESCALER_DIV16):
      apb_prescaler = 16;
 80011e0:	2310      	movs	r3, #16
 80011e2:	60fb      	str	r3, [r7, #12]
      break;
 80011e4:	bf00      	nop
  }

  return apb_prescaler;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	b29b      	uxth	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000

080011f8 <rcc_get_pll_multiplier>:
/*
 * Change bit value from pll multiplier to uint value
 * @param[void]
 * @return - pll multiplier value
 */
static uint8_t rcc_get_pll_multiplier(void) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_PLLMULL_Pos) & 0x0F;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <rcc_get_pll_multiplier+0x7c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	71fb      	strb	r3, [r7, #7]

  switch (bitvalue) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	3b02      	subs	r3, #2
 8001210:	2b0b      	cmp	r3, #11
 8001212:	d829      	bhi.n	8001268 <rcc_get_pll_multiplier+0x70>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <rcc_get_pll_multiplier+0x24>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800124d 	.word	0x0800124d
 8001220:	08001251 	.word	0x08001251
 8001224:	08001255 	.word	0x08001255
 8001228:	08001259 	.word	0x08001259
 800122c:	0800125d 	.word	0x0800125d
 8001230:	08001261 	.word	0x08001261
 8001234:	08001269 	.word	0x08001269
 8001238:	08001269 	.word	0x08001269
 800123c:	08001269 	.word	0x08001269
 8001240:	08001269 	.word	0x08001269
 8001244:	08001269 	.word	0x08001269
 8001248:	08001265 	.word	0x08001265
    case (RCC_PLL1_MUL_X4):
      return 4;
 800124c:	2304      	movs	r3, #4
 800124e:	e00c      	b.n	800126a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X5):
      return 5;
 8001250:	2305      	movs	r3, #5
 8001252:	e00a      	b.n	800126a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X6):
      return 6;
 8001254:	2306      	movs	r3, #6
 8001256:	e008      	b.n	800126a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X7):
      return 7;
 8001258:	2307      	movs	r3, #7
 800125a:	e006      	b.n	800126a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X8):
      return 8;
 800125c:	2308      	movs	r3, #8
 800125e:	e004      	b.n	800126a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X9):
      return 9;
 8001260:	2309      	movs	r3, #9
 8001262:	e002      	b.n	800126a <rcc_get_pll_multiplier+0x72>

    case (RCC_PLL1_MUL_X65):
      return 13;
 8001264:	230d      	movs	r3, #13
 8001266:	e000      	b.n	800126a <rcc_get_pll_multiplier+0x72>
  }

  return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000

08001278 <rcc_calculate_pll_sysclk>:
/*
 * Calculate sysclk from PLL parameters
 * @param[void]
 * @return - pll multiplier value
 */
static uint32_t rcc_calculate_pll_sysclk(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
  uint8_t pll_multiplier = rcc_get_pll_multiplier();
 800127e:	f7ff ffbb 	bl	80011f8 <rcc_get_pll_multiplier>
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  uint8_t hse_divider = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
  uint32_t sysclk_value = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]

  // check HSE divider
  if (RCC->CFGR & RCC_CFGR_PLLXTPRE) {
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <rcc_calculate_pll_sysclk+0x70>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <rcc_calculate_pll_sysclk+0x26>
    hse_divider = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	73fb      	strb	r3, [r7, #15]
  }

  switch (RCC->CFGR & RCC_CFGR_PLLSRC) {
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <rcc_calculate_pll_sysclk+0x70>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <rcc_calculate_pll_sysclk+0x3a>
 80012aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ae:	d006      	beq.n	80012be <rcc_calculate_pll_sysclk+0x46>
 80012b0:	e00e      	b.n	80012d0 <rcc_calculate_pll_sysclk+0x58>
      // source HSI
    case (0):
      sysclk_value = (RCC_HSI_FREQUENCY / 2) * pll_multiplier;
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <rcc_calculate_pll_sysclk+0x74>)
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	60bb      	str	r3, [r7, #8]
      break;
 80012bc:	e008      	b.n	80012d0 <rcc_calculate_pll_sysclk+0x58>
      // source HSE
    case (RCC_CFGR_PLLSRC):
      sysclk_value = (RCC_HSE_FREQUENCY / hse_divider) * pll_multiplier;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <rcc_calculate_pll_sysclk+0x78>)
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	60bb      	str	r3, [r7, #8]
      break;
 80012ce:	bf00      	nop
  }

  // if multiplier is 6,5
  if (pll_multiplier == 13) {
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b0d      	cmp	r3, #13
 80012d4:	d102      	bne.n	80012dc <rcc_calculate_pll_sysclk+0x64>
    sysclk_value = sysclk_value / 2;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
  }

  return sysclk_value;
 80012dc:	68bb      	ldr	r3, [r7, #8]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	003d0900 	.word	0x003d0900
 80012f0:	007a1200 	.word	0x007a1200

080012f4 <rcc_get_adc_prescaler>:
 * Change bit value of adc prescaler to uint value
 * @param[void]
 * @return - adc prescaler value
 */
static uint8_t rcc_get_adc_prescaler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
	uint8_t bitvalue = (RCC->CFGR >> RCC_CFGR_ADCPRE_Pos) & 0x03;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <rcc_get_adc_prescaler+0x4c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0b9b      	lsrs	r3, r3, #14
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	71fb      	strb	r3, [r7, #7]

	  switch (bitvalue) {
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d812      	bhi.n	8001334 <rcc_get_adc_prescaler+0x40>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <rcc_get_adc_prescaler+0x20>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001325 	.word	0x08001325
 8001318:	08001329 	.word	0x08001329
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001331 	.word	0x08001331
	    case (RCC_ADC_PRESCALER_DIV2):
	      return 2;
 8001324:	2302      	movs	r3, #2
 8001326:	e006      	b.n	8001336 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV4):
	      return 4;
 8001328:	2304      	movs	r3, #4
 800132a:	e004      	b.n	8001336 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV6):
	      return 6;
 800132c:	2306      	movs	r3, #6
 800132e:	e002      	b.n	8001336 <rcc_get_adc_prescaler+0x42>

	    case (RCC_ADC_PRESCALER_DIV8):
	      return 8;
 8001330:	2308      	movs	r3, #8
 8001332:	e000      	b.n	8001336 <rcc_get_adc_prescaler+0x42>

	  }

	  return 0;
 8001334:	2300      	movs	r3, #0

}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ffc2 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <md_systick_configure_ms>:
 * Configure systick value to 1 ms and start it
 * @param[void]
 * @return - void
 */
void md_systick_configure_ms(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  rcc_clock_freqs_t freqs;

  md_rcc_get_frequencies(&freqs);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe44 	bl	8001072 <md_rcc_get_frequencies>

  SysTick_Config(freqs.hclk / 1000);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <md_systick_configure_ms+0x28>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ffcf 	bl	8001398 <SysTick_Config>

  return;
 80013fa:	bf00      	nop
}
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	10624dd3 	.word	0x10624dd3

08001408 <md_systick_get_tick>:
/*
 * Get current sys tick value
 * @param[void]
 * @return - systick value
 */
uint32_t md_systick_get_tick(void) { return systick; }
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <md_systick_get_tick+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	2000001c 	.word	0x2000001c

0800141c <md_systick_delay>:
 * calssic delay
 * @param[miliseconds] - time in ms
 * @return - void
 */
void md_systick_delay(uint32_t miliseconds)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t delay = md_systick_get_tick();
 8001424:	f7ff fff0 	bl	8001408 <md_systick_get_tick>
 8001428:	60f8      	str	r0, [r7, #12]
  while (md_systick_get_tick() - delay < miliseconds)
 800142a:	bf00      	nop
 800142c:	f7ff ffec 	bl	8001408 <md_systick_get_tick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <md_systick_delay+0x10>
    ;
  return;
 800143c:	bf00      	nop
}
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <SysTick_Handler>:
/*
 * Inc systick counter
 * @param[void]
 * @return - void
 */
void SysTick_Handler(void) { systick++; }
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Handler+0x18>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a03      	ldr	r2, [pc, #12]	; (800145c <SysTick_Handler+0x18>)
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000001c 	.word	0x2000001c

08001460 <md_usart_txe_callback>:
/*
 * user function to be called before txe system function
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
__weak void md_usart_txe_callback(usart_handle_t *p_hUSARTx) {}
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <usart_txe_callback>:
 * send a whole message
 * @param[*pUSARTx] - usart strucut handle
 * @return - void
 */
static void usart_txe_callback(usart_handle_t *p_hUSARTx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]

  if (p_hUSARTx->tx_buffer_count < p_hUSARTx->tx_buffer_len)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	88da      	ldrh	r2, [r3, #6]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	889b      	ldrh	r3, [r3, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	d20f      	bcs.n	80014a6 <usart_txe_callback+0x34>
    {
      p_hUSARTx->p_USARTx->DR =
          p_hUSARTx->p_tx_buffer[p_hUSARTx->tx_buffer_count];
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	88d2      	ldrh	r2, [r2, #6]
 800148e:	4413      	add	r3, r2
 8001490:	781a      	ldrb	r2, [r3, #0]
      p_hUSARTx->p_USARTx->DR =
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
      p_hUSARTx->tx_buffer_count++;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	88db      	ldrh	r3, [r3, #6]
 800149c:	3301      	adds	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	80da      	strh	r2, [r3, #6]
    {
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
    }

  return;
 80014a4:	e00b      	b.n	80014be <usart_txe_callback+0x4c>
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TXEIE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b4:	60da      	str	r2, [r3, #12]
      p_hUSARTx->usart_tx_status = USART_TX_IDLE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	735a      	strb	r2, [r3, #13]
  return;
 80014bc:	bf00      	nop
}
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <usart_main_callback>:
 * implemented inside
 * @param[*p_hUSARTx] - usart struct handle
 * @return - void
 */
static void usart_main_callback(usart_handle_t *p_hUSARTx)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  // TXE callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TXE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <usart_main_callback+0x2a>
    {
      if (p_hUSARTx->usart_tx_status == USART_TX_IRQ)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7b5b      	ldrb	r3, [r3, #13]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d105      	bne.n	80014f0 <usart_main_callback+0x2a>
        {
          // user function
          md_usart_txe_callback(p_hUSARTx);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffbb 	bl	8001460 <md_usart_txe_callback>
          // system function
          usart_txe_callback(p_hUSARTx);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffc1 	bl	8001472 <usart_txe_callback>
        }
    }

  // TC callback
  if (p_hUSARTx->p_USARTx->SR & USART_SR_TC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d019      	beq.n	8001532 <usart_main_callback+0x6c>
    {
      if (p_hUSARTx->tx_buffer_count == p_hUSARTx->tx_buffer_len)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	88da      	ldrh	r2, [r3, #6]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	889b      	ldrh	r3, [r3, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d10a      	bne.n	8001520 <usart_main_callback+0x5a>
        {
          // user function
          md_usart_tc_callback(p_hUSARTx);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7fe fed4 	bl	80002b8 <md_usart_tc_callback>
          CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_CR1_TCIE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800151e:	60da      	str	r2, [r3, #12]
        }
      CLEAR_BIT(p_hUSARTx->p_USARTx->CR1, USART_SR_TC);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800152e:	60da      	str	r2, [r3, #12]
    }

  return;
 8001530:	bf00      	nop
 8001532:	bf00      	nop
}
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <USART1_IRQHandler>:

// Vector table handlers for usart
#if MD_USING_USART1
void USART1_IRQHandler(void) { usart_main_callback(&husart1); }
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <USART1_IRQHandler+0x10>)
 8001542:	f7ff ffc0 	bl	80014c6 <usart_main_callback>
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000044 	.word	0x20000044

08001550 <USART2_IRQHandler>:
#endif // MD_USING_USART1

#if MD_USING_USART2
void USART2_IRQHandler(void) { usart_main_callback(&husart2); }
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <USART2_IRQHandler+0x10>)
 8001556:	f7ff ffb6 	bl	80014c6 <usart_main_callback>
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000034 	.word	0x20000034

08001564 <main>:
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  // example_usart_configure_baud()
  // example_usart_send_polling_2usarts();
  // example_usart_send_irq_2usarts();

	/* CAN EXAMPLES */
	example_can_init();
 8001568:	f7fe fe02 	bl	8000170 <example_can_init>

  for (;;)
 800156c:	e7fe      	b.n	800156c <main+0x8>

0800156e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
	...

0800157c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001580:	f7ff fff5 	bl	800156e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015aa:	f000 f811 	bl	80015d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ae:	f7ff ffd9 	bl	8001564 <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   r0, =_estack
 80015b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80015c0:	08001640 	.word	0x08001640
  ldr r2, =_sbss
 80015c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80015c8:	20000054 	.word	0x20000054

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>
	...

080015d0 <__libc_init_array>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2600      	movs	r6, #0
 80015d4:	4d0c      	ldr	r5, [pc, #48]	; (8001608 <__libc_init_array+0x38>)
 80015d6:	4c0d      	ldr	r4, [pc, #52]	; (800160c <__libc_init_array+0x3c>)
 80015d8:	1b64      	subs	r4, r4, r5
 80015da:	10a4      	asrs	r4, r4, #2
 80015dc:	42a6      	cmp	r6, r4
 80015de:	d109      	bne.n	80015f4 <__libc_init_array+0x24>
 80015e0:	f000 f81a 	bl	8001618 <_init>
 80015e4:	2600      	movs	r6, #0
 80015e6:	4d0a      	ldr	r5, [pc, #40]	; (8001610 <__libc_init_array+0x40>)
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <__libc_init_array+0x44>)
 80015ea:	1b64      	subs	r4, r4, r5
 80015ec:	10a4      	asrs	r4, r4, #2
 80015ee:	42a6      	cmp	r6, r4
 80015f0:	d105      	bne.n	80015fe <__libc_init_array+0x2e>
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f8:	4798      	blx	r3
 80015fa:	3601      	adds	r6, #1
 80015fc:	e7ee      	b.n	80015dc <__libc_init_array+0xc>
 80015fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001602:	4798      	blx	r3
 8001604:	3601      	adds	r6, #1
 8001606:	e7f2      	b.n	80015ee <__libc_init_array+0x1e>
 8001608:	08001638 	.word	0x08001638
 800160c:	08001638 	.word	0x08001638
 8001610:	08001638 	.word	0x08001638
 8001614:	0800163c 	.word	0x0800163c

08001618 <_init>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	bf00      	nop
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr

08001624 <_fini>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr
